/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0hBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzP2EzNGEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./resources/js/$experiment1.js":
/*!**************************************!*\
  !*** ./resources/js/$experiment1.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"experiment1\": () => (/* binding */ experiment1)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar trialTimeSetting = -7000,\n    totalTrialsRegular = 20,\n    totalTrialsControl = 10,\n    timerFontsize = '128px',\n    scaleFactor = window.devicePixelRatio || 1,\n    canvasSelector = 'canvas#experimental-core';\nvar intervalTimer = null,\n    trialTime,\n    randomDelay,\n    trials,\n    gsrData = [],\n    eventData = [],\n    setupTrialTriggered = false,\n    emotionalImage,\n    peacefulImage,\n    emotionalImageId,\n    peacefulImageId,\n    eCC,\n    chosenImageId = null,\n    subjectUserId = null,\n    subjectAgreement = null,\n    controlMode,\n    totalTrials,\n    navigationOveride = true,\n    controlNumber = '',\n    experimentId = '',\n    imageLoadEventHandlersRegistered = false,\n    serialDataLoggingTriggered = false;\n\nfunction initiate() {\n  setupPartNavigation();\n  setupFormInteractions();\n  setupGsrTrigger();\n  controlMode = document.body.classList.contains('experiment-2');\n  totalTrials = controlMode ? totalTrialsControl : totalTrialsRegular;\n}\n\nfunction setupPartNavigation() {\n  var availableParts = getAvailableParts(),\n      $experimentPartSections = $('.experiment section.part'),\n      $experimentPartMap = $('.experiment .experiment-structure .part');\n  $experimentPartMap.off('click.e6', \"**\");\n  $experimentPartMap.on('click.e6', function () {\n    var _this = this;\n\n    var $mainParent = $(this).parents('main');\n\n    if (!$(this).hasClass('not-yet') || navigationOveride) {\n      $mainParent.removeClass(availableParts.join(' '));\n      availableParts.forEach(function (availablePart) {\n        if ($(_this).hasClass(availablePart)) {\n          $mainParent.addClass(availablePart);\n          $experimentPartSections.addClass('hidden');\n          $experimentPartSections.filter('.' + availablePart).removeClass('hidden');\n        }\n      });\n      $experimentPartMap.removeClass('current');\n      $(this).addClass('current');\n    }\n  });\n}\n\nfunction getAvailableParts() {\n  var prefix = 'part-',\n      uptoNumber = 5;\n  var parts = [];\n\n  for (var i = 1; i <= uptoNumber; i++) {\n    parts.push(prefix + i);\n  }\n\n  return parts;\n}\n\nfunction setupFormInteractions() {\n  helpers.addAtemporalEventListener('submit', searchUser).querySelector('[name=\"ajax-search-user\"]');\n  helpers.addAtemporalEventListener('click', subjectAgreementAccepted).querySelector('#subject-agreement-accepted');\n  helpers.addAtemporalEventListener('click', subjectAgreementRejected).querySelector('#subject-agreement-rejected');\n}\n\nfunction searchUser(event) {\n  var form = event.target;\n  event.preventDefault();\n  helpers.ajaxForm(form, function (responseJson) {\n    if (responseJson.userId !== null) {\n      subjectFound(responseJson, form);\n    } else {\n      subjectNotFound(responseJson, form);\n    }\n  }, function (xhr) {\n    subjectNotFound(responseJson, form);\n  });\n}\n\nfunction subjectFound(responseJson, form) {\n  form.querySelectorAll('.message').forEach(function (spanElement) {\n    spanElement.classList.add('hidden');\n  });\n  form.querySelector('.success.message').classList.remove('hidden');\n  form.querySelectorAll('.subject-number').forEach(function (spanElement) {\n    spanElement.innerHTML = responseJson.userId;\n  });\n  subjectUserId = responseJson.userId;\n  $('.part-3').removeClass('not-yet');\n}\n\nfunction subjectNotFound(responseJson, form) {\n  form.querySelector('.failure.message').classList.remove('hidden');\n}\n\nfunction subjectAgreementAccepted() {\n  subjectAgreement = true;\n  $('.part-4').removeClass('not-yet');\n}\n\nfunction subjectAgreementRejected() {\n  subjectAgreement = false;\n  $('.part-4').removeClass('not-yet');\n}\n\nfunction setupGsrTrigger() {\n  var $buttonConnectToGSR = $('button#connect-to-gsr');\n  $buttonConnectToGSR.off('click.e7', \"**\");\n  $buttonConnectToGSR.on('click.e7', function () {\n    $(document).on('SerialDataPoint.e1', function () {\n      if (!setupTrialTriggered) {\n        setupTrialTriggered = true;\n        $buttonConnectToGSR.off('SerialDataPoint.e1', \"**\");\n        $('.part-4').addClass('experiment-started');\n        setupTrialTrigger();\n      }\n    });\n  });\n}\n\nfunction setupTrialTrigger() {\n  var $buttonBeginTrials = $('button#begin-trials');\n  $buttonBeginTrials.removeClass('neutral').removeAttr('disabled');\n  ;\n  $buttonBeginTrials.off('click.e3', \"**\");\n  $buttonBeginTrials.on('click.e3', function () {\n    $('#trials-container').removeClass('hidden');\n    trials = 0;\n    initiatePhase1();\n  });\n}\n\nfunction initiatePhase1() {\n  var $buttonBeginPhase2 = $('button#goto-phase-2');\n  $buttonBeginPhase2.off('click.e4', \"**\");\n  $buttonBeginPhase2.on('click.e4', initiatePhase2);\n  document.addEventListener('keyup', ifSpaceInitiatePhase2);\n\n  if (window.graphLive !== undefined) {\n    window.graphLive.stop();\n  }\n\n  logEvent(\"P1-T\".concat(trials + 1));\n\n  if (!serialDataLoggingTriggered) {\n    $(document).on('SerialDataPoint.e5', logDataPoint);\n    serialDataLoggingTriggered = true;\n  }\n\n  $('#phase-2, #end').addClass('hidden');\n  $('#phase-1').removeClass('hidden');\n  $('#phase-1 .trial-number').html(trials + 1);\n  $('#phase-1 .trial-totals').html(totalTrials);\n}\n\nfunction ifSpaceInitiatePhase2(event) {\n  if (event.code === 'Space') {\n    document.removeEventListener('keyup', ifSpaceInitiatePhase2);\n    initiatePhase2();\n  }\n}\n\nfunction logEvent(event) {\n  eventData.push({\n    event: event,\n    computerTime: Date.now()\n  });\n}\n\nfunction logDataPoint() {\n  gsrData.push(_objectSpread(_objectSpread({}, event.detail), {}, {\n    computerTime: Date.now()\n  }));\n}\n\nfunction initiatePhase2() {\n  logEvent(\"P2-T\".concat(trials + 1));\n  $('#phase-1, #end').addClass('hidden');\n  $('#phase-2').removeClass('hidden');\n  setupTrial();\n}\n\nfunction setupTrial() {\n  trialTime = trialTimeSetting;\n  randomDelay = Math.floor(Math.random() * 5) * 1000;\n  stopIntervalProcessor();\n  setIntervalTimer();\n  getImagePairUrls();\n  setupCanvas();\n  drawTimerOnCanvas();\n}\n\nfunction stopIntervalProcessor() {\n  clearInterval(intervalTimer);\n}\n\nfunction setIntervalTimer() {\n  intervalTimer = setInterval(function () {\n    intervalProcessor();\n    trialTime = trialTime + 100;\n  }, 100);\n}\n\nfunction intervalProcessor() {\n  if (trialTime < 0) {\n    stepPhase2();\n  } else if (trialTime == 0) {\n    initiatePhase3();\n    stepPhase3();\n  } else if (trialTime < 3000) {\n    stepPhase3();\n  } else if (trialTime == 3000) {\n    initiatePhase4();\n    stepPhase4();\n  } else if (trialTime < 10000 + randomDelay) {\n    stepPhase4();\n  } else if (trialTime == 10000 + randomDelay) {\n    endTrial();\n  }\n}\n\nfunction getImagePairUrls() {\n  var xhr = new XMLHttpRequest(),\n      url = '/mylab/experiment/presentiment/1/getImages';\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      loadImagePair(xhr.responseText);\n    } else if (xhr.readyState === 4) {\n      console.log('Something went wrong trying to obtain images.');\n    }\n  };\n\n  xhr.onerror = function () {\n    console.log('Something went very wrong trying to obtain images.');\n  };\n\n  xhr.open('GET', url, true);\n  xhr.send();\n}\n\nfunction loadImagePair(response) {\n  var returnData = JSON.parse(response);\n  emotionalImage = new Image();\n  peacefulImage = new Image();\n  emotionalImage.src = returnData.emotionalImageUrl;\n  peacefulImage.src = returnData.peacefulImageUrl;\n  emotionalImageId = returnData.emotionalImageId;\n  peacefulImageId = returnData.peacefulImageId;\n\n  if (!imageLoadEventHandlersRegistered) {\n    emotionalImage.onload = function () {\n      preDrawImageOnCanvas(emotionalImage);\n      console.debug('Loaded emotional image');\n    };\n\n    peacefulImage.onload = function () {\n      preDrawImageOnCanvas(peacefulImage);\n      console.debug('Loaded peaceful image');\n    };\n\n    imageLoadEventHandlersRegistered = true;\n  }\n}\n\nfunction setupCanvas() {\n  eCC = document.querySelector(canvasSelector).getContext('2d');\n  window.addEventListener('resize', function () {\n    resizeCanvas();\n  });\n  resizeCanvas();\n}\n\nfunction resizeCanvas() {\n  eCC.canvas.width = eCC.canvas.scrollWidth * scaleFactor;\n  eCC.canvas.height = eCC.canvas.scrollHeight * scaleFactor;\n}\n\nfunction stepPhase2() {\n  drawTimerOnCanvas();\n}\n\nfunction initiatePhase3() {\n  var theRandomDecision = Math.floor(Math.random() * 2);\n  logEvent(\"P3-T\".concat(trials + 1));\n\n  if (theRandomDecision == 0) {\n    drawImageOnCanvas(peacefulImage);\n    chosenImageId = peacefulImageId;\n  } else if (theRandomDecision == 1) {\n    drawImageOnCanvas(emotionalImage);\n    chosenImageId = emotionalImageId;\n  }\n}\n\nfunction stepPhase3() {}\n\nfunction initiatePhase4() {\n  logEvent(\"P4-T\".concat(trials + 1));\n  drawTimerOnCanvas();\n}\n\nfunction stepPhase4() {\n  drawTimerOnCanvas();\n}\n\nfunction endTrial() {\n  var $gotoPart5 = $('#goto-part-5');\n  logEvent(\"PE-T\".concat(trials + 1));\n  sendDataToServer();\n  trials++;\n\n  if (trials < totalTrials) {\n    initiatePhase1();\n  } else {\n    $(document).off('SerialDataPoint.e5', \"**\");\n    $('.phase').addClass('hidden');\n    $('#end').removeClass('hidden');\n    $gotoPart5.off('click.e8', \"**\");\n    $gotoPart5.on('click.e8', function () {\n      $('#trials-container').addClass('hidden');\n      $('.experiment-structure .part-5').click();\n    });\n\n    if (window.graphLive !== undefined) {\n      window.graphLive.resume();\n    }\n\n    experimentId = '';\n    controlNumber = '';\n    $('.part-5').removeClass('not-yet');\n  }\n}\n\nfunction sendDataToServer() {\n  var xhr = new XMLHttpRequest(),\n      formData = new FormData(),\n      gsrData = formatGsrData(),\n      eventData = formatEventData(),\n      form = document.querySelector('[name=\"ajax-info\"]'),\n      url = form.action,\n      userId = form.user_id.value,\n      csrfToken = form._token.value;\n  formData.append(\"gsrData\", gsrData);\n  formData.append(\"eventData\", eventData);\n  formData.append(\"imageId\", chosenImageId);\n  formData.append(\"controlNumber\", controlNumber);\n  formData.append(\"userId\", userId);\n  formData.append(\"subjectUserId\", subjectUserId);\n  formData.append(\"experimentId\", experimentId);\n  formData.append(\"subjectAgreement\", subjectAgreement ? 1 : 0);\n  xhr.open(\"POST\", url, true);\n  xhr.setRequestHeader('X-CSRF-TOKEN', csrfToken);\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      console.log(xhr.responseText);\n      successfullTrialSubmission(JSON.parse(xhr.responseText));\n    } else if (xhr.readyState === 4) {\n      console.log(xhr.responseText);\n    }\n  };\n\n  xhr.send(formData);\n}\n\nfunction successfullTrialSubmission(jsonResponse) {\n  experimentId = jsonResponse.experimentId;\n}\n\nfunction formatGsrData() {\n  var csvTypeData = '';\n  gsrData.forEach(function (SerialDataPoint) {\n    var microvolts = Math.round(SerialDataPoint.millivolts * 1000);\n    csvTypeData = csvTypeData + \"\".concat(SerialDataPoint.computerTime, \",\").concat(SerialDataPoint.time, \",\").concat(microvolts, \"\\n\");\n  });\n  gsrData = [];\n  return csvTypeData;\n}\n\nfunction formatEventData() {\n  var csvTypeData = '';\n  eventData.forEach(function (eventDataPoint) {\n    csvTypeData = csvTypeData + \"\".concat(eventDataPoint.computerTime, \",\").concat(eventDataPoint.event, \"\\n\");\n  });\n  eventData = [];\n  return csvTypeData;\n}\n\nfunction drawTimerOnCanvas() {\n  var currentTime = (trialTime / 1000).toFixed(1),\n      sign = currentTime >= 0 ? '+' : '';\n  eCC.clearRect(0, 0, eCC.canvas.width, eCC.canvas.height);\n  eCC.font = \"200 \".concat(timerFontsize, \" \\\"Open Sans\\\"\");\n  eCC.fillStyle = \"#ffffff\";\n  eCC.textAlign = \"center\";\n  eCC.fillText(\"T\".concat(sign).concat(currentTime), eCC.canvas.width / 2, eCC.canvas.height / 2);\n}\n\nfunction preDrawImageOnCanvas(image) {\n  eCC.globalAlpha = 0.01;\n  eCC.drawImage(image, 0, 0, 0.1, 0.1);\n  eCC.globalAlpha = 1;\n}\n\nfunction drawImageOnCanvas(image) {\n  var originalWidth = image.naturalWidth,\n      originalHeight = image.naturalHeight,\n      imageWidthIfCanvasHeight = originalWidth * (eCC.canvas.height / originalHeight),\n      imageHeightIfCanvasWidth = originalHeight * (eCC.canvas.width / originalWidth),\n      constrainWidth = imageWidthIfCanvasHeight > eCC.canvas.width,\n      calculatedWidth = constrainWidth ? eCC.canvas.width : imageWidthIfCanvasHeight,\n      calculatedHeight = constrainWidth ? imageHeightIfCanvasWidth : eCC.canvas.height,\n      imageLocationX = eCC.canvas.width / 2 - calculatedWidth / 2,\n      imageLocationY = eCC.canvas.height / 2 - calculatedHeight / 2;\n  logEvent(\"BeforeImageDraw-T\".concat(trials + 1));\n  eCC.clearRect(0, 0, eCC.canvas.width, eCC.canvas.height);\n  eCC.drawImage(image, imageLocationX, imageLocationY, calculatedWidth, calculatedHeight);\n\n  if (controlMode) {\n    var red = Math.floor(Math.random() * 256),\n        green = Math.floor(Math.random() * 256),\n        blue = Math.floor(Math.random() * 256),\n        redChannel = (red + 1) * 65536 - 1,\n        greenChannel = (green + 1) * 256 - 1,\n        blueChannel = (blue + 1) * 1 - 1;\n    controlNumber = redChannel + greenChannel + blueChannel;\n    eCC.fillStyle = \"rgb(\".concat(red, \", \").concat(green, \", \").concat(blue, \")\");\n    eCC.fillRect(0.1, 0, eCC.canvas.width, eCC.canvas.height);\n  }\n\n  logEvent(\"AfterImageDraw-T\".concat(trials + 1));\n}\n\nvar experiment1 = {\n  initiate: initiate,\n  gsrData: gsrData,\n  eventData: eventData,\n  stopIntervalProcessor: stopIntervalProcessor\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/$experiment1.js\n");

/***/ }),

/***/ "./resources/js/$full-screen-alerts.js":
/*!*********************************************!*\
  !*** ./resources/js/$full-screen-alerts.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fullScreenAlerts\": () => (/* binding */ fullScreenAlerts)\n/* harmony export */ });\nfunction eventsSetup() {\n  $('body').on('click', '.full-screen-alert-dismiss', function () {\n    $(this).parents('.full-screen-alert:not(body)').remove();\n    $('body').removeClass('full-screen-alert');\n  });\n}\n\nfunction startingConditionCheck() {\n  if ($('.full-screen-alert:visible').length > 0) {\n    $('body').addClass('full-screen-alert');\n  }\n}\n\nfunction initiate() {\n  eventsSetup();\n  startingConditionCheck();\n}\n\nvar fullScreenAlerts = {\n  initiate: initiate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvJGZ1bGwtc2NyZWVuLWFsZXJ0cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsV0FBVCxHQUF1QjtBQUNuQkMsRUFBQUEsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVQyxFQUFWLENBQWEsT0FBYixFQUFzQiw0QkFBdEIsRUFBb0QsWUFBVztBQUMzREQsSUFBQUEsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRSxPQUFSLENBQWdCLDhCQUFoQixFQUFnREMsTUFBaEQ7QUFDQUgsSUFBQUEsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVSSxXQUFWLENBQXNCLG1CQUF0QjtBQUNILEdBSEQ7QUFJSDs7QUFFRCxTQUFTQyxzQkFBVCxHQUFrQztBQUM5QixNQUFJTCxDQUFDLENBQUMsNEJBQUQsQ0FBRCxDQUFnQ00sTUFBaEMsR0FBeUMsQ0FBN0MsRUFBZ0Q7QUFDNUNOLElBQUFBLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVU8sUUFBVixDQUFtQixtQkFBbkI7QUFDSDtBQUNKOztBQUVELFNBQVNDLFFBQVQsR0FBb0I7QUFDaEJULEVBQUFBLFdBQVc7QUFDWE0sRUFBQUEsc0JBQXNCO0FBQ3pCOztBQUVNLElBQU1JLGdCQUFnQixHQUFHO0FBQzVCRCxFQUFBQSxRQUFRLEVBQVJBO0FBRDRCLENBQXpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzLyRmdWxsLXNjcmVlbi1hbGVydHMuanM/NDgyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBldmVudHNTZXR1cCgpIHtcbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5mdWxsLXNjcmVlbi1hbGVydC1kaXNtaXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykucGFyZW50cygnLmZ1bGwtc2NyZWVuLWFsZXJ0Om5vdChib2R5KScpLnJlbW92ZSgpO1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2Z1bGwtc2NyZWVuLWFsZXJ0Jyk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0aW5nQ29uZGl0aW9uQ2hlY2soKSB7XG4gICAgaWYgKCQoJy5mdWxsLXNjcmVlbi1hbGVydDp2aXNpYmxlJykubGVuZ3RoID4gMCkge1xuICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2Z1bGwtc2NyZWVuLWFsZXJ0Jyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWF0ZSgpIHtcbiAgICBldmVudHNTZXR1cCgpO1xuICAgIHN0YXJ0aW5nQ29uZGl0aW9uQ2hlY2soKTtcbn1cblxuZXhwb3J0IGNvbnN0IGZ1bGxTY3JlZW5BbGVydHMgPSB7XG4gICAgaW5pdGlhdGVcbn07Il0sIm5hbWVzIjpbImV2ZW50c1NldHVwIiwiJCIsIm9uIiwicGFyZW50cyIsInJlbW92ZSIsInJlbW92ZUNsYXNzIiwic3RhcnRpbmdDb25kaXRpb25DaGVjayIsImxlbmd0aCIsImFkZENsYXNzIiwiaW5pdGlhdGUiLCJmdWxsU2NyZWVuQWxlcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/$full-screen-alerts.js\n");

/***/ }),

/***/ "./resources/js/Classes/Experiment.js":
/*!********************************************!*\
  !*** ./resources/js/Classes/Experiment.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Experiment\": () => (/* binding */ Experiment)\n/* harmony export */ });\n/* harmony import */ var _Trial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Trial */ \"./resources/js/Classes/Trial.js\");\n/* harmony import */ var _TrialSet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TrialSet */ \"./resources/js/Classes/TrialSet.js\");\n/* harmony import */ var _PlotSet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PlotSet */ \"./resources/js/Classes/PlotSet.js\");\n/* harmony import */ var _Plot__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Plot */ \"./resources/js/Classes/Plot.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\nvar Experiment = /*#__PURE__*/function (_TrialSet) {\n  _inherits(Experiment, _TrialSet);\n\n  var _super = _createSuper(Experiment);\n\n  function Experiment(experimentData, gloabalDatasetReference) {\n    var _this;\n\n    _classCallCheck(this, Experiment);\n\n    _this = _super.call(this);\n    _this.id = experimentData.id;\n    _this.op_type_number = experimentData.op_type_number;\n    _this.subject_user_id = experimentData.subject_user_id;\n    _this.subject_user = experimentData.subject_user;\n    _this.subject_agreement = experimentData.subject_agreement;\n    _this.created_at = experimentData.created_at;\n    _this.updated_at = experimentData.updated_at;\n    _this.parentGlobalDataSet = gloabalDatasetReference;\n    _this.trialsActive = false;\n    _this.averageActive = false;\n    _this.loaded = false; // ToDo: set ths depending on whether it's actually loaded or not.\n\n    _this.onload = function () {};\n\n    _this.ingestTrialData(experimentData.trials);\n\n    _this.started_at = _this.trials()[0].eventData[0].jsTime;\n    _this.peacefulPlotColour = '#ff00ff';\n    _this.emotionalPlotColour = '#00FF00';\n    return _this;\n  }\n\n  _createClass(Experiment, [{\n    key: \"ingestTrialData\",\n    value: function ingestTrialData(trials) {\n      var _this2 = this;\n\n      var trialIdsPresent = [];\n      this.trialData.forEach(function (trial) {\n        trialIdsPresent.push(trial.id);\n      });\n      this.trialData = trials.map(function (trialData) {\n        if (trialIdsPresent.includes(trialData.id)) {\n          return _this2.trial(trialData.id).updateData(trialData);\n        } else {\n          return new _Trial__WEBPACK_IMPORTED_MODULE_0__.Trial(trialData, _this2);\n        }\n      });\n    }\n  }, {\n    key: \"calculateAverageData\",\n    value: function calculateAverageData() {\n      var _this$reduceToPeacefu, _this$reduceToEmotion;\n\n      // ToDo: MVP1: Finish off function, dependencies and test. TrialSets!!!\n      // TrialSets need completion first before continuing. This means pointers in this file that use static\n      // methods in the TrialSet because an Experiment is basically a TrialSet with extra bits.\n      var millisecondsInterval = 10,\n          minMax = this.resolveLowestCommonDenominatorTrialTimes();\n      this.averageData.peaceful = (_this$reduceToPeacefu = this.reduceToPeaceful().calculateAverageData(minMax, millisecondsInterval)) !== null && _this$reduceToPeacefu !== void 0 ? _this$reduceToPeacefu : [];\n      this.averageData.emotional = (_this$reduceToEmotion = this.reduceToEmotional().calculateAverageData(minMax, millisecondsInterval)) !== null && _this$reduceToEmotion !== void 0 ? _this$reduceToEmotion : [];\n    }\n  }, {\n    key: \"resolveLowestCommonDenominatorTrialTimes\",\n    value: function resolveLowestCommonDenominatorTrialTimes() {\n      var minMaxData = this.trialData.map(function (trial) {\n        return trial.minMaxData();\n      });\n      var minimums = minMaxData.map(function (minMax) {\n        return minMax.min.experimentalTime;\n      }),\n          maximums = minMaxData.map(function (minMax) {\n        return minMax.max.experimentalTime;\n      });\n      return {\n        highestMin: Math.max.apply(Math, _toConsumableArray(minimums)),\n        lowestMax: Math.min.apply(Math, _toConsumableArray(maximums))\n      };\n    }\n  }, {\n    key: \"load\",\n    value: function load(callback) {\n      var _this3 = this;\n\n      if (this.loaded) {\n        this.dataLoaded(false, callback);\n      } else {\n        helpers.ajaxGet(\"/mylab/experiment/presentiment/1&2/get-experiment/\".concat(this.id), function (data) {\n          _this3.dataLoaded(data, callback);\n        }, this.dataLoadFailed);\n      }\n    }\n  }, {\n    key: \"unload\",\n    value: function unload() {\n      this.trialData.forEach(function (trial) {\n        trial.gsrData = [];\n      });\n      this.loaded = false;\n      this.trialsActive = false;\n    }\n  }, {\n    key: \"dataLoaded\",\n    value: function dataLoaded(data, callback) {\n      var _this4 = this;\n\n      if (!this.loaded) {\n        var experimentData = data.experimentalData.filter(function (experiment) {\n          return experiment.id === _this4.id;\n        }),\n            trials = experimentData[0].trials;\n        this.ingestTrialData(trials);\n        this.loaded = true;\n      }\n\n      if (typeof callback === 'function') {\n        callback(data, this);\n      }\n\n      if (typeof this.onload === 'function') {\n        this.onload(data);\n      }\n    }\n  }, {\n    key: \"dataLoadFailed\",\n    value: function dataLoadFailed() {\n      debugger;\n    }\n  }, {\n    key: \"activateTrials\",\n    value: function activateTrials() {\n      this.trialsActive = true;\n    }\n  }, {\n    key: \"deactivateTrials\",\n    value: function deactivateTrials() {\n      this.trialsActive = false;\n    }\n  }, {\n    key: \"activateAverage\",\n    value: function activateAverage() {\n      if (this.averageData.peaceful.length === 0 && this.averageData.emotional.length === 0) {\n        this.calculateAverageData();\n      }\n\n      this.averageActive = true;\n    }\n  }, {\n    key: \"deactivateAverage\",\n    value: function deactivateAverage() {\n      this.averageActive = false;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this.trialData;\n    }\n  }, {\n    key: \"setPeacefulPlotColour\",\n    value: function setPeacefulPlotColour(colour) {\n      this.peacefulPlotColour = colour;\n    }\n  }, {\n    key: \"setEmotionalPlotColour\",\n    value: function setEmotionalPlotColour(colour) {\n      this.emotionalPlotColour = colour;\n    }\n  }, {\n    key: \"plotSet\",\n    value: function plotSet() {\n      var _this5 = this;\n\n      return new _PlotSet__WEBPACK_IMPORTED_MODULE_2__.PlotSet(this.data.map(function (trial) {\n        var plot = trial.plot();\n\n        switch (trial.image.type.name) {\n          case 'Peaceful':\n            plot.colour(_this5.peacefulPlotColour);\n            break;\n\n          case 'Emotional':\n            plot.colour(_this5.emotionalPlotColour);\n            break;\n\n          default:\n            debugger;\n        }\n\n        return plot;\n      }));\n    }\n  }, {\n    key: \"averagePlotSet\",\n    value: function averagePlotSet() {\n      var peacefulPlot = new _Plot__WEBPACK_IMPORTED_MODULE_3__.Plot(this.averageData.peaceful.map(_Trial__WEBPACK_IMPORTED_MODULE_0__.Trial.trialDataToPlotData)),\n          emotionalPlot = new _Plot__WEBPACK_IMPORTED_MODULE_3__.Plot(this.averageData.emotional.map(_Trial__WEBPACK_IMPORTED_MODULE_0__.Trial.trialDataToPlotData)),\n          plots = [];\n      peacefulPlot.colour(this.peacefulPlotColour);\n      emotionalPlot.colour(this.emotionalPlotColour);\n\n      if (peacefulPlot.hasData) {\n        plots.push(peacefulPlot);\n      }\n\n      if (emotionalPlot.hasData) {\n        plots.push(emotionalPlot);\n      }\n\n      return new _PlotSet__WEBPACK_IMPORTED_MODULE_2__.PlotSet(plots);\n    }\n  }]);\n\n  return Experiment;\n}(_TrialSet__WEBPACK_IMPORTED_MODULE_1__.TrialSet);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Classes/Experiment.js\n");

/***/ }),

/***/ "./resources/js/Classes/ExperimentsSet.js":
/*!************************************************!*\
  !*** ./resources/js/Classes/ExperimentsSet.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ExperimentsSet\": () => (/* binding */ ExperimentsSet)\n/* harmony export */ });\n/* harmony import */ var _PlotSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlotSet */ \"./resources/js/Classes/PlotSet.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar ExperimentsSet = /*#__PURE__*/function () {\n  function ExperimentsSet() {\n    var experimentsArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, ExperimentsSet);\n\n    if (experimentsArray !== null) {\n      this.privateData = experimentsArray;\n    }\n  }\n\n  _createClass(ExperimentsSet, [{\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      return this.privateData.forEach(callback, thisArg);\n    }\n  }, {\n    key: \"experiment\",\n    value: function experiment(id) {\n      return this.privateData.filter(function (experiment) {\n        return experiment.id === id;\n      })[0];\n    }\n  }, {\n    key: \"experiments\",\n    value: function experiments() {\n      var idArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (idArray === null) {\n        return new ExperimentsSet(this.privateData);\n      } else {\n        return new ExperimentsSet(this.privateData.filter(function (experiment) {\n          return idArray.includes(experiment.id);\n        }));\n      }\n    }\n  }, {\n    key: \"reduceToLoaded\",\n    value: function reduceToLoaded() {\n      return new ExperimentsSet(this.privateData.filter(function (experiment) {\n        return experiment.loaded === true;\n      }));\n    }\n  }, {\n    key: \"reduceToActiveTrials\",\n    value: function reduceToActiveTrials() {\n      return new ExperimentsSet(this.privateData.filter(function (experiment) {\n        return experiment.trialsActive === true;\n      }));\n    }\n  }, {\n    key: \"reduceToActiveAverages\",\n    value: function reduceToActiveAverages() {\n      return new ExperimentsSet(this.privateData.filter(function (experiment) {\n        return experiment.averageActive === true;\n      }));\n    }\n  }, {\n    key: \"plotSet\",\n    value: function plotSet() {\n      var plotSetData = [];\n      this.privateData.forEach(function (experiment) {\n        experiment.trials().forEach(function (trial) {\n          plotSetData.push(trial.plot());\n        });\n      });\n      return new _PlotSet__WEBPACK_IMPORTED_MODULE_0__.PlotSet(plotSetData);\n    }\n  }, {\n    key: \"averagePlotSet\",\n    value: function averagePlotSet() {\n      var plotSetData = [];\n      this.privateData.forEach(function (experiment) {\n        plotSetData.push.apply(plotSetData, _toConsumableArray(experiment.averagePlotSet().data));\n      });\n      return new _PlotSet__WEBPACK_IMPORTED_MODULE_0__.PlotSet(plotSetData);\n    }\n  }]);\n\n  return ExperimentsSet;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvQ2xhc3Nlcy9FeHBlcmltZW50c1NldC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBRU8sSUFBTUMsY0FBYjtBQUNJLDRCQUFxQztBQUFBLFFBQXpCQyxnQkFBeUIsdUVBQU4sSUFBTTs7QUFBQTs7QUFDakMsUUFBSUEsZ0JBQWdCLEtBQUssSUFBekIsRUFBK0I7QUFDM0IsV0FBS0MsV0FBTCxHQUFtQkQsZ0JBQW5CO0FBQ0g7QUFDSjs7QUFMTDtBQUFBO0FBQUEsV0FPSSxpQkFBUUUsUUFBUixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDdkIsYUFBTyxLQUFLRixXQUFMLENBQWlCRyxPQUFqQixDQUF5QkYsUUFBekIsRUFBbUNDLE9BQW5DLENBQVA7QUFDSDtBQVRMO0FBQUE7QUFBQSxXQVdJLG9CQUFXRSxFQUFYLEVBQWU7QUFDWCxhQUFPLEtBQUtKLFdBQUwsQ0FBaUJLLE1BQWpCLENBQXdCLFVBQUNDLFVBQUQsRUFBZ0I7QUFDM0MsZUFBT0EsVUFBVSxDQUFDRixFQUFYLEtBQWtCQSxFQUF6QjtBQUNILE9BRk0sRUFFSixDQUZJLENBQVA7QUFHSDtBQWZMO0FBQUE7QUFBQSxXQWlCSSx1QkFBNEI7QUFBQSxVQUFoQkcsT0FBZ0IsdUVBQU4sSUFBTTs7QUFDeEIsVUFBSUEsT0FBTyxLQUFLLElBQWhCLEVBQXNCO0FBQ2xCLGVBQU8sSUFBSVQsY0FBSixDQUFtQixLQUFLRSxXQUF4QixDQUFQO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsZUFBTyxJQUFJRixjQUFKLENBQ0gsS0FBS0UsV0FBTCxDQUFpQkssTUFBakIsQ0FBd0IsVUFBQ0MsVUFBRCxFQUFnQjtBQUNwQyxpQkFBT0MsT0FBTyxDQUFDQyxRQUFSLENBQWlCRixVQUFVLENBQUNGLEVBQTVCLENBQVA7QUFDSCxTQUZELENBREcsQ0FBUDtBQUtIO0FBQ0o7QUEzQkw7QUFBQTtBQUFBLFdBNkJJLDBCQUFpQjtBQUNiLGFBQU8sSUFBSU4sY0FBSixDQUNILEtBQUtFLFdBQUwsQ0FBaUJLLE1BQWpCLENBQXdCLFVBQUNDLFVBQUQsRUFBZ0I7QUFDcEMsZUFBT0EsVUFBVSxDQUFDRyxNQUFYLEtBQXNCLElBQTdCO0FBQ0gsT0FGRCxDQURHLENBQVA7QUFLSDtBQW5DTDtBQUFBO0FBQUEsV0FxQ0ksZ0NBQXVCO0FBQ25CLGFBQU8sSUFBSVgsY0FBSixDQUNILEtBQUtFLFdBQUwsQ0FBaUJLLE1BQWpCLENBQXdCLFVBQUNDLFVBQUQsRUFBZ0I7QUFDcEMsZUFBT0EsVUFBVSxDQUFDSSxZQUFYLEtBQTRCLElBQW5DO0FBQ0gsT0FGRCxDQURHLENBQVA7QUFLSDtBQTNDTDtBQUFBO0FBQUEsV0E2Q0ksa0NBQXlCO0FBQ3JCLGFBQU8sSUFBSVosY0FBSixDQUNILEtBQUtFLFdBQUwsQ0FBaUJLLE1BQWpCLENBQXdCLFVBQUNDLFVBQUQsRUFBZ0I7QUFDcEMsZUFBT0EsVUFBVSxDQUFDSyxhQUFYLEtBQTZCLElBQXBDO0FBQ0gsT0FGRCxDQURHLENBQVA7QUFLSDtBQW5ETDtBQUFBO0FBQUEsV0FxREksbUJBQVU7QUFDTixVQUFNQyxXQUFXLEdBQUcsRUFBcEI7QUFFQSxXQUFLWixXQUFMLENBQWlCRyxPQUFqQixDQUF5QixVQUFDRyxVQUFELEVBQWdCO0FBQ3JDQSxRQUFBQSxVQUFVLENBQUNPLE1BQVgsR0FBb0JWLE9BQXBCLENBQTRCLFVBQUNXLEtBQUQsRUFBVztBQUNuQ0YsVUFBQUEsV0FBVyxDQUFDRyxJQUFaLENBQWlCRCxLQUFLLENBQUNFLElBQU4sRUFBakI7QUFDSCxTQUZEO0FBR0gsT0FKRDtBQU1BLGFBQU8sSUFBSW5CLDZDQUFKLENBQVllLFdBQVosQ0FBUDtBQUNIO0FBL0RMO0FBQUE7QUFBQSxXQWlFSSwwQkFBaUI7QUFDYixVQUFNQSxXQUFXLEdBQUcsRUFBcEI7QUFFQSxXQUFLWixXQUFMLENBQWlCRyxPQUFqQixDQUF5QixVQUFDRyxVQUFELEVBQWdCO0FBQ3JDTSxRQUFBQSxXQUFXLENBQUNHLElBQVosT0FBQUgsV0FBVyxxQkFBU04sVUFBVSxDQUFDVyxjQUFYLEdBQTRCQyxJQUFyQyxFQUFYO0FBQ0gsT0FGRDtBQUlBLGFBQU8sSUFBSXJCLDZDQUFKLENBQVllLFdBQVosQ0FBUDtBQUNIO0FBekVMOztBQUFBO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvQ2xhc3Nlcy9FeHBlcmltZW50c1NldC5qcz84YWM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGxvdFNldH0gZnJvbSBcIi4vUGxvdFNldFwiO1xuXG5leHBvcnQgY2xhc3MgRXhwZXJpbWVudHNTZXQge1xuICAgIGNvbnN0cnVjdG9yKGV4cGVyaW1lbnRzQXJyYXkgPSBudWxsKSB7XG4gICAgICAgIGlmIChleHBlcmltZW50c0FycmF5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZhdGVEYXRhID0gZXhwZXJpbWVudHNBcnJheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZURhdGEuZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZyk7XG4gICAgfVxuXG4gICAgZXhwZXJpbWVudChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlRGF0YS5maWx0ZXIoKGV4cGVyaW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBleHBlcmltZW50LmlkID09PSBpZDtcbiAgICAgICAgfSlbMF07XG4gICAgfVxuXG4gICAgZXhwZXJpbWVudHMoaWRBcnJheSA9IG51bGwpIHtcbiAgICAgICAgaWYgKGlkQXJyYXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXhwZXJpbWVudHNTZXQodGhpcy5wcml2YXRlRGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEV4cGVyaW1lbnRzU2V0KFxuICAgICAgICAgICAgICAgIHRoaXMucHJpdmF0ZURhdGEuZmlsdGVyKChleHBlcmltZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZEFycmF5LmluY2x1ZGVzKGV4cGVyaW1lbnQuaWQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVkdWNlVG9Mb2FkZWQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXhwZXJpbWVudHNTZXQoXG4gICAgICAgICAgICB0aGlzLnByaXZhdGVEYXRhLmZpbHRlcigoZXhwZXJpbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBlcmltZW50LmxvYWRlZCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVkdWNlVG9BY3RpdmVUcmlhbHMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXhwZXJpbWVudHNTZXQoXG4gICAgICAgICAgICB0aGlzLnByaXZhdGVEYXRhLmZpbHRlcigoZXhwZXJpbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBlcmltZW50LnRyaWFsc0FjdGl2ZSA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVkdWNlVG9BY3RpdmVBdmVyYWdlcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHBlcmltZW50c1NldChcbiAgICAgICAgICAgIHRoaXMucHJpdmF0ZURhdGEuZmlsdGVyKChleHBlcmltZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cGVyaW1lbnQuYXZlcmFnZUFjdGl2ZSA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcGxvdFNldCgpIHtcbiAgICAgICAgY29uc3QgcGxvdFNldERhdGEgPSBbXTtcblxuICAgICAgICB0aGlzLnByaXZhdGVEYXRhLmZvckVhY2goKGV4cGVyaW1lbnQpID0+IHtcbiAgICAgICAgICAgIGV4cGVyaW1lbnQudHJpYWxzKCkuZm9yRWFjaCgodHJpYWwpID0+IHtcbiAgICAgICAgICAgICAgICBwbG90U2V0RGF0YS5wdXNoKHRyaWFsLnBsb3QoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQbG90U2V0KHBsb3RTZXREYXRhKTtcbiAgICB9XG5cbiAgICBhdmVyYWdlUGxvdFNldCgpIHtcbiAgICAgICAgY29uc3QgcGxvdFNldERhdGEgPSBbXTtcblxuICAgICAgICB0aGlzLnByaXZhdGVEYXRhLmZvckVhY2goKGV4cGVyaW1lbnQpID0+IHtcbiAgICAgICAgICAgIHBsb3RTZXREYXRhLnB1c2goLi4uZXhwZXJpbWVudC5hdmVyYWdlUGxvdFNldCgpLmRhdGEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IFBsb3RTZXQocGxvdFNldERhdGEpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJQbG90U2V0IiwiRXhwZXJpbWVudHNTZXQiLCJleHBlcmltZW50c0FycmF5IiwicHJpdmF0ZURhdGEiLCJjYWxsYmFjayIsInRoaXNBcmciLCJmb3JFYWNoIiwiaWQiLCJmaWx0ZXIiLCJleHBlcmltZW50IiwiaWRBcnJheSIsImluY2x1ZGVzIiwibG9hZGVkIiwidHJpYWxzQWN0aXZlIiwiYXZlcmFnZUFjdGl2ZSIsInBsb3RTZXREYXRhIiwidHJpYWxzIiwidHJpYWwiLCJwdXNoIiwicGxvdCIsImF2ZXJhZ2VQbG90U2V0IiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/Classes/ExperimentsSet.js\n");

/***/ }),

/***/ "./resources/js/Classes/GlobalDataSet.js":
/*!***********************************************!*\
  !*** ./resources/js/Classes/GlobalDataSet.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GlobalDataSet\": () => (/* binding */ GlobalDataSet)\n/* harmony export */ });\n/* harmony import */ var _Experiment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Experiment */ \"./resources/js/Classes/Experiment.js\");\n/* harmony import */ var _ExperimentsSet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ExperimentsSet */ \"./resources/js/Classes/ExperimentsSet.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar GlobalDataSet = /*#__PURE__*/function (_ExperimentsSet) {\n  _inherits(GlobalDataSet, _ExperimentsSet);\n\n  var _super = _createSuper(GlobalDataSet);\n\n  function GlobalDataSet(jsonDataFromServer) {\n    var _this;\n\n    _classCallCheck(this, GlobalDataSet);\n\n    _this = _super.call(this);\n    _this.privateData = jsonDataFromServer.experimentalData.map(function (experimentData) {\n      return new _Experiment__WEBPACK_IMPORTED_MODULE_0__.Experiment(experimentData, _assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  _createClass(GlobalDataSet, [{\n    key: \"data\",\n    get: function get() {\n      return this.privateData;\n    }\n  }]);\n\n  return GlobalDataSet;\n}(_ExperimentsSet__WEBPACK_IMPORTED_MODULE_1__.ExperimentsSet);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvQ2xhc3Nlcy9HbG9iYWxEYXRhU2V0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBRU8sSUFBTUUsYUFBYjtBQUFBOztBQUFBOztBQUNJLHlCQUFZQyxrQkFBWixFQUFnQztBQUFBOztBQUFBOztBQUM1QjtBQUNBLFVBQUtDLFdBQUwsR0FBbUJELGtCQUFrQixDQUFDRSxnQkFBbkIsQ0FBb0NDLEdBQXBDLENBQXdDLFVBQUNDLGNBQUQsRUFBb0I7QUFDM0UsYUFBTyxJQUFJUCxtREFBSixDQUFlTyxjQUFmLGdDQUFQO0FBQ0gsS0FGa0IsQ0FBbkI7QUFGNEI7QUFLL0I7O0FBTkw7QUFBQTtBQUFBLFNBUUksZUFBVztBQUNQLGFBQU8sS0FBS0gsV0FBWjtBQUNIO0FBVkw7O0FBQUE7QUFBQSxFQUFtQ0gsMkRBQW5DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL0NsYXNzZXMvR2xvYmFsRGF0YVNldC5qcz9jZmU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXhwZXJpbWVudH0gZnJvbSAnLi9FeHBlcmltZW50JztcbmltcG9ydCB7RXhwZXJpbWVudHNTZXR9IGZyb20gXCIuL0V4cGVyaW1lbnRzU2V0XCI7XG5cbmV4cG9ydCBjbGFzcyBHbG9iYWxEYXRhU2V0IGV4dGVuZHMgRXhwZXJpbWVudHNTZXQge1xuICAgIGNvbnN0cnVjdG9yKGpzb25EYXRhRnJvbVNlcnZlcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnByaXZhdGVEYXRhID0ganNvbkRhdGFGcm9tU2VydmVyLmV4cGVyaW1lbnRhbERhdGEubWFwKChleHBlcmltZW50RGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFeHBlcmltZW50KGV4cGVyaW1lbnREYXRhLCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVEYXRhO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJFeHBlcmltZW50IiwiRXhwZXJpbWVudHNTZXQiLCJHbG9iYWxEYXRhU2V0IiwianNvbkRhdGFGcm9tU2VydmVyIiwicHJpdmF0ZURhdGEiLCJleHBlcmltZW50YWxEYXRhIiwibWFwIiwiZXhwZXJpbWVudERhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/Classes/GlobalDataSet.js\n");

/***/ }),

/***/ "./resources/js/Classes/Plot.js":
/*!**************************************!*\
  !*** ./resources/js/Classes/Plot.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Plot\": () => (/* binding */ Plot)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Plot = /*#__PURE__*/function () {\n  function Plot(plotData, eventData) {\n    _classCallCheck(this, Plot);\n\n    _defineProperty(this, \"plotData\", void 0);\n\n    _defineProperty(this, \"eventData\", void 0);\n\n    _defineProperty(this, \"lineColour\", void 0);\n\n    this.plotData = plotData !== null && plotData !== void 0 ? plotData : [];\n    this.eventData = eventData !== null && eventData !== void 0 ? eventData : [];\n    this.lineColour = '#00FF00';\n  }\n\n  _createClass(Plot, [{\n    key: \"data\",\n    get: function get() {\n      return this.plotData;\n    }\n  }, {\n    key: \"hasData\",\n    get: function get() {\n      return this.plotData.length > 0;\n    }\n  }, {\n    key: \"index\",\n    value: function index(_index) {\n      var setValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (setValue === null) {\n        return this.plotData[_index];\n      } else {\n        this.plotData[_index] = setValue;\n      }\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.plotData.length;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      return this.plotData.forEach(callback, thisArg);\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(callback, initialValue) {\n      if (initialValue === undefined) {\n        return this.plotData.reduce(callback);\n      } else {\n        return this.plotData.reduce(callback, initialValue);\n      }\n    }\n  }, {\n    key: \"map\",\n    value: function map(callback, thisArg) {\n      return this.plotData.map(callback, thisArg);\n    }\n  }, {\n    key: \"virtualYfromX\",\n    value: function virtualYfromX(x) {\n      var belowX = null,\n          aboveX = null,\n          xScale,\n          xFloor,\n          xVirtualPosition,\n          scaleProportion,\n          yScale,\n          yFloor,\n          yVirtualPosition,\n          y;\n      this.plotData.forEach(function (datapoint) {\n        if (belowX === null) {\n          belowX = datapoint;\n        } else {\n          var beforeXtest = datapoint.x > belowX.x && datapoint.x < x;\n\n          if (beforeXtest) {\n            belowX = datapoint;\n          } else if (beforeXtest || aboveX === null) {\n            aboveX = datapoint;\n          }\n        }\n      });\n\n      if (aboveX !== null && belowX !== null) {\n        xScale = aboveX.x - belowX.x;\n        xFloor = belowX.x;\n        xVirtualPosition = x - xFloor;\n        scaleProportion = xScale === 0 ? 0 : xVirtualPosition / xScale;\n        yScale = aboveX.y - belowX.y;\n        yFloor = belowX.y;\n        yVirtualPosition = yScale * scaleProportion;\n        y = yFloor + yVirtualPosition;\n\n        if (y === Infinity) {\n          debugger;\n        }\n\n        return y;\n      }\n    }\n  }, {\n    key: \"lowestValues\",\n    value: function lowestValues() {\n      var lowestValues = this.plotData.reduce(function (previous, current) {\n        return {\n          x: previous.x < current.x ? previous.x : current.x,\n          y: previous.y < current.y ? previous.y : current.y\n        };\n      });\n\n      if (lowestValues.x !== Infinity || lowestValues.y !== Infinity) {\n        return lowestValues;\n      } else {\n        debugger;\n      }\n    }\n  }, {\n    key: \"highestValues\",\n    value: function highestValues() {\n      var highestValues = this.plotData.reduce(function (previous, current) {\n        return {\n          x: previous.x > current.x ? previous.x : current.x,\n          y: previous.y > current.y ? previous.y : current.y\n        };\n      });\n\n      if (highestValues.x !== Infinity, highestValues.y !== Infinity) {\n        return highestValues;\n      } else {\n        debugger;\n      }\n    }\n  }, {\n    key: \"startXFromZero\",\n    value: function startXFromZero() {\n      var _this$plotData$0$x;\n\n      var startTime = (_this$plotData$0$x = this.plotData[0].x) !== null && _this$plotData$0$x !== void 0 ? _this$plotData$0$x : 0;\n      this.plotData = this.plotData.map(function (datapoint) {\n        return {\n          x: datapoint.x - startTime,\n          y: datapoint.y\n        };\n      });\n      return this;\n    }\n  }, {\n    key: \"trimPlotTime\",\n    value: function trimPlotTime() {\n      var preZero = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 7000;\n      var postZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n      this.plotData = this.plotData.filter(function (datapoint) {\n        return datapoint.x > -1 * preZero && datapoint.x < postZero;\n      });\n      return this;\n    }\n  }, {\n    key: \"averageTimingInterval\",\n    value: function averageTimingInterval() {\n      var intervals = [],\n          previousTime = null;\n      this.plotData.forEach(function (plot) {\n        var currentTime = plot.x;\n\n        if (previousTime !== null) {\n          intervals.push(plot.x - previousTime);\n        }\n\n        previousTime = currentTime;\n      });\n      return intervals.reduce(function (previousValue, currentValue) {\n        return previousValue + currentValue;\n      }) / intervals.length;\n    }\n  }, {\n    key: \"latestRelativeTime\",\n    value: function latestRelativeTime() {\n      var _this$plotData$0$x2;\n\n      var startTime = (_this$plotData$0$x2 = this.plotData[0].x) !== null && _this$plotData$0$x2 !== void 0 ? _this$plotData$0$x2 : 0,\n          zeroStartPlot;\n      zeroStartPlot = this.plotData.map(function (datapoint) {\n        return datapoint.x - startTime;\n      });\n      return zeroStartPlot.pop();\n    }\n  }, {\n    key: \"yMinMax\",\n    value: function yMinMax() {\n      if (this.plotData.length === 0) {\n        return false;\n      }\n\n      var minMax = helpers.twoDimensionalMinMx(this.plotData, 'x', 'y');\n      return {\n        yMin: minMax.min.y,\n        yMax: minMax.max.y\n      };\n    }\n  }, {\n    key: \"setStartingYToZero\",\n    value: function setStartingYToZero() {\n      var startY = this.plotData[0] !== undefined ? this.plotData[0].y : 0;\n      this.plotData = this.plotData.map(function (datapoint) {\n        return {\n          x: datapoint.x,\n          y: datapoint.y - startY\n        };\n      });\n      return this;\n    }\n  }, {\n    key: \"colour\",\n    value: function colour() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (value === null) {\n        return this.lineColour;\n      } else {\n        this.lineColour = value;\n      }\n    }\n  }]);\n\n  return Plot;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Classes/Plot.js\n");

/***/ }),

/***/ "./resources/js/Classes/PlotSet.js":
/*!*****************************************!*\
  !*** ./resources/js/Classes/PlotSet.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PlotSet\": () => (/* binding */ PlotSet)\n/* harmony export */ });\n/* harmony import */ var _Plot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Plot */ \"./resources/js/Classes/Plot.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar PlotSet = /*#__PURE__*/function () {\n  function PlotSet(plotsArray) {\n    _classCallCheck(this, PlotSet);\n\n    _defineProperty(this, \"plotData\", void 0);\n\n    _defineProperty(this, \"preZeroTime\", 7000);\n\n    _defineProperty(this, \"postZeroTime\", 10000);\n\n    if (!plotsArray.every(function (plot) {\n      return plot instanceof _Plot__WEBPACK_IMPORTED_MODULE_0__.Plot;\n    })) {\n      throw new Error('PlotSet constructor array must only consist of Plot objects.');\n    }\n\n    this.plotData = plotsArray;\n  }\n\n  _createClass(PlotSet, [{\n    key: \"data\",\n    get: function get() {\n      return this.plotData;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      return this.data.forEach(callback, thisArg);\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(callback, initialValue) {\n      if (initialValue === undefined) {\n        return this.data.reduce(callback);\n      } else {\n        return this.data.reduce(callback, initialValue);\n      }\n    }\n  }, {\n    key: \"map\",\n    value: function map(callback, thisArg) {\n      return this.data.map(callback, thisArg);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(callback) {\n      this.plotData = this.data = this.data.filter(callback);\n      return this;\n    }\n  }, {\n    key: \"startXFromZero\",\n    value: function startXFromZero() {\n      this.plotData = this.data.map(function (plot) {\n        return plot.startXFromZero();\n      });\n      return this;\n    }\n  }, {\n    key: \"averageTimingInterval\",\n    value: function averageTimingInterval() {\n      // ToDo: Consider allowing different timing on different experiments via common denominators.\n      var timingValues = this.data.map(function (plot) {\n        return plot.averageTimingInterval();\n      });\n      return timingValues.reduce(function (previousValue, currentValue) {\n        return previousValue + currentValue;\n      }) / timingValues.length;\n    }\n  }, {\n    key: \"latestRelativeTime\",\n    value: function latestRelativeTime() {\n      var latestRelativeTimes = this.data.map(function (plot) {\n        return plot.latestRelativeTime();\n      });\n      return latestRelativeTimes.reduce(function (previous, current) {\n        return previous > current ? previous : current;\n      });\n    }\n  }, {\n    key: \"averagePlot\",\n    value: function averagePlot() {\n      var _this = this;\n\n      var interval = 40,\n          indexShift = 10000;\n      var bucketsPlot = [],\n          averagePlot;\n      this.data.forEach(function (plot) {\n        var lowestX = _this.preZeroTime * -1,\n            highestX = _this.postZeroTime;\n\n        for (var t = lowestX; t <= highestX; t = t + interval) {\n          var i = t + indexShift;\n\n          if (bucketsPlot[i] === undefined) {\n            bucketsPlot[i] = [];\n          }\n\n          var virtualPlot = plot.virtualYfromX(t);\n\n          if (isNaN(virtualPlot)) {\n            debugger;\n          } else {\n            bucketsPlot[i].push(virtualPlot);\n          }\n        }\n      });\n      averagePlot = bucketsPlot.map(function (bucket, index) {\n        var bucketSum = bucket.reduce(function (p, c) {\n          return p + c;\n        });\n        return {\n          x: index - indexShift,\n          y: bucketSum / bucket.length\n        };\n      });\n      return new _Plot__WEBPACK_IMPORTED_MODULE_0__.Plot(averagePlot);\n    }\n  }, {\n    key: \"yMinMax\",\n    value: function yMinMax() {\n      var plotMinMaxes = this.data.map(function (plot) {\n        return plot.yMinMax();\n      });\n      return PlotSet.yMinMax(plotMinMaxes);\n    }\n  }, {\n    key: \"setStartingYToZero\",\n    value: function setStartingYToZero() {\n      this.plotData = this.data.map(function (plot) {\n        return plot.setStartingYToZero();\n      });\n      return this;\n    }\n  }, {\n    key: \"trimPlotTime\",\n    value: function trimPlotTime() {\n      this.plotData = this.data.map(function (plot) {\n        return plot.trimPlotTime();\n      });\n      return this;\n    }\n  }], [{\n    key: \"yMinMax\",\n    value: function yMinMax(plotMinMaxes) {\n      // ToDo: There were issues using rest parameters here e.g. yMinMax(...plotMinMaxes), could do with investigation.\n      var min = null,\n          max = null;\n      plotMinMaxes.forEach(function (yMinMaxes) {\n        if (yMinMaxes && yMinMaxes.yMin < min || min === null) {\n          min = yMinMaxes.yMin;\n        }\n\n        if (yMinMaxes && yMinMaxes.yMax > max || max === null) {\n          max = yMinMaxes.yMax;\n        }\n      });\n      return {\n        yMin: min,\n        yMax: max\n      };\n    }\n  }]);\n\n  return PlotSet;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Classes/PlotSet.js\n");

/***/ }),

/***/ "./resources/js/Classes/Trial.js":
/*!***************************************!*\
  !*** ./resources/js/Classes/Trial.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Trial\": () => (/* binding */ Trial)\n/* harmony export */ });\n/* harmony import */ var _Plot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Plot */ \"./resources/js/Classes/Plot.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar Trial = /*#__PURE__*/function () {\n  function Trial(trialData) {\n    var experimentReference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, Trial);\n\n    this.jsTimeField = 0;\n    this.mcTimeField = 1;\n    this.microvoltField = 2;\n    this.partContainingField = 1;\n    this.trialContainingField = 1;\n    this.image = trialData.image;\n    this.id = trialData.id;\n    this.control_number = trialData.control_number;\n    this.created_at = trialData.control_number;\n    this.updated_at = trialData.control_number;\n    this.image = trialData.image;\n    this.number = null;\n    this.active = true;\n    this.gsrData = [];\n    this.eventData = [];\n    this.parentExperiment = experimentReference;\n    this.ingestEventData(trialData);\n    this.addExperimentalTime();\n\n    if (trialData.gsr_data !== undefined) {\n      this.updateData(trialData);\n    }\n  }\n\n  _createClass(Trial, [{\n    key: \"updateData\",\n    value: function updateData(trialData) {\n      this.ingestGsrData(trialData);\n      this.addExperimentalTime();\n      this.removeDuplicatedGsrDatapoints();\n      return this;\n    }\n  }, {\n    key: \"ingestGsrData\",\n    value: function ingestGsrData(trialData) {\n      var _this = this;\n\n      this.gsrData = trialData.gsr_data.split(\"\\n\").map(function (lineData) {\n        var lineDataItems = lineData.split(\",\").map(_this.numericParsing);\n        return {\n          mcTime: parseInt(lineDataItems[_this.mcTimeField], 10),\n          jsTime: parseInt(lineDataItems[_this.jsTimeField], 10),\n          microVolts: parseInt(lineDataItems[_this.microvoltField], 10)\n        };\n      });\n    }\n  }, {\n    key: \"ingestEventData\",\n    value: function ingestEventData(trialData) {\n      var _this2 = this;\n\n      var eventProcessing = trialData.event_data.split(\"\\n\").map(function (lineData) {\n        var lineDataItems = lineData.split(\",\").map(_this2.numericParsing),\n            part = lineDataItems[_this2.partContainingField].match(/P([\\d|E])+/),\n            trial = lineDataItems[_this2.trialContainingField].match(/T(\\d)+/),\n            time = lineDataItems[_this2.jsTimeField];\n\n        if (_this2.number === null) {\n          _this2.number = parseInt(trial[1], 10);\n        }\n\n        if (part !== null && trial !== null && time !== null) {\n          return {\n            part: isNaN(part[1]) ? part[1] : parseInt(part[1], 10),\n            jsTime: time\n          };\n        } else {\n          return null;\n        }\n      });\n      this.eventData = eventProcessing.filter(function (event) {\n        return event !== null;\n      });\n    }\n  }, {\n    key: \"addExperimentalTime\",\n    value: function addExperimentalTime() {\n      var _this3 = this;\n\n      this.gsrData = this.gsrData.map(function (datapoint) {\n        var timeZeroEvent = _this3.eventData.filter(function (event) {\n          return event.part == 3;\n        })[0],\n            timeZero = timeZeroEvent.jsTime;\n\n        return _objectSpread(_objectSpread({}, datapoint), {}, {\n          experimentalTime: datapoint.jsTime - timeZero\n        });\n      });\n      this.eventData = this.eventData.map(function (datapoint) {\n        var timeZeroEvent = _this3.eventData.filter(function (event) {\n          return event.part == 3;\n        })[0],\n            timeZero = timeZeroEvent.jsTime;\n\n        return _objectSpread(_objectSpread({}, datapoint), {}, {\n          experimentalTime: datapoint.jsTime - timeZero\n        });\n      });\n      return this;\n    }\n  }, {\n    key: \"removeDuplicatedGsrDatapoints\",\n    value: function removeDuplicatedGsrDatapoints() {\n      var uKeys = [];\n      this.gsrData = this.gsrData.filter(function (datapoint) {\n        var uKey = \"x_\".concat(datapoint.experimentalTime, \" y_\").concat(datapoint.microVolts),\n            uKeyNew = !uKeys.includes(uKey);\n\n        if (uKeyNew) {\n          uKeys.push(uKey);\n        }\n\n        return uKeyNew;\n      });\n      return this;\n    }\n  }, {\n    key: \"numericParsing\",\n    value: function numericParsing(lineElement) {\n      var integerVersion = parseInt(lineElement, 10),\n          floatVersion = parseInt(lineElement, 10),\n          number = integerVersion === floatVersion ? integerVersion : floatVersion;\n      return isNaN(lineElement) ? lineElement : number;\n    }\n  }, {\n    key: \"minMaxData\",\n    value: function minMaxData() {\n      return helpers.twoDimensionalMinMx(this.gsrData, 'experimentalTime', 'microVolts');\n    }\n  }, {\n    key: \"virtualMicroVoltsAtExperimentalTime\",\n    value: function virtualMicroVoltsAtExperimentalTime(experimentalTime) {\n      var hitActual = this.gsrData.filter(function (datapoint) {\n        return datapoint.experimentalTime === experimentalTime;\n      });\n\n      if (hitActual.length === 1) {\n        return hitActual[0].microVolts;\n      } else if (hitActual.length > 1) {\n        throw new Error('Duplicate data detected.');\n      }\n\n      var previousNeighbour = this.previousDatapoint(experimentalTime),\n          nextNeighbour = this.nextDatapoint(experimentalTime);\n      return helpers.getVirtualYFromX({\n        x1: previousNeighbour.experimentalTime,\n        y1: previousNeighbour.microVolts,\n        x2: nextNeighbour.experimentalTime,\n        y2: nextNeighbour.microVolts,\n        xV: experimentalTime\n      });\n    }\n  }, {\n    key: \"previousDatapoint\",\n    value: function previousDatapoint(experimentalTime) {\n      var closestMatch = null;\n      this.gsrData.forEach(function (datapoint) {\n        var datapointBeforeTime = datapoint.experimentalTime < experimentalTime;\n\n        if (datapointBeforeTime && (closestMatch === null || datapoint.experimentalTime > closestMatch.experimentalTime)) {\n          closestMatch = datapoint;\n        }\n      });\n      return closestMatch;\n    }\n  }, {\n    key: \"nextDatapoint\",\n    value: function nextDatapoint(experimentalTime) {\n      var closestMatch = null;\n      this.gsrData.forEach(function (datapoint) {\n        var datapointAfterTime = datapoint.experimentalTime > experimentalTime;\n\n        if (datapointAfterTime && (closestMatch === null || datapoint.experimentalTime < closestMatch.experimentalTime)) {\n          closestMatch = datapoint;\n        }\n      });\n      return closestMatch;\n    }\n  }, {\n    key: \"plot\",\n    value: function plot() {\n      return new _Plot__WEBPACK_IMPORTED_MODULE_0__.Plot(this.gsrData.map(Trial.trialDataToPlotData), this.eventData);\n    }\n  }], [{\n    key: \"trialDataToPlotData\",\n    value: function trialDataToPlotData(datapoint) {\n      return {\n        x: datapoint.experimentalTime,\n        y: datapoint.microVolts / 1000\n      };\n    }\n  }]);\n\n  return Trial;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/Classes/Trial.js\n");

/***/ }),

/***/ "./resources/js/Classes/TrialSet.js":
/*!******************************************!*\
  !*** ./resources/js/Classes/TrialSet.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TrialSet\": () => (/* binding */ TrialSet)\n/* harmony export */ });\n/* harmony import */ var _PlotSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlotSet */ \"./resources/js/Classes/PlotSet.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar TrialSet = /*#__PURE__*/function () {\n  function TrialSet() {\n    var trialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, TrialSet);\n\n    this.trialData = trialData;\n    this.averageData = {\n      peaceful: [],\n      emotional: []\n    };\n  }\n\n  _createClass(TrialSet, [{\n    key: \"reduceToActiveTrials\",\n    value: function reduceToActiveTrials() {\n      return new TrialSet(this.trialData.filter(function (trial) {\n        return trial.active === true;\n      }));\n    }\n  }, {\n    key: \"trial\",\n    value: function trial(id) {\n      return this.trialData.filter(function (trial) {\n        return trial.id === id;\n      })[0];\n    }\n  }, {\n    key: \"trials\",\n    value: function trials() {\n      var idArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (idArray === null) {\n        return this.trialData;\n      } else {\n        return new TrialSet(this.trialData.filter(function (trial) {\n          return idArray.includes(trial.id);\n        }));\n      }\n    }\n  }, {\n    key: \"reduceToPeaceful\",\n    value: function reduceToPeaceful() {\n      return new TrialSet(this.trialData.filter(function (trial) {\n        return trial.image.type.name === 'Peaceful';\n      }));\n    }\n  }, {\n    key: \"reduceToEmotional\",\n    value: function reduceToEmotional() {\n      return new TrialSet(this.trialData.filter(function (trial) {\n        return trial.image.type.name === 'Emotional';\n      }));\n    }\n  }, {\n    key: \"plotSet\",\n    value: function plotSet() {\n      var plotSetData = [];\n      this.trialData.forEach(function (trial) {\n        plotSetData.push(trial.plot());\n      });\n      return new _PlotSet__WEBPACK_IMPORTED_MODULE_0__.PlotSet(plotSetData);\n    }\n  }, {\n    key: \"calculateAverageData\",\n    value: function calculateAverageData(minMax, millisecondsInterval) {\n      var _this = this;\n\n      if (this.trialData.length === 0) {\n        return;\n      }\n\n      var min = helpers.roundUpToInterval(minMax.highestMin, millisecondsInterval),\n          max = helpers.roundDownToInterval(minMax.lowestMax, millisecondsInterval);\n      var averageData = [];\n\n      var _loop = function _loop(t) {\n        var valuesAtTime = _this.trialData.map(function (trial) {\n          return trial.virtualMicroVoltsAtExperimentalTime(t);\n        }),\n            averageMicroVoltsAtTime = valuesAtTime.reduce(function (a, b) {\n          return a + b;\n        }) / valuesAtTime.length;\n\n        averageData.push({\n          experimentalTime: t,\n          microVolts: averageMicroVoltsAtTime\n        });\n      };\n\n      for (var t = min; t <= max; t = t + millisecondsInterval) {\n        _loop(t);\n      }\n\n      return averageData;\n    }\n  }]);\n\n  return TrialSet;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxpQ0FVdEMwQixDQVZzQztBQVczQyxZQUFNQyxZQUFZLEdBQUcsS0FBSSxDQUFDNUIsU0FBTCxDQUFlNkIsR0FBZixDQUFtQixVQUFDeEIsS0FBRDtBQUFBLGlCQUFXQSxLQUFLLENBQUN5QixtQ0FBTixDQUEwQ0gsQ0FBMUMsQ0FBWDtBQUFBLFNBQW5CLENBQXJCO0FBQUEsWUFDSUksdUJBQXVCLEdBQUdILFlBQVksQ0FBQ0ksTUFBYixDQUFvQixVQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxpQkFBV0QsQ0FBQyxHQUFHQyxDQUFmO0FBQUEsU0FBcEIsSUFBeUNOLFlBQVksQ0FBQ1QsTUFEcEY7O0FBR0FsQixRQUFBQSxXQUFXLENBQUNjLElBQVosQ0FBaUI7QUFDYm9CLFVBQUFBLGdCQUFnQixFQUFFUixDQURMO0FBRWJTLFVBQUFBLFVBQVUsRUFBRUw7QUFGQyxTQUFqQjtBQWQyQzs7QUFVL0MsV0FBSyxJQUFJSixDQUFDLEdBQUdQLEdBQWIsRUFBa0JPLENBQUMsSUFBSUgsR0FBdkIsRUFBNEJHLENBQUMsR0FBR0EsQ0FBQyxHQUFHVCxvQkFBcEMsRUFBMEQ7QUFBQSxjQUFqRFMsQ0FBaUQ7QUFRekQ7O0FBRUQsYUFBTzFCLFdBQVA7QUFDSDtBQS9FTDs7QUFBQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL0NsYXNzZXMvVHJpYWxTZXQuanM/YzZlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Bsb3RTZXR9IGZyb20gXCIuL1Bsb3RTZXRcIjtcblxuZXhwb3J0IGNsYXNzIFRyaWFsU2V0IHtcbiAgICBjb25zdHJ1Y3Rvcih0cmlhbERhdGEgPSBbXSkge1xuICAgICAgICB0aGlzLnRyaWFsRGF0YSA9IHRyaWFsRGF0YTtcbiAgICAgICAgdGhpcy5hdmVyYWdlRGF0YSA9IHsgcGVhY2VmdWw6IFtdLCBlbW90aW9uYWw6IFtdIH07XG4gICAgfVxuXG4gICAgcmVkdWNlVG9BY3RpdmVUcmlhbHMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJpYWxTZXQoXG4gICAgICAgICAgICB0aGlzLnRyaWFsRGF0YS5maWx0ZXIoKHRyaWFsKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyaWFsLmFjdGl2ZSA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdHJpYWwoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpYWxEYXRhLmZpbHRlcigodHJpYWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0cmlhbC5pZCA9PT0gaWQ7XG4gICAgICAgIH0pWzBdO1xuICAgIH1cblxuICAgIHRyaWFscyhpZEFycmF5ID0gbnVsbCkge1xuICAgICAgICBpZiAoaWRBcnJheSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJpYWxEYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmlhbFNldChcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWFsRGF0YS5maWx0ZXIoKHRyaWFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZEFycmF5LmluY2x1ZGVzKHRyaWFsLmlkKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVkdWNlVG9QZWFjZWZ1bCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmlhbFNldChcbiAgICAgICAgICAgIHRoaXMudHJpYWxEYXRhLmZpbHRlcigodHJpYWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJpYWwuaW1hZ2UudHlwZS5uYW1lID09PSAnUGVhY2VmdWwnO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZWR1Y2VUb0Vtb3Rpb25hbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmlhbFNldChcbiAgICAgICAgICAgIHRoaXMudHJpYWxEYXRhLmZpbHRlcigodHJpYWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJpYWwuaW1hZ2UudHlwZS5uYW1lID09PSAnRW1vdGlvbmFsJztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcGxvdFNldCgpIHtcbiAgICAgICAgY29uc3QgcGxvdFNldERhdGEgPSBbXTtcblxuICAgICAgICB0aGlzLnRyaWFsRGF0YS5mb3JFYWNoKCh0cmlhbCkgPT4ge1xuICAgICAgICAgICAgcGxvdFNldERhdGEucHVzaCh0cmlhbC5wbG90KCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IFBsb3RTZXQocGxvdFNldERhdGEpO1xuICAgIH1cblxuICAgIGNhbGN1bGF0ZUF2ZXJhZ2VEYXRhKG1pbk1heCwgbWlsbGlzZWNvbmRzSW50ZXJ2YWwpIHtcbiAgICAgICAgaWYgKHRoaXMudHJpYWxEYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWluID0gaGVscGVycy5yb3VuZFVwVG9JbnRlcnZhbChtaW5NYXguaGlnaGVzdE1pbiwgbWlsbGlzZWNvbmRzSW50ZXJ2YWwpLFxuICAgICAgICAgICAgbWF4ID0gaGVscGVycy5yb3VuZERvd25Ub0ludGVydmFsKG1pbk1heC5sb3dlc3RNYXgsIG1pbGxpc2Vjb25kc0ludGVydmFsKTtcblxuICAgICAgICBjb25zdCBhdmVyYWdlRGF0YSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IHQgPSBtaW47IHQgPD0gbWF4OyB0ID0gdCArIG1pbGxpc2Vjb25kc0ludGVydmFsKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXNBdFRpbWUgPSB0aGlzLnRyaWFsRGF0YS5tYXAoKHRyaWFsKSA9PiB0cmlhbC52aXJ0dWFsTWljcm9Wb2x0c0F0RXhwZXJpbWVudGFsVGltZSh0KSksXG4gICAgICAgICAgICAgICAgYXZlcmFnZU1pY3JvVm9sdHNBdFRpbWUgPSB2YWx1ZXNBdFRpbWUucmVkdWNlKChhLCBiKSA9PiAoYSArIGIpKSAvIHZhbHVlc0F0VGltZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGF2ZXJhZ2VEYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRhbFRpbWU6IHQsXG4gICAgICAgICAgICAgICAgbWljcm9Wb2x0czogYXZlcmFnZU1pY3JvVm9sdHNBdFRpbWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhdmVyYWdlRGF0YTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUGxvdFNldCIsIlRyaWFsU2V0IiwidHJpYWxEYXRhIiwiYXZlcmFnZURhdGEiLCJwZWFjZWZ1bCIsImVtb3Rpb25hbCIsImZpbHRlciIsInRyaWFsIiwiYWN0aXZlIiwiaWQiLCJpZEFycmF5IiwiaW5jbHVkZXMiLCJpbWFnZSIsInR5cGUiLCJuYW1lIiwicGxvdFNldERhdGEiLCJmb3JFYWNoIiwicHVzaCIsInBsb3QiLCJtaW5NYXgiLCJtaWxsaXNlY29uZHNJbnRlcnZhbCIsImxlbmd0aCIsIm1pbiIsImhlbHBlcnMiLCJyb3VuZFVwVG9JbnRlcnZhbCIsImhpZ2hlc3RNaW4iLCJtYXgiLCJyb3VuZERvd25Ub0ludGVydmFsIiwibG93ZXN0TWF4IiwidCIsInZhbHVlc0F0VGltZSIsIm1hcCIsInZpcnR1YWxNaWNyb1ZvbHRzQXRFeHBlcmltZW50YWxUaW1lIiwiYXZlcmFnZU1pY3JvVm9sdHNBdFRpbWUiLCJyZWR1Y2UiLCJhIiwiYiIsImV4cGVyaW1lbnRhbFRpbWUiLCJtaWNyb1ZvbHRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/Classes/TrialSet.js\n");

/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"./resources/js/helpers.js\");\n/* harmony import */ var _$full_screen_alerts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./$full-screen-alerts */ \"./resources/js/$full-screen-alerts.js\");\n/* harmony import */ var _$experiment1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./$experiment1 */ \"./resources/js/$experiment1.js\");\n/* harmony import */ var _data_analysis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data-analysis */ \"./resources/js/data-analysis.js\");\n/* harmony import */ var _serial_data_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./serial-data-service */ \"./resources/js/serial-data-service.js\");\n/* harmony import */ var _Classes_GlobalDataSet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Classes/GlobalDataSet */ \"./resources/js/Classes/GlobalDataSet.js\");\n/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./graph */ \"./resources/js/graph.js\");\n/* harmony import */ var _graph_live__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./graph-live */ \"./resources/js/graph-live.js\");\n/* harmony import */ var _setup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./setup */ \"./resources/js/setup.js\");\n// $variable (as opposed to variable) designates jQuery based module.\n\n\n\n\n\n\n\n\n\n_helpers__WEBPACK_IMPORTED_MODULE_0__.helpers.initiate();\nwindow.GlobalDataSet = _Classes_GlobalDataSet__WEBPACK_IMPORTED_MODULE_5__.GlobalDataSet;\nwindow.helpers = _helpers__WEBPACK_IMPORTED_MODULE_0__.helpers;\nwindow.graph = _graph__WEBPACK_IMPORTED_MODULE_6__.graph;\ndocument.addEventListener('DOMContentLoaded', function () {\n  _$full_screen_alerts__WEBPACK_IMPORTED_MODULE_1__.fullScreenAlerts.initiate();\n\n  if (document.querySelector('#connect-to-gsr')) {\n    _serial_data_service__WEBPACK_IMPORTED_MODULE_4__.serialDataService.initiate('#connect-to-gsr');\n  }\n\n  if (document.querySelectorAll('canvas.open-gsr').length) {\n    _graph_live__WEBPACK_IMPORTED_MODULE_7__.graphLive.initiate('canvas.open-gsr');\n    window.graphLive = _graph_live__WEBPACK_IMPORTED_MODULE_7__.graphLive;\n  }\n\n  if (document.body.classList.contains('experiment')) {\n    _$experiment1__WEBPACK_IMPORTED_MODULE_2__.experiment1.initiate();\n  }\n\n  if (document.body.classList.contains('data-analysis')) {\n    _data_analysis__WEBPACK_IMPORTED_MODULE_3__.dataAnalysis.initiate();\n    window.dataAnalysis = _data_analysis__WEBPACK_IMPORTED_MODULE_3__.dataAnalysis;\n  }\n\n  if (document.body.classList.contains('setup')) {\n    _setup__WEBPACK_IMPORTED_MODULE_8__.setup.initiate();\n  }\n\n  window.experiment1 = _$experiment1__WEBPACK_IMPORTED_MODULE_2__.experiment1;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSxzREFBQTtBQUNBVSxNQUFNLENBQUNMLGFBQVAsR0FBdUJBLGlFQUF2QjtBQUNBSyxNQUFNLENBQUNWLE9BQVAsR0FBaUJBLDZDQUFqQjtBQUNBVSxNQUFNLENBQUNKLEtBQVAsR0FBZUEseUNBQWY7QUFFQUssUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBTTtBQUNoRFgsRUFBQUEsMkVBQUE7O0FBRUEsTUFBSVUsUUFBUSxDQUFDRSxhQUFULENBQXVCLGlCQUF2QixDQUFKLEVBQStDO0FBQzNDVCxJQUFBQSw0RUFBQSxDQUEyQixpQkFBM0I7QUFDSDs7QUFFRCxNQUFJTyxRQUFRLENBQUNHLGdCQUFULENBQTBCLGlCQUExQixFQUE2Q0MsTUFBakQsRUFBeUQ7QUFDckRSLElBQUFBLDJEQUFBLENBQW1CLGlCQUFuQjtBQUNBRyxJQUFBQSxNQUFNLENBQUNILFNBQVAsR0FBbUJBLGtEQUFuQjtBQUNIOztBQUVELE1BQUlJLFFBQVEsQ0FBQ0ssSUFBVCxDQUFjQyxTQUFkLENBQXdCQyxRQUF4QixDQUFpQyxZQUFqQyxDQUFKLEVBQW9EO0FBQ2hEaEIsSUFBQUEsK0RBQUE7QUFDSDs7QUFFRCxNQUFJUyxRQUFRLENBQUNLLElBQVQsQ0FBY0MsU0FBZCxDQUF3QkMsUUFBeEIsQ0FBaUMsZUFBakMsQ0FBSixFQUF1RDtBQUNuRGYsSUFBQUEsaUVBQUE7QUFFQU8sSUFBQUEsTUFBTSxDQUFDUCxZQUFQLEdBQXNCQSx3REFBdEI7QUFDSDs7QUFFRCxNQUFJUSxRQUFRLENBQUNLLElBQVQsQ0FBY0MsU0FBZCxDQUF3QkMsUUFBeEIsQ0FBaUMsT0FBakMsQ0FBSixFQUErQztBQUMzQ1YsSUFBQUEsa0RBQUE7QUFDSDs7QUFFREUsRUFBQUEsTUFBTSxDQUFDUixXQUFQLEdBQXFCQSxzREFBckI7QUFDSCxDQTNCRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAuanM/NmQ0MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAkdmFyaWFibGUgKGFzIG9wcG9zZWQgdG8gdmFyaWFibGUpIGRlc2lnbmF0ZXMgalF1ZXJ5IGJhc2VkIG1vZHVsZS5cblxuaW1wb3J0IHtoZWxwZXJzfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHtmdWxsU2NyZWVuQWxlcnRzfSBmcm9tICcuLyRmdWxsLXNjcmVlbi1hbGVydHMnO1xuaW1wb3J0IHtleHBlcmltZW50MX0gZnJvbSAnLi8kZXhwZXJpbWVudDEnO1xuaW1wb3J0IHtkYXRhQW5hbHlzaXN9IGZyb20gJy4vZGF0YS1hbmFseXNpcyc7XG5pbXBvcnQge3NlcmlhbERhdGFTZXJ2aWNlfSBmcm9tICcuL3NlcmlhbC1kYXRhLXNlcnZpY2UnO1xuaW1wb3J0IHtHbG9iYWxEYXRhU2V0fSBmcm9tICcuL0NsYXNzZXMvR2xvYmFsRGF0YVNldCc7XG5pbXBvcnQge2dyYXBofSBmcm9tICcuL2dyYXBoJztcbmltcG9ydCB7Z3JhcGhMaXZlfSBmcm9tICcuL2dyYXBoLWxpdmUnO1xuaW1wb3J0IHtzZXR1cH0gZnJvbSAnLi9zZXR1cCc7XG5cbmhlbHBlcnMuaW5pdGlhdGUoKTtcbndpbmRvdy5HbG9iYWxEYXRhU2V0ID0gR2xvYmFsRGF0YVNldDtcbndpbmRvdy5oZWxwZXJzID0gaGVscGVycztcbndpbmRvdy5ncmFwaCA9IGdyYXBoO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIGZ1bGxTY3JlZW5BbGVydHMuaW5pdGlhdGUoKTtcblxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29ubmVjdC10by1nc3InKSkge1xuICAgICAgICBzZXJpYWxEYXRhU2VydmljZS5pbml0aWF0ZSgnI2Nvbm5lY3QtdG8tZ3NyJyk7XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2NhbnZhcy5vcGVuLWdzcicpLmxlbmd0aCkge1xuICAgICAgICBncmFwaExpdmUuaW5pdGlhdGUoJ2NhbnZhcy5vcGVuLWdzcicpO1xuICAgICAgICB3aW5kb3cuZ3JhcGhMaXZlID0gZ3JhcGhMaXZlO1xuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucygnZXhwZXJpbWVudCcpKSB7XG4gICAgICAgIGV4cGVyaW1lbnQxLmluaXRpYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdkYXRhLWFuYWx5c2lzJykpIHtcbiAgICAgICAgZGF0YUFuYWx5c2lzLmluaXRpYXRlKCk7XG5cbiAgICAgICAgd2luZG93LmRhdGFBbmFseXNpcyA9IGRhdGFBbmFseXNpcztcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ3NldHVwJykpIHtcbiAgICAgICAgc2V0dXAuaW5pdGlhdGUoKTtcbiAgICB9XG5cbiAgICB3aW5kb3cuZXhwZXJpbWVudDEgPSBleHBlcmltZW50MTtcbn0pO1xuIl0sIm5hbWVzIjpbImhlbHBlcnMiLCJmdWxsU2NyZWVuQWxlcnRzIiwiZXhwZXJpbWVudDEiLCJkYXRhQW5hbHlzaXMiLCJzZXJpYWxEYXRhU2VydmljZSIsIkdsb2JhbERhdGFTZXQiLCJncmFwaCIsImdyYXBoTGl2ZSIsInNldHVwIiwiaW5pdGlhdGUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImJvZHkiLCJjbGFzc0xpc3QiLCJjb250YWlucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/data-analysis.js":
/*!***************************************!*\
  !*** ./resources/js/data-analysis.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"dataAnalysis\": () => (/* binding */ dataAnalysis)\n/* harmony export */ });\n/* harmony import */ var _Classes_GlobalDataSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Classes/GlobalDataSet */ \"./resources/js/Classes/GlobalDataSet.js\");\n/* harmony import */ var _Classes_PlotSet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Classes/PlotSet */ \"./resources/js/Classes/PlotSet.js\");\n\n\nvar experimentListItemIdAttribute = 'data-experiment-id',\n    experimentListItemSelector = \"[\".concat(experimentListItemIdAttribute, \"]\"),\n    showTrialsButtonSelector = '[data-load-experiment] button.show-trials',\n    clearTrialsButtonSelector = '[data-load-experiment] button.remove-trials',\n    loadAveragesButtonSelector = '[data-load-experiment] button.show-averages',\n    clearAveragesButtonSelector = '[data-load-experiment] button.remove-averages';\nvar internalState = {\n  globalDataSet: null\n};\n\nfunction initiate() {\n  loadData();\n  graph.initiate('#results-plotter');\n  listeners();\n  drawEmtpyGraph();\n}\n\nfunction loadData() {\n  var form = document.querySelector('form[name=\"ajax-list\"]');\n  helpers.ajaxForm(form, glboalDataSetSkeletonLoaded, dataLoadFailed);\n}\n\nfunction listeners() {\n  helpers.addAtemporalEventListener('click', showTrials).querySelector(showTrialsButtonSelector);\n  helpers.addAtemporalEventListener('click', clearTrials).querySelector(clearTrialsButtonSelector);\n  helpers.addAtemporalEventListener('click', showAverages).querySelector(loadAveragesButtonSelector);\n  helpers.addAtemporalEventListener('click', clearAverages).querySelector(clearAveragesButtonSelector);\n  document.querySelector('.experiment-listing').addEventListener('mouseenter', function () {\n    document.body.classList.add('scroll-lock');\n  });\n  document.querySelector('.experiment-listing').addEventListener('mouseleave', function () {\n    document.body.classList.remove('scroll-lock');\n  });\n  document.body.addEventListener('scroll', scrollHandler);\n}\n\nfunction drawEmtpyGraph() {\n  var yMinMax = {\n    yMin: -100,\n    yMax: 100\n  };\n  graph.clearCanvas();\n  graph.drawAxis(yMinMax);\n  graph.drawLabels(yMinMax);\n  graph.drawGrid(yMinMax);\n}\n\nfunction getExperimentFromEvent(event) {\n  var listItem = event.target.closest(experimentListItemSelector),\n      showTrialsButton = listItem.querySelector(showTrialsButtonSelector),\n      clearTrialsButton = listItem.querySelector(clearTrialsButtonSelector),\n      showAveragesButton = listItem.querySelector(loadAveragesButtonSelector),\n      clearAveragesButton = listItem.querySelector(clearAveragesButtonSelector),\n      id = parseInt(listItem.getAttribute(experimentListItemIdAttribute), 10),\n      experiment = internalState.globalDataSet.experiment(id);\n  return {\n    showTrialsButton: showTrialsButton,\n    clearTrialsButton: clearTrialsButton,\n    showAveragesButton: showAveragesButton,\n    clearAveragesButton: clearAveragesButton,\n    id: id,\n    experiment: experiment\n  };\n}\n\nfunction buttonTogglesShowing(showButton, clearButton) {\n  showButton.classList.remove('loading');\n  showButton.classList.add('hidden');\n  showButton.removeAttribute('disabled');\n  clearButton.classList.remove('hidden');\n}\n\nfunction showTrials(event) {\n  // ToDo: Handle request when globalDataSet is not loaded.\n  var _getExperimentFromEve = getExperimentFromEvent(event),\n      showTrialsButton = _getExperimentFromEve.showTrialsButton,\n      clearTrialsButton = _getExperimentFromEve.clearTrialsButton,\n      experiment = _getExperimentFromEve.experiment;\n\n  if (showTrialsButton.hasAttribute('disabled')) {\n    return;\n  }\n\n  showTrialsButton.classList.add('loading');\n  showTrialsButton.setAttribute('disabled', null);\n\n  experiment.onload = function (data) {\n    buttonTogglesShowing(showTrialsButton, clearTrialsButton);\n    experiment.activateTrials();\n    experimentLoaded(data);\n  };\n\n  experiment.load();\n}\n\nfunction clearTrials(event) {\n  var _getExperimentFromEve2 = getExperimentFromEvent(event),\n      showTrialsButton = _getExperimentFromEve2.showTrialsButton,\n      clearTrialsButton = _getExperimentFromEve2.clearTrialsButton,\n      experiment = _getExperimentFromEve2.experiment;\n\n  experiment.deactivateTrials();\n  showTrialsButton.classList.remove('hidden');\n  clearTrialsButton.classList.add('hidden');\n  drawGraphs();\n}\n\nfunction showAverages() {\n  // ToDo: Handle request when globalDataSet is not loaded.\n  var _getExperimentFromEve3 = getExperimentFromEvent(event),\n      showAveragesButton = _getExperimentFromEve3.showAveragesButton,\n      clearAveragesButton = _getExperimentFromEve3.clearAveragesButton,\n      experiment = _getExperimentFromEve3.experiment;\n\n  if (showAveragesButton.hasAttribute('disabled')) {\n    return;\n  }\n\n  showAveragesButton.classList.add('loading');\n  showAveragesButton.setAttribute('disabled', null);\n\n  experiment.onload = function (data) {\n    buttonTogglesShowing(showAveragesButton, clearAveragesButton);\n    experiment.activateAverage();\n    experimentLoaded(data);\n  };\n\n  experiment.load();\n}\n\nfunction clearAverages() {\n  var _getExperimentFromEve4 = getExperimentFromEvent(event),\n      showAveragesButton = _getExperimentFromEve4.showAveragesButton,\n      clearAveragesButton = _getExperimentFromEve4.clearAveragesButton,\n      experiment = _getExperimentFromEve4.experiment;\n\n  experiment.deactivateAverage();\n  showAveragesButton.classList.remove('hidden');\n  clearAveragesButton.classList.add('hidden');\n  drawGraphs();\n}\n\nfunction glboalDataSetSkeletonLoaded(data) {\n  internalState.globalDataSet = new _Classes_GlobalDataSet__WEBPACK_IMPORTED_MODULE_0__.GlobalDataSet(data);\n  populateList();\n}\n\nfunction experimentLoaded() {\n  drawGraphs();\n}\n\nfunction populateList() {\n  var experimentList = document.querySelector('ul.experiments'),\n      experimentListItemTemplate = document.querySelector('ul.experiments li.template-item');\n  internalState.globalDataSet.experiments().forEach(function (experiment) {\n    var newListItem = experimentListItemTemplate.cloneNode(true),\n        experimentTime = new Date(experiment.started_at);\n    newListItem.classList.remove('template-item');\n    newListItem.setAttribute('data-experiment-id', experiment.id);\n    newListItem.querySelector('.experiment-number').innerHTML = experiment.id;\n    newListItem.querySelector('.subject-number').innerHTML = experiment.subject_user_id;\n    newListItem.querySelector('.subject-name').innerHTML = experiment.subject_user.name;\n    newListItem.querySelector('.subject-email').innerHTML = experiment.subject_user.email;\n    newListItem.querySelector('.experiment-date-time').innerHTML = experimentTime.toString();\n    newListItem.setAttribute('data-load-experiment', experiment.id);\n    experimentList.append(newListItem);\n  });\n}\n\nfunction drawGraphs() {\n  var plots,\n      averagePlots,\n      yMinMax,\n      plotDrawn = false;\n  graph.clearCanvas();\n  plots = internalState.globalDataSet.experiments().reduceToActiveTrials().plotSet().trimPlotTime().setStartingYToZero();\n  averagePlots = internalState.globalDataSet.experiments().reduceToActiveAverages().averagePlotSet().trimPlotTime().setStartingYToZero();\n  yMinMax = _Classes_PlotSet__WEBPACK_IMPORTED_MODULE_1__.PlotSet.yMinMax([plots.yMinMax(), averagePlots.yMinMax()]);\n  internalState.globalDataSet.experiments().reduceToActiveTrials().forEach(function (experiment) {\n    experiment.setPeacefulPlotColour('#ff00ff');\n    experiment.setEmotionalPlotColour('#00FF00');\n    experiment.plotSet().forEach(function (plot) {\n      plot.trimPlotTime().setStartingYToZero();\n      graph.drawPlot(plot, yMinMax, 0.33);\n      plotDrawn = true;\n    });\n  });\n  internalState.globalDataSet.experiments().reduceToActiveAverages().forEach(function (experiment) {\n    experiment.setPeacefulPlotColour('#ff00ff');\n    experiment.setEmotionalPlotColour('#00FF00');\n    experiment.averagePlotSet().forEach(function (averagePlot) {\n      averagePlot.trimPlotTime().setStartingYToZero();\n      graph.drawPlot(averagePlot, yMinMax, 1);\n      plotDrawn = true;\n    });\n  });\n\n  if (!plotDrawn) {\n    drawEmtpyGraph();\n  } else {\n    graph.drawAxis(yMinMax);\n    graph.drawLabels(yMinMax);\n    graph.drawGrid(yMinMax);\n  } // graph.clearCanvas();\n  //\n  // let emotionalImages = (trial) => trial.image.type.name === 'Emotional';\n  // let peacefulImages = (trial) => trial.image.type.name === 'Peaceful';\n  //\n  // let emotionalAverage = globalDataSet.experiment(2)\n  //     .plotSet()\n  //     .filter(emotionalImages)\n  //     .trimPlotTime()\n  //     .setStartingYToZero()\n  //     .averagePlot();\n  //\n  // emotionalAverage.colour('#00FF00');\n  //\n  // graph.drawPlot(emotionalAverage, yMinMax);\n  //\n  // let peacefulAverage = globalDataSet.experiment(2)\n  //     .plotSet()\n  //     .filter(peacefulImages)\n  //     .trimPlotTime()\n  //     .setStartingYToZero()\n  //     .averagePlot();\n  //\n  // peacefulAverage.colour('#ff00ff');\n  //\n  // graph.drawPlot(peacefulAverage, yMinMax);\n\n}\n\nfunction scrollHandler(event) {\n  debugger;\n}\n\nfunction dataLoadFailed() {\n  console.log('Something went wrong loading data.');\n}\n\nvar dataAnalysis = {\n  initiate: initiate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBU0QsYUFBVCxDQUF1QlMsS0FBdkIsRUFBOEI7QUFDMUI7QUFDSDs7QUFFRCxTQUFTcEIsY0FBVCxHQUEwQjtBQUN0QjhFLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9DQUFaO0FBQ0g7O0FBRU0sSUFBTUMsWUFBWSxHQUFHO0FBQ3hCM0YsRUFBQUEsUUFBUSxFQUFSQTtBQUR3QixDQUFyQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9kYXRhLWFuYWx5c2lzLmpzPzFmYzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtHbG9iYWxEYXRhU2V0fSBmcm9tIFwiLi9DbGFzc2VzL0dsb2JhbERhdGFTZXRcIjtcbmltcG9ydCB7UGxvdFNldH0gZnJvbSBcIi4vQ2xhc3Nlcy9QbG90U2V0XCI7XG5cbmNvbnN0XG4gICAgZXhwZXJpbWVudExpc3RJdGVtSWRBdHRyaWJ1dGUgPSAnZGF0YS1leHBlcmltZW50LWlkJyxcbiAgICBleHBlcmltZW50TGlzdEl0ZW1TZWxlY3RvciA9IGBbJHtleHBlcmltZW50TGlzdEl0ZW1JZEF0dHJpYnV0ZX1dYCxcbiAgICBzaG93VHJpYWxzQnV0dG9uU2VsZWN0b3IgPSAnW2RhdGEtbG9hZC1leHBlcmltZW50XSBidXR0b24uc2hvdy10cmlhbHMnLFxuICAgIGNsZWFyVHJpYWxzQnV0dG9uU2VsZWN0b3IgPSAnW2RhdGEtbG9hZC1leHBlcmltZW50XSBidXR0b24ucmVtb3ZlLXRyaWFscycsXG4gICAgbG9hZEF2ZXJhZ2VzQnV0dG9uU2VsZWN0b3IgPSAnW2RhdGEtbG9hZC1leHBlcmltZW50XSBidXR0b24uc2hvdy1hdmVyYWdlcycsXG4gICAgY2xlYXJBdmVyYWdlc0J1dHRvblNlbGVjdG9yID0gJ1tkYXRhLWxvYWQtZXhwZXJpbWVudF0gYnV0dG9uLnJlbW92ZS1hdmVyYWdlcyc7XG5cbmxldCBpbnRlcm5hbFN0YXRlID0ge1xuICAgIGdsb2JhbERhdGFTZXQ6IG51bGwsXG59O1xuXG5mdW5jdGlvbiBpbml0aWF0ZSgpIHtcbiAgICBsb2FkRGF0YSgpO1xuICAgIGdyYXBoLmluaXRpYXRlKCcjcmVzdWx0cy1wbG90dGVyJyk7XG4gICAgbGlzdGVuZXJzKCk7XG4gICAgZHJhd0VtdHB5R3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gbG9hZERhdGEoKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm1bbmFtZT1cImFqYXgtbGlzdFwiXScpO1xuXG4gICAgaGVscGVycy5hamF4Rm9ybShmb3JtLCBnbGJvYWxEYXRhU2V0U2tlbGV0b25Mb2FkZWQsIGRhdGFMb2FkRmFpbGVkKTtcbn1cblxuZnVuY3Rpb24gbGlzdGVuZXJzKCkge1xuICAgIGhlbHBlcnMuYWRkQXRlbXBvcmFsRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaG93VHJpYWxzKS5xdWVyeVNlbGVjdG9yKHNob3dUcmlhbHNCdXR0b25TZWxlY3Rvcik7XG4gICAgaGVscGVycy5hZGRBdGVtcG9yYWxFdmVudExpc3RlbmVyKCdjbGljaycsIGNsZWFyVHJpYWxzKS5xdWVyeVNlbGVjdG9yKGNsZWFyVHJpYWxzQnV0dG9uU2VsZWN0b3IpO1xuICAgIGhlbHBlcnMuYWRkQXRlbXBvcmFsRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaG93QXZlcmFnZXMpLnF1ZXJ5U2VsZWN0b3IobG9hZEF2ZXJhZ2VzQnV0dG9uU2VsZWN0b3IpO1xuICAgIGhlbHBlcnMuYWRkQXRlbXBvcmFsRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGVhckF2ZXJhZ2VzKS5xdWVyeVNlbGVjdG9yKGNsZWFyQXZlcmFnZXNCdXR0b25TZWxlY3Rvcik7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmV4cGVyaW1lbnQtbGlzdGluZycpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnc2Nyb2xsLWxvY2snKTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZXhwZXJpbWVudC1saXN0aW5nJykuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdzY3JvbGwtbG9jaycpO1xuICAgIH0pO1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2Nyb2xsSGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIGRyYXdFbXRweUdyYXBoKCkge1xuICAgIGNvbnN0IHlNaW5NYXggPSB7XG4gICAgICAgIHlNaW46IC0xMDAsXG4gICAgICAgIHlNYXg6IDEwMCxcbiAgICB9O1xuXG4gICAgZ3JhcGguY2xlYXJDYW52YXMoKTtcbiAgICBncmFwaC5kcmF3QXhpcyh5TWluTWF4KTtcbiAgICBncmFwaC5kcmF3TGFiZWxzKHlNaW5NYXgpO1xuICAgIGdyYXBoLmRyYXdHcmlkKHlNaW5NYXgpO1xufVxuXG5mdW5jdGlvbiBnZXRFeHBlcmltZW50RnJvbUV2ZW50KGV2ZW50KSB7XG4gICAgY29uc3QgbGlzdEl0ZW0gPSBldmVudC50YXJnZXQuY2xvc2VzdChleHBlcmltZW50TGlzdEl0ZW1TZWxlY3RvciksXG4gICAgICAgIHNob3dUcmlhbHNCdXR0b24gPSBsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKHNob3dUcmlhbHNCdXR0b25TZWxlY3RvciksXG4gICAgICAgIGNsZWFyVHJpYWxzQnV0dG9uID0gbGlzdEl0ZW0ucXVlcnlTZWxlY3RvcihjbGVhclRyaWFsc0J1dHRvblNlbGVjdG9yKSxcbiAgICAgICAgc2hvd0F2ZXJhZ2VzQnV0dG9uID0gbGlzdEl0ZW0ucXVlcnlTZWxlY3Rvcihsb2FkQXZlcmFnZXNCdXR0b25TZWxlY3RvciksXG4gICAgICAgIGNsZWFyQXZlcmFnZXNCdXR0b24gPSBsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKGNsZWFyQXZlcmFnZXNCdXR0b25TZWxlY3RvciksXG4gICAgICAgIGlkID0gcGFyc2VJbnQobGlzdEl0ZW0uZ2V0QXR0cmlidXRlKGV4cGVyaW1lbnRMaXN0SXRlbUlkQXR0cmlidXRlKSwgMTApLFxuICAgICAgICBleHBlcmltZW50ID0gaW50ZXJuYWxTdGF0ZS5nbG9iYWxEYXRhU2V0LmV4cGVyaW1lbnQoaWQpO1xuXG4gICAgcmV0dXJuIHsgc2hvd1RyaWFsc0J1dHRvbiwgY2xlYXJUcmlhbHNCdXR0b24sIHNob3dBdmVyYWdlc0J1dHRvbiwgY2xlYXJBdmVyYWdlc0J1dHRvbiwgaWQsIGV4cGVyaW1lbnQgfTtcbn1cblxuZnVuY3Rpb24gYnV0dG9uVG9nZ2xlc1Nob3dpbmcoc2hvd0J1dHRvbiwgY2xlYXJCdXR0b24pIHtcbiAgICBzaG93QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRpbmcnKTtcbiAgICBzaG93QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIHNob3dCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIGNsZWFyQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xufVxuXG5mdW5jdGlvbiBzaG93VHJpYWxzKGV2ZW50KSB7XG4gICAgLy8gVG9EbzogSGFuZGxlIHJlcXVlc3Qgd2hlbiBnbG9iYWxEYXRhU2V0IGlzIG5vdCBsb2FkZWQuXG5cbiAgICBjb25zdCB7IHNob3dUcmlhbHNCdXR0b24sIGNsZWFyVHJpYWxzQnV0dG9uLCBleHBlcmltZW50IH0gPSBnZXRFeHBlcmltZW50RnJvbUV2ZW50KGV2ZW50KTtcblxuICAgIGlmIChzaG93VHJpYWxzQnV0dG9uLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2hvd1RyaWFsc0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdsb2FkaW5nJyk7XG4gICAgc2hvd1RyaWFsc0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgbnVsbCk7XG5cbiAgICBleHBlcmltZW50Lm9ubG9hZCA9IChkYXRhKSA9PiB7XG4gICAgICAgIGJ1dHRvblRvZ2dsZXNTaG93aW5nKHNob3dUcmlhbHNCdXR0b24sIGNsZWFyVHJpYWxzQnV0dG9uKTtcbiAgICAgICAgZXhwZXJpbWVudC5hY3RpdmF0ZVRyaWFscygpO1xuICAgICAgICBleHBlcmltZW50TG9hZGVkKGRhdGEpO1xuICAgIH1cbiAgICBleHBlcmltZW50LmxvYWQoKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJUcmlhbHMoZXZlbnQpIHtcbiAgICBjb25zdCB7IHNob3dUcmlhbHNCdXR0b24sIGNsZWFyVHJpYWxzQnV0dG9uLCBleHBlcmltZW50IH0gPSBnZXRFeHBlcmltZW50RnJvbUV2ZW50KGV2ZW50KTtcblxuICAgIGV4cGVyaW1lbnQuZGVhY3RpdmF0ZVRyaWFscygpO1xuICAgIHNob3dUcmlhbHNCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgY2xlYXJUcmlhbHNCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG5cbiAgICBkcmF3R3JhcGhzKCk7XG59XG5cbmZ1bmN0aW9uIHNob3dBdmVyYWdlcygpIHtcbiAgICAvLyBUb0RvOiBIYW5kbGUgcmVxdWVzdCB3aGVuIGdsb2JhbERhdGFTZXQgaXMgbm90IGxvYWRlZC5cblxuICAgIGNvbnN0IHsgc2hvd0F2ZXJhZ2VzQnV0dG9uLCBjbGVhckF2ZXJhZ2VzQnV0dG9uLCBleHBlcmltZW50IH0gPSBnZXRFeHBlcmltZW50RnJvbUV2ZW50KGV2ZW50KTtcblxuICAgIGlmIChzaG93QXZlcmFnZXNCdXR0b24uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzaG93QXZlcmFnZXNCdXR0b24uY2xhc3NMaXN0LmFkZCgnbG9hZGluZycpO1xuICAgIHNob3dBdmVyYWdlc0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgbnVsbCk7XG5cbiAgICBleHBlcmltZW50Lm9ubG9hZCA9IChkYXRhKSA9PiB7XG4gICAgICAgIGJ1dHRvblRvZ2dsZXNTaG93aW5nKHNob3dBdmVyYWdlc0J1dHRvbiwgY2xlYXJBdmVyYWdlc0J1dHRvbik7XG4gICAgICAgIGV4cGVyaW1lbnQuYWN0aXZhdGVBdmVyYWdlKCk7XG4gICAgICAgIGV4cGVyaW1lbnRMb2FkZWQoZGF0YSk7XG4gICAgfVxuICAgIGV4cGVyaW1lbnQubG9hZCgpO1xufVxuXG5mdW5jdGlvbiBjbGVhckF2ZXJhZ2VzKCkge1xuICAgIGNvbnN0IHsgc2hvd0F2ZXJhZ2VzQnV0dG9uLCBjbGVhckF2ZXJhZ2VzQnV0dG9uLCBleHBlcmltZW50IH0gPSBnZXRFeHBlcmltZW50RnJvbUV2ZW50KGV2ZW50KTtcblxuICAgIGV4cGVyaW1lbnQuZGVhY3RpdmF0ZUF2ZXJhZ2UoKTtcbiAgICBzaG93QXZlcmFnZXNCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgY2xlYXJBdmVyYWdlc0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcblxuICAgIGRyYXdHcmFwaHMoKTtcbn1cblxuZnVuY3Rpb24gZ2xib2FsRGF0YVNldFNrZWxldG9uTG9hZGVkKGRhdGEpIHtcbiAgICBpbnRlcm5hbFN0YXRlLmdsb2JhbERhdGFTZXQgPSBuZXcgR2xvYmFsRGF0YVNldChkYXRhKTtcbiAgICBwb3B1bGF0ZUxpc3QoKTtcbn1cblxuZnVuY3Rpb24gZXhwZXJpbWVudExvYWRlZCgpIHtcbiAgICBkcmF3R3JhcGhzKCk7XG59XG5cbmZ1bmN0aW9uIHBvcHVsYXRlTGlzdCgpIHtcbiAgICBjb25zdCBleHBlcmltZW50TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsLmV4cGVyaW1lbnRzJyksXG4gICAgICAgIGV4cGVyaW1lbnRMaXN0SXRlbVRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndWwuZXhwZXJpbWVudHMgbGkudGVtcGxhdGUtaXRlbScpO1xuXG4gICAgaW50ZXJuYWxTdGF0ZS5nbG9iYWxEYXRhU2V0LmV4cGVyaW1lbnRzKCkuZm9yRWFjaCgoZXhwZXJpbWVudCkgPT4ge1xuICAgICAgICBsZXQgbmV3TGlzdEl0ZW0gPSBleHBlcmltZW50TGlzdEl0ZW1UZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSksXG4gICAgICAgICAgICBleHBlcmltZW50VGltZSA9IG5ldyBEYXRlKGV4cGVyaW1lbnQuc3RhcnRlZF9hdCk7XG5cbiAgICAgICAgbmV3TGlzdEl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgndGVtcGxhdGUtaXRlbScpO1xuICAgICAgICBuZXdMaXN0SXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZXhwZXJpbWVudC1pZCcsIGV4cGVyaW1lbnQuaWQpO1xuICAgICAgICBuZXdMaXN0SXRlbS5xdWVyeVNlbGVjdG9yKCcuZXhwZXJpbWVudC1udW1iZXInKS5pbm5lckhUTUwgPSBleHBlcmltZW50LmlkO1xuICAgICAgICBuZXdMaXN0SXRlbS5xdWVyeVNlbGVjdG9yKCcuc3ViamVjdC1udW1iZXInKS5pbm5lckhUTUwgPSBleHBlcmltZW50LnN1YmplY3RfdXNlcl9pZDtcbiAgICAgICAgbmV3TGlzdEl0ZW0ucXVlcnlTZWxlY3RvcignLnN1YmplY3QtbmFtZScpLmlubmVySFRNTCA9IGV4cGVyaW1lbnQuc3ViamVjdF91c2VyLm5hbWU7XG4gICAgICAgIG5ld0xpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5zdWJqZWN0LWVtYWlsJykuaW5uZXJIVE1MID0gZXhwZXJpbWVudC5zdWJqZWN0X3VzZXIuZW1haWw7XG4gICAgICAgIG5ld0xpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5leHBlcmltZW50LWRhdGUtdGltZScpLmlubmVySFRNTCA9IGV4cGVyaW1lbnRUaW1lLnRvU3RyaW5nKCk7XG4gICAgICAgIG5ld0xpc3RJdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1sb2FkLWV4cGVyaW1lbnQnLCBleHBlcmltZW50LmlkKTtcbiAgICAgICAgZXhwZXJpbWVudExpc3QuYXBwZW5kKG5ld0xpc3RJdGVtKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZHJhd0dyYXBocygpIHtcbiAgICBsZXQgcGxvdHMsIGF2ZXJhZ2VQbG90cywgeU1pbk1heCxcbiAgICAgICAgcGxvdERyYXduID0gZmFsc2U7XG5cbiAgICBncmFwaC5jbGVhckNhbnZhcygpO1xuXG4gICAgcGxvdHMgPSBpbnRlcm5hbFN0YXRlLmdsb2JhbERhdGFTZXQuZXhwZXJpbWVudHMoKS5yZWR1Y2VUb0FjdGl2ZVRyaWFscygpLnBsb3RTZXQoKS50cmltUGxvdFRpbWUoKS5zZXRTdGFydGluZ1lUb1plcm8oKTtcbiAgICBhdmVyYWdlUGxvdHMgPSBpbnRlcm5hbFN0YXRlLmdsb2JhbERhdGFTZXQuZXhwZXJpbWVudHMoKS5yZWR1Y2VUb0FjdGl2ZUF2ZXJhZ2VzKCkuYXZlcmFnZVBsb3RTZXQoKS50cmltUGxvdFRpbWUoKS5zZXRTdGFydGluZ1lUb1plcm8oKTtcblxuICAgIHlNaW5NYXggPSBQbG90U2V0LnlNaW5NYXgoW3Bsb3RzLnlNaW5NYXgoKSwgYXZlcmFnZVBsb3RzLnlNaW5NYXgoKV0pO1xuXG4gICAgaW50ZXJuYWxTdGF0ZS5nbG9iYWxEYXRhU2V0LmV4cGVyaW1lbnRzKCkucmVkdWNlVG9BY3RpdmVUcmlhbHMoKS5mb3JFYWNoKChleHBlcmltZW50KSA9PiB7XG4gICAgICAgIGV4cGVyaW1lbnQuc2V0UGVhY2VmdWxQbG90Q29sb3VyKCcjZmYwMGZmJyk7XG4gICAgICAgIGV4cGVyaW1lbnQuc2V0RW1vdGlvbmFsUGxvdENvbG91cignIzAwRkYwMCcpO1xuXG4gICAgICAgIGV4cGVyaW1lbnQucGxvdFNldCgpLmZvckVhY2goKHBsb3QpID0+IHtcbiAgICAgICAgICAgIHBsb3QudHJpbVBsb3RUaW1lKCkuc2V0U3RhcnRpbmdZVG9aZXJvKCk7XG5cbiAgICAgICAgICAgIGdyYXBoLmRyYXdQbG90KHBsb3QsIHlNaW5NYXgsIDAuMzMpO1xuICAgICAgICAgICAgcGxvdERyYXduID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpbnRlcm5hbFN0YXRlLmdsb2JhbERhdGFTZXQuZXhwZXJpbWVudHMoKS5yZWR1Y2VUb0FjdGl2ZUF2ZXJhZ2VzKCkuZm9yRWFjaCgoZXhwZXJpbWVudCkgPT4ge1xuICAgICAgICBleHBlcmltZW50LnNldFBlYWNlZnVsUGxvdENvbG91cignI2ZmMDBmZicpO1xuICAgICAgICBleHBlcmltZW50LnNldEVtb3Rpb25hbFBsb3RDb2xvdXIoJyMwMEZGMDAnKTtcblxuICAgICAgICBleHBlcmltZW50LmF2ZXJhZ2VQbG90U2V0KCkuZm9yRWFjaCgoYXZlcmFnZVBsb3QpID0+IHtcbiAgICAgICAgICAgIGF2ZXJhZ2VQbG90LnRyaW1QbG90VGltZSgpLnNldFN0YXJ0aW5nWVRvWmVybygpO1xuXG4gICAgICAgICAgICBncmFwaC5kcmF3UGxvdChhdmVyYWdlUGxvdCwgeU1pbk1heCwgMSk7XG4gICAgICAgICAgICBwbG90RHJhd24gPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmICghIHBsb3REcmF3bikge1xuICAgICAgICBkcmF3RW10cHlHcmFwaCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdyYXBoLmRyYXdBeGlzKHlNaW5NYXgpO1xuICAgICAgICBncmFwaC5kcmF3TGFiZWxzKHlNaW5NYXgpO1xuICAgICAgICBncmFwaC5kcmF3R3JpZCh5TWluTWF4KTtcbiAgICB9XG5cbiAgICAvLyBncmFwaC5jbGVhckNhbnZhcygpO1xuICAgIC8vXG4gICAgLy8gbGV0IGVtb3Rpb25hbEltYWdlcyA9ICh0cmlhbCkgPT4gdHJpYWwuaW1hZ2UudHlwZS5uYW1lID09PSAnRW1vdGlvbmFsJztcbiAgICAvLyBsZXQgcGVhY2VmdWxJbWFnZXMgPSAodHJpYWwpID0+IHRyaWFsLmltYWdlLnR5cGUubmFtZSA9PT0gJ1BlYWNlZnVsJztcbiAgICAvL1xuICAgIC8vIGxldCBlbW90aW9uYWxBdmVyYWdlID0gZ2xvYmFsRGF0YVNldC5leHBlcmltZW50KDIpXG4gICAgLy8gICAgIC5wbG90U2V0KClcbiAgICAvLyAgICAgLmZpbHRlcihlbW90aW9uYWxJbWFnZXMpXG4gICAgLy8gICAgIC50cmltUGxvdFRpbWUoKVxuICAgIC8vICAgICAuc2V0U3RhcnRpbmdZVG9aZXJvKClcbiAgICAvLyAgICAgLmF2ZXJhZ2VQbG90KCk7XG4gICAgLy9cbiAgICAvLyBlbW90aW9uYWxBdmVyYWdlLmNvbG91cignIzAwRkYwMCcpO1xuICAgIC8vXG4gICAgLy8gZ3JhcGguZHJhd1Bsb3QoZW1vdGlvbmFsQXZlcmFnZSwgeU1pbk1heCk7XG4gICAgLy9cbiAgICAvLyBsZXQgcGVhY2VmdWxBdmVyYWdlID0gZ2xvYmFsRGF0YVNldC5leHBlcmltZW50KDIpXG4gICAgLy8gICAgIC5wbG90U2V0KClcbiAgICAvLyAgICAgLmZpbHRlcihwZWFjZWZ1bEltYWdlcylcbiAgICAvLyAgICAgLnRyaW1QbG90VGltZSgpXG4gICAgLy8gICAgIC5zZXRTdGFydGluZ1lUb1plcm8oKVxuICAgIC8vICAgICAuYXZlcmFnZVBsb3QoKTtcbiAgICAvL1xuICAgIC8vIHBlYWNlZnVsQXZlcmFnZS5jb2xvdXIoJyNmZjAwZmYnKTtcbiAgICAvL1xuICAgIC8vIGdyYXBoLmRyYXdQbG90KHBlYWNlZnVsQXZlcmFnZSwgeU1pbk1heCk7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbEhhbmRsZXIoZXZlbnQpIHtcbiAgICBkZWJ1Z2dlcjtcbn1cblxuZnVuY3Rpb24gZGF0YUxvYWRGYWlsZWQoKSB7XG4gICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHdyb25nIGxvYWRpbmcgZGF0YS4nKTtcbn1cblxuZXhwb3J0IGNvbnN0IGRhdGFBbmFseXNpcyA9IHtcbiAgICBpbml0aWF0ZSxcbn07XG4iXSwibmFtZXMiOlsiR2xvYmFsRGF0YVNldCIsIlBsb3RTZXQiLCJleHBlcmltZW50TGlzdEl0ZW1JZEF0dHJpYnV0ZSIsImV4cGVyaW1lbnRMaXN0SXRlbVNlbGVjdG9yIiwic2hvd1RyaWFsc0J1dHRvblNlbGVjdG9yIiwiY2xlYXJUcmlhbHNCdXR0b25TZWxlY3RvciIsImxvYWRBdmVyYWdlc0J1dHRvblNlbGVjdG9yIiwiY2xlYXJBdmVyYWdlc0J1dHRvblNlbGVjdG9yIiwiaW50ZXJuYWxTdGF0ZSIsImdsb2JhbERhdGFTZXQiLCJpbml0aWF0ZSIsImxvYWREYXRhIiwiZ3JhcGgiLCJsaXN0ZW5lcnMiLCJkcmF3RW10cHlHcmFwaCIsImZvcm0iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJoZWxwZXJzIiwiYWpheEZvcm0iLCJnbGJvYWxEYXRhU2V0U2tlbGV0b25Mb2FkZWQiLCJkYXRhTG9hZEZhaWxlZCIsImFkZEF0ZW1wb3JhbEV2ZW50TGlzdGVuZXIiLCJzaG93VHJpYWxzIiwiY2xlYXJUcmlhbHMiLCJzaG93QXZlcmFnZXMiLCJjbGVhckF2ZXJhZ2VzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImJvZHkiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJzY3JvbGxIYW5kbGVyIiwieU1pbk1heCIsInlNaW4iLCJ5TWF4IiwiY2xlYXJDYW52YXMiLCJkcmF3QXhpcyIsImRyYXdMYWJlbHMiLCJkcmF3R3JpZCIsImdldEV4cGVyaW1lbnRGcm9tRXZlbnQiLCJldmVudCIsImxpc3RJdGVtIiwidGFyZ2V0IiwiY2xvc2VzdCIsInNob3dUcmlhbHNCdXR0b24iLCJjbGVhclRyaWFsc0J1dHRvbiIsInNob3dBdmVyYWdlc0J1dHRvbiIsImNsZWFyQXZlcmFnZXNCdXR0b24iLCJpZCIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwiZXhwZXJpbWVudCIsImJ1dHRvblRvZ2dsZXNTaG93aW5nIiwic2hvd0J1dHRvbiIsImNsZWFyQnV0dG9uIiwicmVtb3ZlQXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwib25sb2FkIiwiZGF0YSIsImFjdGl2YXRlVHJpYWxzIiwiZXhwZXJpbWVudExvYWRlZCIsImxvYWQiLCJkZWFjdGl2YXRlVHJpYWxzIiwiZHJhd0dyYXBocyIsImFjdGl2YXRlQXZlcmFnZSIsImRlYWN0aXZhdGVBdmVyYWdlIiwicG9wdWxhdGVMaXN0IiwiZXhwZXJpbWVudExpc3QiLCJleHBlcmltZW50TGlzdEl0ZW1UZW1wbGF0ZSIsImV4cGVyaW1lbnRzIiwiZm9yRWFjaCIsIm5ld0xpc3RJdGVtIiwiY2xvbmVOb2RlIiwiZXhwZXJpbWVudFRpbWUiLCJEYXRlIiwic3RhcnRlZF9hdCIsImlubmVySFRNTCIsInN1YmplY3RfdXNlcl9pZCIsInN1YmplY3RfdXNlciIsIm5hbWUiLCJlbWFpbCIsInRvU3RyaW5nIiwiYXBwZW5kIiwicGxvdHMiLCJhdmVyYWdlUGxvdHMiLCJwbG90RHJhd24iLCJyZWR1Y2VUb0FjdGl2ZVRyaWFscyIsInBsb3RTZXQiLCJ0cmltUGxvdFRpbWUiLCJzZXRTdGFydGluZ1lUb1plcm8iLCJyZWR1Y2VUb0FjdGl2ZUF2ZXJhZ2VzIiwiYXZlcmFnZVBsb3RTZXQiLCJzZXRQZWFjZWZ1bFBsb3RDb2xvdXIiLCJzZXRFbW90aW9uYWxQbG90Q29sb3VyIiwicGxvdCIsImRyYXdQbG90IiwiYXZlcmFnZVBsb3QiLCJjb25zb2xlIiwibG9nIiwiZGF0YUFuYWx5c2lzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/data-analysis.js\n");

/***/ }),

/***/ "./resources/js/graph-live.js":
/*!************************************!*\
  !*** ./resources/js/graph-live.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"graphLive\": () => (/* binding */ graphLive)\n/* harmony export */ });\nvar maxGsrDataSize = 15000;\nvar gsrData = [],\n    scaleFactor = window.devicePixelRatio || 1,\n    canvasActivated = false,\n    axisSpaceX = 100 * scaleFactor,\n    axisSpaceY = 50 * scaleFactor,\n    plotWidth,\n    plotHeight,\n    timeMin,\n    timeMax,\n    millivoltsMin,\n    millivoltsMax,\n    graphCC,\n    spacingPerSecond = 50 * scaleFactor,\n    graphActive = true;\n\nfunction initiate(canvasSelector) {\n  graphCC = document.querySelector(canvasSelector).getContext('2d');\n  document.addEventListener('SerialDataPoint', onSerialDataPoint);\n  window.addEventListener('resize', function () {\n    canvasSetup();\n  });\n}\n\nfunction stop() {\n  graphActive = false;\n}\n\nfunction resume() {\n  graphActive = true;\n}\n\nfunction onSerialDataPoint(event) {\n  if (gsrData.length >= maxGsrDataSize) {\n    gsrData.shift();\n  }\n\n  gsrData.push(event.detail);\n\n  if (!canvasActivated) {\n    var graphOnline = new CustomEvent('GraphOnline');\n    document.dispatchEvent(graphOnline);\n    canvasSetup();\n    canvasActivated = true;\n  }\n\n  if (graphActive) {\n    renderGraph();\n  }\n}\n\nfunction canvasSetup() {\n  graphCC.canvas.width = graphCC.canvas.scrollWidth * scaleFactor;\n  graphCC.canvas.height = graphCC.canvas.scrollHeight * scaleFactor;\n  renderGraph();\n}\n\nfunction renderGraph() {\n  var datapoints;\n  plotWidth = graphCC.canvas.width - axisSpaceX;\n  plotHeight = graphCC.canvas.height - axisSpaceY;\n  datapoints = getRelevantSubsetOfDataPointsForGraphing();\n\n  if (datapoints.length === 0) {\n    console.debug('No Datapoints');\n    return false;\n  }\n\n  graphCC.clearRect(0, 0, graphCC.canvas.width, graphCC.canvas.height);\n  timeMin = minimumDataPointValue(datapoints, 'time').time;\n  timeMax = plotWidth / spacingPerSecond * 1000 + timeMin;\n  millivoltsMin = minimumDataPointValue(datapoints, 'millivolts').millivolts;\n  millivoltsMax = maximumDataPointValue(datapoints, 'millivolts').millivolts;\n  renderScaleX();\n  renderScaleY();\n  renderPlot(datapoints, axisSpaceX);\n  renderAxis();\n}\n\nfunction getRelevantSubsetOfDataPointsForGraphing() {\n  var timePeriod = plotWidth / spacingPerSecond * 1000,\n      gsrDataLength = gsrData.length,\n      gsrLastIndex = gsrDataLength - 1,\n      latestDataPoint = gsrData[gsrLastIndex],\n      timeOfLatestDataPoint = latestDataPoint.time,\n      earliestTime = timeOfLatestDataPoint - timePeriod,\n      relevantSubset = []; // ToDo: I don't presently understand why the undefined check is required, but without it bad things happened.\n\n  for (var index = gsrData.length - 1; index >= 0 && gsrData[index] !== undefined && gsrData[index].time > earliestTime; index--) {\n    relevantSubset.push(gsrData[index]);\n  }\n\n  relevantSubset.reverse();\n  return relevantSubset;\n}\n\nfunction renderAxis() {\n  graphCC.beginPath();\n  graphCC.moveTo(axisSpaceX, 0);\n  graphCC.lineTo(axisSpaceX, graphCC.canvas.height - axisSpaceY);\n  graphCC.lineTo(graphCC.canvas.width, graphCC.canvas.height - axisSpaceY);\n  graphCC.strokeStyle = \"#dddddd\";\n  graphCC.stroke();\n}\n\nfunction renderScaleX() {\n  var intervalX = 1000,\n      firstInterval = Math.ceil(timeMin / intervalX) * intervalX;\n\n  for (var calculatedInterval = firstInterval; calculatedInterval < timeMax; calculatedInterval += intervalX) {\n    var scaledTimeValue = scaleValue(calculatedInterval, timeMin, timeMax, plotWidth),\n        fontsize = 14 * scaleFactor,\n        fontXOffset = 0 * scaleFactor,\n        fontYOffset = 20 * scaleFactor;\n    graphCC.globalAlpha = 0.1;\n    graphCC.beginPath();\n    graphCC.moveTo(scaledTimeValue + axisSpaceX, 0);\n    graphCC.lineTo(scaledTimeValue + axisSpaceX, graphCC.canvas.height - axisSpaceY);\n    graphCC.strokeStyle = \"#dddddd\";\n    graphCC.stroke();\n    graphCC.globalAlpha = 1;\n    graphCC.beginPath();\n    graphCC.moveTo(scaledTimeValue + axisSpaceX, graphCC.canvas.height - axisSpaceY);\n    graphCC.lineTo(scaledTimeValue + axisSpaceX, graphCC.canvas.height - axisSpaceY / 1.2);\n    graphCC.strokeStyle = \"#dddddd\";\n    graphCC.stroke();\n    graphCC.font = fontsize + 'px Open Sans';\n    graphCC.fillStyle = \"#dddddd\";\n    graphCC.textAlign = \"center\";\n    graphCC.fillText(parseInt(calculatedInterval / 1000), scaledTimeValue + axisSpaceX + fontXOffset, graphCC.canvas.height - axisSpaceY / 1.2 + fontYOffset);\n  }\n}\n\nfunction renderScaleY() {\n  var scales = [100, 50, 10, 5, 1, 0.5, 0.1, 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001],\n      requiredDivisions = 4,\n      millivoltRange = millivoltsMax - millivoltsMin,\n      intervalY = scales.find(function (scale) {\n    return scale * requiredDivisions <= millivoltRange;\n  });\n  var firstInterval;\n\n  if (typeof intervalY === 'undefined') {\n    return;\n  }\n\n  firstInterval = Math.ceil(millivoltsMin / intervalY) * intervalY;\n\n  for (var calculatedInterval = firstInterval; calculatedInterval < millivoltsMax; calculatedInterval += intervalY) {\n    var scaledMillivoltsValue = scaleValue(calculatedInterval, millivoltsMin, millivoltsMax, plotHeight, true),\n        fontsize = 14 * scaleFactor,\n        fontXOffset = -8 * scaleFactor,\n        fontYOffset = 5 * scaleFactor;\n    graphCC.globalAlpha = 0.1;\n    graphCC.beginPath();\n    graphCC.moveTo(graphCC.canvas.width, scaledMillivoltsValue);\n    graphCC.lineTo(axisSpaceX, scaledMillivoltsValue);\n    graphCC.strokeStyle = \"#dddddd\";\n    graphCC.stroke();\n    graphCC.globalAlpha = 1;\n    graphCC.beginPath();\n    graphCC.moveTo(axisSpaceX, scaledMillivoltsValue);\n    graphCC.lineTo(axisSpaceX / 1.2, scaledMillivoltsValue);\n    graphCC.strokeStyle = \"#dddddd\";\n    graphCC.stroke();\n    graphCC.font = fontsize + 'px Open Sans';\n    graphCC.fillStyle = \"#dddddd\";\n    graphCC.textAlign = \"right\";\n    graphCC.fillText(formatNumberForYAxis(calculatedInterval, intervalY), axisSpaceX / 1.2 + fontXOffset, scaledMillivoltsValue + fontYOffset);\n  }\n}\n\nfunction formatNumberForYAxis(number, intervalY) {\n  if (intervalY >= 1) {\n    return parseInt(number);\n  } else if (number == 0) {\n    return 0;\n  } else {\n    return number.toFixed(2);\n  }\n}\n\nfunction renderPlot(datapoints, offsetX) {\n  var origin = false;\n  graphCC.beginPath();\n  datapoints.forEach(function (datapoint, index) {\n    var dataPointYValue = scaleValue(datapoint.millivolts, millivoltsMin, millivoltsMax, plotHeight, true),\n        dataPointXValue = scaleValue(datapoint.time, timeMin, timeMax, plotWidth);\n\n    if (!origin) {\n      origin = datapoint;\n      graphCC.moveTo(offsetX, dataPointYValue);\n    } else {\n      graphCC.lineTo(dataPointXValue + offsetX, dataPointYValue);\n    }\n  });\n  graphCC.strokeStyle = \"#00ff00\";\n  graphCC.lineWidth = 1 * scaleFactor;\n  graphCC.stroke();\n}\n\nfunction minimumDataPointValue(datapoints, property) {\n  return datapoints.reduce(function (previousDP, currentDP) {\n    return previousDP[property] < currentDP[property] ? previousDP : currentDP;\n  });\n}\n\nfunction maximumDataPointValue(datapoints, property) {\n  return datapoints.reduce(function (previousDP, currentDP) {\n    return previousDP[property] > currentDP[property] ? previousDP : currentDP;\n  });\n}\n\nfunction scaleValue(value, min, max, scale) {\n  var flipscale = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var valueOffset = value - min,\n      maxOffset = max - min,\n      valueNeutralScaling = valueOffset / maxOffset;\n\n  if (flipscale) {\n    valueNeutralScaling = 1 - valueNeutralScaling;\n  }\n\n  return valueNeutralScaling * scale;\n}\n\nfunction calculateSuperAverage() {\n  var totalValue = gsrData.reduce(function (previousDP, currentDP) {\n    return previousDP + currentDP.millivolts;\n  }, 0);\n  return totalValue / gsrData.length;\n}\n\nvar graphLive = {\n  initiate: initiate,\n  calculateSuperAverage: calculateSuperAverage,\n  stop: stop,\n  resume: resume\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/graph-live.js\n");

/***/ }),

/***/ "./resources/js/graph.js":
/*!*******************************!*\
  !*** ./resources/js/graph.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"graph\": () => (/* binding */ graph)\n/* harmony export */ });\nvar scaleFactor = window.devicePixelRatio || 1,\n    preZeroTime = 7000,\n    postZeroTime = 10000;\nvar internalState = {\n  dataset: null,\n  margins: {\n    xMin: 100,\n    yMin: 100,\n    xMax: 50,\n    yMax: 100\n  },\n  axis: {},\n  grid: {\n    minimumSpacing: 5,\n    availableScales: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100, 500]\n  },\n  CC: null\n};\n\nfunction initiate(selector) {\n  internalState.CC = document.querySelector(selector).getContext('2d');\n  window.addEventListener('resize', function () {\n    canvasSetup();\n  });\n  canvasSetup();\n  return this;\n}\n\nfunction canvasSetup() {\n  internalState.CC.canvas.width = internalState.CC.canvas.scrollWidth * scaleFactor;\n  internalState.CC.canvas.height = internalState.CC.canvas.scrollHeight * scaleFactor;\n}\n\nfunction clearCanvas() {\n  internalState.CC.clearRect(0, 0, internalState.CC.canvas.width, internalState.CC.canvas.height);\n}\n\nfunction plotToDrawAreaConverter() {\n  var _yMinMax$yMin, _yMinMax$yMax;\n\n  var plot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var yMinMax = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var daXMin = internalState.margins.xMin * scaleFactor,\n      daXMax = internalState.CC.canvas.width - internalState.margins.xMax * scaleFactor,\n      daYMin = internalState.margins.yMin * scaleFactor,\n      daYMax = internalState.CC.canvas.height - internalState.margins.yMax * scaleFactor,\n      plXMin = -1 * preZeroTime,\n      plXMax = postZeroTime,\n      plYMin = (_yMinMax$yMin = yMinMax === null || yMinMax === void 0 ? void 0 : yMinMax.yMin) !== null && _yMinMax$yMin !== void 0 ? _yMinMax$yMin : plot.lowestValues().y,\n      plYMax = (_yMinMax$yMax = yMinMax === null || yMinMax === void 0 ? void 0 : yMinMax.yMax) !== null && _yMinMax$yMax !== void 0 ? _yMinMax$yMax : plot.highestValues().y;\n  return {\n    plot: {\n      xMin: plXMin,\n      xMax: plXMax,\n      yMin: plYMin,\n      yMax: plYMax,\n      width: plXMax - plXMin,\n      height: plYMax - plYMin\n    },\n    draw: {\n      xMin: daXMin,\n      xMax: daXMax,\n      yMin: daYMin,\n      yMax: daYMax,\n      width: daXMax - daXMin,\n      height: daYMax - daYMin\n    }\n  };\n}\n\nfunction drawPlot(plot) {\n  var yMinMax = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var opacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  plot.trimPlotTime(preZeroTime, postZeroTime);\n  var plotToDraw = plotToDrawAreaConverter(plot, yMinMax);\n  var origin = false;\n  internalState.CC.beginPath();\n  plot.forEach(function (plotpoint) {\n    var floatingXValue = scaleValue(plotpoint.x, plotToDraw.plot.xMin, plotToDraw.plot.xMax, plotToDraw.draw.width),\n        floatingYValue = scaleValue(plotpoint.y, plotToDraw.plot.yMin, plotToDraw.plot.yMax, plotToDraw.draw.height);\n    var dataPointXValue = floatingXValue + internalState.margins.xMin * scaleFactor,\n        dataPointYValue = floatingYValue + internalState.margins.yMin * scaleFactor;\n\n    if (!origin) {\n      origin = plotpoint;\n      internalState.CC.moveTo(dataPointXValue, flipYValue(dataPointYValue));\n    } else {\n      internalState.CC.lineTo(dataPointXValue, flipYValue(dataPointYValue));\n    }\n  });\n  internalState.CC.strokeStyle = plot.colour();\n  internalState.CC.lineWidth = 1 * scaleFactor;\n  internalState.CC.globalAlpha = opacity;\n  internalState.CC.stroke();\n  internalState.CC.globalAlpha = 1;\n  return this;\n}\n\nfunction drawAxis(yMinMax) {\n  var plotToDraw = plotToDrawAreaConverter(null, yMinMax); // ToDo: This is a bit of a bodge fix, we should find out what left the global alpha set badly. Occurs after removing all experiments.\n\n  internalState.CC.globalAlpha = 1;\n  internalState.CC.beginPath();\n  internalState.CC.moveTo(plotToDraw.draw.xMin, flipYValue(plotToDraw.draw.yMax));\n  internalState.CC.lineTo(plotToDraw.draw.xMin, flipYValue(plotToDraw.draw.yMin));\n  internalState.CC.lineTo(plotToDraw.draw.xMax, flipYValue(plotToDraw.draw.yMin));\n  internalState.CC.strokeStyle = \"#dddddd\";\n  internalState.CC.stroke();\n  return this;\n}\n\nfunction drawLabels(yMinMax) {\n  // ToDo: finish this function and clean up.\n  var plotToDraw = plotToDrawAreaConverter(null, yMinMax);\n  var fontsize = 16 * scaleFactor,\n      fontXOffset = 0 * scaleFactor,\n      fontYOffset = -20 * scaleFactor;\n  internalState.CC.font = fontsize + 'px Open Sans';\n  internalState.CC.fillStyle = \"#dddddd\";\n  internalState.CC.textAlign = \"center\";\n  internalState.CC.fillText('Experiment Time (seconds)', internalState.CC.canvas.width / 2 + fontXOffset, flipYValue(plotToDraw.draw.yMin / 2 + fontYOffset));\n  fontsize = 14 * scaleFactor;\n  fontXOffset = 50 * scaleFactor;\n  fontYOffset = 385 * scaleFactor;\n  internalState.CC.rotate(Math.PI / -2);\n  internalState.CC.font = fontsize + 'px Open Sans';\n  internalState.CC.fillText('Skin Conductance (mv conductance change)', internalState.CC.canvas.width / 2, flipYValue(internalState.CC.canvas.height / 2));\n  internalState.CC.rotate(Math.PI / 2); // internalState.CC.translate(internalState.CC.canvas.width / 2, internalState.CC.canvas.height / 2);\n  // internalState.CC.translate(- (internalState.CC.canvas.width / 2) - fontXOffset, - (internalState.CC.canvas.height / 2) - fontYOffset);\n  //\n  //\n  //\n  //\n  // internalState.CC.translate(- (internalState.CC.canvas.width / 2) + fontXOffset, - (internalState.CC.canvas.height / 2));\n\n  return this;\n}\n\nfunction drawGrid(yMinMax) {\n  renderScaleX(yMinMax);\n  renderScaleY(yMinMax);\n  return this;\n}\n\nfunction renderScaleX(yMinMax) {\n  var plotToDraw = plotToDrawAreaConverter(null, yMinMax);\n  var intervalX = 1000,\n      timeMin = preZeroTime * -1,\n      timeMax = postZeroTime;\n\n  for (var calculatedInterval = timeMin; calculatedInterval <= timeMax; calculatedInterval += intervalX) {\n    var scaledTimeValue = scaleValue(calculatedInterval, timeMin, timeMax, plotToDraw.draw.width),\n        fontsize = 14 * scaleFactor,\n        fontXOffset = 0 * scaleFactor,\n        fontYOffset = -20 * scaleFactor;\n\n    if (calculatedInterval === 0) {\n      internalState.CC.globalAlpha = 0.4;\n    } else {\n      internalState.CC.globalAlpha = 0.1;\n    }\n\n    internalState.CC.beginPath();\n    internalState.CC.moveTo(plotToDraw.draw.xMin + scaledTimeValue, flipYValue(plotToDraw.draw.yMin));\n    internalState.CC.lineTo(plotToDraw.draw.xMin + scaledTimeValue, flipYValue(plotToDraw.draw.yMax));\n    internalState.CC.strokeStyle = \"#dddddd\";\n    internalState.CC.stroke();\n    internalState.CC.globalAlpha = 1;\n    internalState.CC.beginPath();\n    internalState.CC.moveTo(plotToDraw.draw.xMin + scaledTimeValue, flipYValue(plotToDraw.draw.yMin));\n    internalState.CC.lineTo(plotToDraw.draw.xMin + scaledTimeValue, flipYValue(plotToDraw.draw.yMin / 1.2));\n    internalState.CC.strokeStyle = \"#dddddd\";\n    internalState.CC.stroke();\n    internalState.CC.font = fontsize + 'px Open Sans';\n    internalState.CC.fillStyle = \"#dddddd\";\n    internalState.CC.textAlign = \"center\";\n    internalState.CC.fillText(parseInt(calculatedInterval / 1000), plotToDraw.draw.xMin + scaledTimeValue + fontXOffset, flipYValue(plotToDraw.draw.yMin / 1.2 + fontYOffset));\n  }\n}\n\nfunction renderScaleY(yMinMax) {\n  var plotToDraw = plotToDrawAreaConverter(null, yMinMax),\n      scales = [100, 50, 10, 5, 1, 0.5, 0.1, 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001],\n      requiredDivisions = 4,\n      intervalY = scales.find(function (scale) {\n    return scale * requiredDivisions <= plotToDraw.plot.height;\n  });\n  var firstInterval;\n\n  if (typeof intervalY === 'undefined') {\n    return;\n  }\n\n  firstInterval = Math.ceil(plotToDraw.plot.yMin / intervalY) * intervalY;\n\n  for (var calculatedInterval = firstInterval; calculatedInterval < plotToDraw.plot.height; calculatedInterval += intervalY) {\n    var scaledMillivoltsValue = scaleValue(calculatedInterval, plotToDraw.plot.yMin, plotToDraw.plot.yMax, plotToDraw.draw.height),\n        fontsize = 14 * scaleFactor,\n        fontXOffset = -8 * scaleFactor,\n        fontYOffset = -4 * scaleFactor;\n\n    if (calculatedInterval === 0) {\n      internalState.CC.globalAlpha = 0.4;\n    } else {\n      internalState.CC.globalAlpha = 0.1;\n    }\n\n    var y = plotToDraw.draw.yMin + scaledMillivoltsValue,\n        yMax = plotToDraw.draw.yMax;\n\n    if (y <= yMax) {\n      internalState.CC.beginPath();\n      internalState.CC.moveTo(plotToDraw.draw.xMin, flipYValue(plotToDraw.draw.yMin + scaledMillivoltsValue));\n      internalState.CC.lineTo(plotToDraw.draw.xMax, flipYValue(plotToDraw.draw.yMin + scaledMillivoltsValue));\n      internalState.CC.strokeStyle = \"#dddddd\";\n      internalState.CC.stroke();\n      internalState.CC.globalAlpha = 1;\n      internalState.CC.beginPath();\n      internalState.CC.moveTo(plotToDraw.draw.xMin, flipYValue(plotToDraw.draw.yMin + scaledMillivoltsValue));\n      internalState.CC.lineTo(plotToDraw.draw.xMin / 1.2, flipYValue(plotToDraw.draw.yMin + scaledMillivoltsValue));\n      internalState.CC.strokeStyle = \"#dddddd\";\n      internalState.CC.stroke();\n      internalState.CC.font = fontsize + 'px Open Sans';\n      internalState.CC.fillStyle = \"#dddddd\";\n      internalState.CC.textAlign = \"right\";\n      internalState.CC.fillText(formatNumberForYAxis(calculatedInterval, intervalY), plotToDraw.draw.xMin / 1.2 + fontXOffset, flipYValue(plotToDraw.draw.yMin + scaledMillivoltsValue + fontYOffset));\n    }\n  }\n}\n\nfunction formatNumberForYAxis(number, intervalY) {\n  if (intervalY >= 1) {\n    return parseInt(number);\n  } else if (number == 0) {\n    return 0;\n  } else {\n    return number.toFixed(2);\n  }\n}\n\nfunction scaleValue(value, min, max, scale) {\n  var valueOffset = value - min,\n      maxOffset = max - min,\n      valueNeutralScaling = valueOffset / maxOffset;\n  return valueNeutralScaling * scale;\n}\n\nfunction flipYValue(yValue) {\n  return internalState.CC.canvas.height - yValue;\n}\n\nvar graph = {\n  drawPlot: drawPlot,\n  drawAxis: drawAxis,\n  drawLabels: drawLabels,\n  drawGrid: drawGrid,\n  initiate: initiate,\n  clearCanvas: clearCanvas\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/graph.js\n");

/***/ }),

/***/ "./resources/js/helpers.js":
/*!*********************************!*\
  !*** ./resources/js/helpers.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"helpers\": () => (/* binding */ helpers)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction initiate() {}\n\nfunction addAtemporalEventListener(eventName, callback) {\n  var scopedSelectors;\n\n  function querySelector(selectors) {\n    scopedSelectors = selectors;\n  }\n\n  ;\n\n  function manInTheMiddleCallback(event) {\n    if (event.target.matches(scopedSelectors)) {\n      callback(event);\n    }\n  }\n\n  document.addEventListener(eventName, manInTheMiddleCallback);\n  return _objectSpread(_objectSpread({}, document), {}, {\n    querySelector: querySelector\n  });\n}\n\nfunction ajaxForm(form, successCallback, failureCallback) {\n  var xhr = new XMLHttpRequest(),\n      formData = new FormData(form),\n      url = form.action;\n  xhr.open(\"POST\", url, true);\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      successCallback(JSON.parse(xhr.responseText));\n    } else if (xhr.readyState === 4) {\n      failureCallback(JSON.parse(xhr.responseText));\n    }\n  };\n\n  xhr.send(formData);\n}\n\nfunction ajaxGet(url, successCallback, failureCallback) {\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", url, true);\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      successCallback(JSON.parse(xhr.responseText));\n    } else if (xhr.readyState === 4) {\n      failureCallback(JSON.parse(xhr.responseText));\n    }\n  };\n\n  xhr.send();\n}\n\nfunction twoDimensionalMinMx(objectArray, propertyX, propertyY) {\n  var propertyData = [propertyX, propertyY],\n      min = {},\n      max = {};\n  objectArray.forEach(function (object) {\n    propertyData.forEach(function (property) {\n      if (min[property] === undefined || object[property] < min[property]) {\n        min[property] = object[property];\n      }\n\n      if (max[property] === undefined || object[property] > max[property]) {\n        max[property] = object[property];\n      }\n    });\n  });\n  return {\n    min: min,\n    max: max\n  };\n}\n\nfunction roundUpToInterval(value, interval) {\n  return Math.ceil(value / interval) * interval;\n}\n\nfunction roundDownToInterval(value, interval) {\n  return Math.floor(value / interval) * interval;\n}\n\nfunction getVirtualYFromX(_ref) {\n  var x1 = _ref.x1,\n      y1 = _ref.y1,\n      x2 = _ref.x2,\n      y2 = _ref.y2,\n      xV = _ref.xV;\n\n  if (x1 === xV) {\n    debugger;\n    return y1;\n  }\n\n  if (x2 === xV) {\n    debugger;\n    return y2;\n  }\n\n  var xScale = x2 - x1,\n      xVScale = xV - x1,\n      scalingFactor = xVScale / xScale,\n      yScale = y2 - y1,\n      yVScale = yScale * scalingFactor;\n\n  if (isNaN(yVScale + y1)) {\n    debugger;\n  }\n\n  return yVScale + y1;\n}\n\nvar helpers = {\n  initiate: initiate,\n  addAtemporalEventListener: addAtemporalEventListener,\n  ajaxForm: ajaxForm,\n  ajaxGet: ajaxGet,\n  twoDimensionalMinMx: twoDimensionalMinMx,\n  roundUpToInterval: roundUpToInterval,\n  roundDownToInterval: roundDownToInterval,\n  getVirtualYFromX: getVirtualYFromX\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/helpers.js\n");

/***/ }),

/***/ "./resources/js/serial-data-service.js":
/*!*********************************************!*\
  !*** ./resources/js/serial-data-service.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"serialDataService\": () => (/* binding */ serialDataService)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar port,\n    inputReader,\n    inputStream,\n    inputStreamBuffer = '',\n    inputOverPromise,\n    discardDataPoints = 10;\n\nfunction initiate(connectButtonSelector) {\n  var connectButton = document.querySelector(connectButtonSelector);\n  connectButton.addEventListener('click', function () {\n    clickConnect()[\"catch\"](function () {\n      document.body.classList.add('portSelectionFailure');\n    });\n  });\n}\n\nfunction clickConnect() {\n  return _clickConnect.apply(this, arguments);\n}\n\nfunction _clickConnect() {\n  _clickConnect = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee() {\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connect();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _clickConnect.apply(this, arguments);\n}\n\nfunction connect() {\n  return _connect.apply(this, arguments);\n}\n\nfunction _connect() {\n  _connect = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee2() {\n    var streamDecoder;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            streamDecoder = new TextDecoderStream();\n            _context2.next = 3;\n            return navigator.serial.requestPort();\n\n          case 3:\n            port = _context2.sent;\n            fireCustomEventOnDocument('SerialPortSelected');\n            _context2.next = 7;\n            return port.open({\n              baudRate: 9600\n            });\n\n          case 7:\n            inputOverPromise = port.readable.pipeTo(streamDecoder.writable);\n            inputStream = streamDecoder.readable;\n            inputReader = inputStream.getReader();\n            fireCustomEventOnDocument('SerialPortReading');\n            serialReadLoop();\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _connect.apply(this, arguments);\n}\n\nfunction serialReadLoop() {\n  return _serialReadLoop.apply(this, arguments);\n}\n\nfunction _serialReadLoop() {\n  _serialReadLoop = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee3() {\n    var _yield$inputReader$re, value, done, logicalUnits, dataUnit, remainder;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (false) {}\n\n            _context3.next = 3;\n            return inputReader.read();\n\n          case 3:\n            _yield$inputReader$re = _context3.sent;\n            value = _yield$inputReader$re.value;\n            done = _yield$inputReader$re.done;\n\n            if (value) {\n              logicalUnits = void 0;\n              dataUnit = value.replace(/\\r/g, '');\n              inputStreamBuffer += dataUnit;\n              logicalUnits = inputStreamBuffer.split(\"\\n\");\n\n              if (logicalUnits.length > 1) {\n                remainder = void 0;\n                remainder = logicalUnits.pop();\n                inputStreamBuffer = remainder;\n\n                if (discardDataPoints) {\n                  discardDataPoints--;\n                } else {\n                  logicalUnits.forEach(handleIncomingDataPoint);\n                }\n              }\n            }\n\n            if (!done) {\n              _context3.next = 11;\n              break;\n            }\n\n            console.log('serialReadLoop() ended', done);\n            inputReader.releaseLock();\n            return _context3.abrupt(\"break\", 13);\n\n          case 11:\n            _context3.next = 0;\n            break;\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _serialReadLoop.apply(this, arguments);\n}\n\nfunction handleIncomingDataPoint(dataPoint) {\n  var dataItems = dataPoint.split(\",\"),\n      time = parseInt(dataItems[0]);\n  fireCustomEventOnDocument('SerialDataPoint', {\n    time: time,\n    millivolts: parseFloat(dataItems[1] / 1000)\n  });\n}\n\nfunction fireCustomEventOnDocument(name) {\n  var detailsObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var data = null;\n\n  if (detailsObject !== null) {\n    data = {\n      detail: detailsObject\n    };\n  }\n\n  var customEvent = new CustomEvent(name, data);\n  document.dispatchEvent(customEvent);\n}\n\nvar serialDataService = {\n  initiate: initiate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvc2VyaWFsLWRhdGEtc2VydmljZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxJQUFKO0FBQUEsSUFDSUMsV0FESjtBQUFBLElBRUlDLFdBRko7QUFBQSxJQUdJQyxpQkFBaUIsR0FBRyxFQUh4QjtBQUFBLElBSUlDLGdCQUpKO0FBQUEsSUFLSUMsaUJBQWlCLEdBQUcsRUFMeEI7O0FBT0EsU0FBU0MsUUFBVCxDQUFrQkMscUJBQWxCLEVBQXlDO0FBQ3JDLE1BQU1DLGFBQWEsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCSCxxQkFBdkIsQ0FBdEI7QUFFQUMsRUFBQUEsYUFBYSxDQUFDRyxnQkFBZCxDQUErQixPQUEvQixFQUF3QyxZQUFNO0FBQzFDQyxJQUFBQSxZQUFZLFdBQVosQ0FBcUIsWUFBTTtBQUN2QkgsTUFBQUEsUUFBUSxDQUFDSSxJQUFULENBQWNDLFNBQWQsQ0FBd0JDLEdBQXhCLENBQTRCLHNCQUE1QjtBQUNILEtBRkQ7QUFHSCxHQUpEO0FBS0g7O1NBRWNIOzs7Ozt5SEFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFDVUksT0FBTyxFQURqQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztTQUllQTs7Ozs7b0hBQWY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ1FDLFlBQUFBLGFBRFIsR0FDd0IsSUFBSUMsaUJBQUosRUFEeEI7QUFBQTtBQUFBLG1CQUdpQkMsU0FBUyxDQUFDQyxNQUFWLENBQWlCQyxXQUFqQixFQUhqQjs7QUFBQTtBQUdJckIsWUFBQUEsSUFISjtBQUtJc0IsWUFBQUEseUJBQXlCLENBQUMsb0JBQUQsQ0FBekI7QUFMSjtBQUFBLG1CQU9VdEIsSUFBSSxDQUFDdUIsSUFBTCxDQUFVO0FBQUVDLGNBQUFBLFFBQVEsRUFBRTtBQUFaLGFBQVYsQ0FQVjs7QUFBQTtBQVFJcEIsWUFBQUEsZ0JBQWdCLEdBQUdKLElBQUksQ0FBQ3lCLFFBQUwsQ0FBY0MsTUFBZCxDQUFxQlQsYUFBYSxDQUFDVSxRQUFuQyxDQUFuQjtBQUNBekIsWUFBQUEsV0FBVyxHQUFHZSxhQUFhLENBQUNRLFFBQTVCO0FBQ0F4QixZQUFBQSxXQUFXLEdBQUdDLFdBQVcsQ0FBQzBCLFNBQVosRUFBZDtBQUVBTixZQUFBQSx5QkFBeUIsQ0FBQyxtQkFBRCxDQUF6QjtBQUNBTyxZQUFBQSxjQUFjOztBQWJsQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztTQWdCZUE7Ozs7OzJIQUFmO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLG1CQUVzQzVCLFdBQVcsQ0FBQzZCLElBQVosRUFGdEM7O0FBQUE7QUFBQTtBQUVnQkMsWUFBQUEsS0FGaEIseUJBRWdCQSxLQUZoQjtBQUV1QkMsWUFBQUEsSUFGdkIseUJBRXVCQSxJQUZ2Qjs7QUFJUSxnQkFBSUQsS0FBSixFQUFXO0FBQ0hFLGNBQUFBLFlBREc7QUFFSEMsY0FBQUEsUUFGRyxHQUVRSCxLQUFLLENBQUNJLE9BQU4sQ0FBYyxLQUFkLEVBQXFCLEVBQXJCLENBRlI7QUFJUGhDLGNBQUFBLGlCQUFpQixJQUFJK0IsUUFBckI7QUFDQUQsY0FBQUEsWUFBWSxHQUFHOUIsaUJBQWlCLENBQUNpQyxLQUFsQixDQUF3QixJQUF4QixDQUFmOztBQUVBLGtCQUFJSCxZQUFZLENBQUNJLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkI7QUFDckJDLGdCQUFBQSxTQURxQjtBQUd6QkEsZ0JBQUFBLFNBQVMsR0FBR0wsWUFBWSxDQUFDTSxHQUFiLEVBQVo7QUFDQXBDLGdCQUFBQSxpQkFBaUIsR0FBR21DLFNBQXBCOztBQUVBLG9CQUFJakMsaUJBQUosRUFBdUI7QUFDbkJBLGtCQUFBQSxpQkFBaUI7QUFDcEIsaUJBRkQsTUFFTztBQUNINEIsa0JBQUFBLFlBQVksQ0FBQ08sT0FBYixDQUFxQkMsdUJBQXJCO0FBQ0g7QUFDSjtBQUNKOztBQXZCVCxpQkF3QllULElBeEJaO0FBQUE7QUFBQTtBQUFBOztBQXlCWVUsWUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksd0JBQVosRUFBc0NYLElBQXRDO0FBQ0EvQixZQUFBQSxXQUFXLENBQUMyQyxXQUFaO0FBMUJaOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztBQWdDQSxTQUFTSCx1QkFBVCxDQUFpQ0ksU0FBakMsRUFBNEM7QUFDeEMsTUFBTUMsU0FBUyxHQUFHRCxTQUFTLENBQUNULEtBQVYsQ0FBZ0IsR0FBaEIsQ0FBbEI7QUFBQSxNQUNJVyxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0YsU0FBUyxDQUFDLENBQUQsQ0FBVixDQURuQjtBQUdBeEIsRUFBQUEseUJBQXlCLENBQUMsaUJBQUQsRUFBb0I7QUFDekN5QixJQUFBQSxJQUFJLEVBQUVBLElBRG1DO0FBRXpDRSxJQUFBQSxVQUFVLEVBQUVDLFVBQVUsQ0FBRUosU0FBUyxDQUFDLENBQUQsQ0FBVCxHQUFlLElBQWpCO0FBRm1CLEdBQXBCLENBQXpCO0FBSUg7O0FBRUQsU0FBU3hCLHlCQUFULENBQW1DNkIsSUFBbkMsRUFBK0Q7QUFBQSxNQUF0QkMsYUFBc0IsdUVBQU4sSUFBTTtBQUMzRCxNQUFJQyxJQUFJLEdBQUcsSUFBWDs7QUFFQSxNQUFJRCxhQUFhLEtBQUssSUFBdEIsRUFBNEI7QUFDeEJDLElBQUFBLElBQUksR0FBRztBQUNIQyxNQUFBQSxNQUFNLEVBQUVGO0FBREwsS0FBUDtBQUdIOztBQUVELE1BQU1HLFdBQVcsR0FBRyxJQUFJQyxXQUFKLENBQWdCTCxJQUFoQixFQUFzQkUsSUFBdEIsQ0FBcEI7QUFDQTVDLEVBQUFBLFFBQVEsQ0FBQ2dELGFBQVQsQ0FBdUJGLFdBQXZCO0FBQ0g7O0FBRU0sSUFBTUcsaUJBQWlCLEdBQUc7QUFDN0JwRCxFQUFBQSxRQUFRLEVBQVJBO0FBRDZCLENBQTFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3NlcmlhbC1kYXRhLXNlcnZpY2UuanM/MWIyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgcG9ydCxcbiAgICBpbnB1dFJlYWRlcixcbiAgICBpbnB1dFN0cmVhbSxcbiAgICBpbnB1dFN0cmVhbUJ1ZmZlciA9ICcnLFxuICAgIGlucHV0T3ZlclByb21pc2UsXG4gICAgZGlzY2FyZERhdGFQb2ludHMgPSAxMDtcblxuZnVuY3Rpb24gaW5pdGlhdGUoY29ubmVjdEJ1dHRvblNlbGVjdG9yKSB7XG4gICAgY29uc3QgY29ubmVjdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29ubmVjdEJ1dHRvblNlbGVjdG9yKTtcblxuICAgIGNvbm5lY3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNsaWNrQ29ubmVjdCgpLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgncG9ydFNlbGVjdGlvbkZhaWx1cmUnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsaWNrQ29ubmVjdCgpIHtcbiAgICBhd2FpdCBjb25uZWN0KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgbGV0IHN0cmVhbURlY29kZXIgPSBuZXcgVGV4dERlY29kZXJTdHJlYW0oKTtcblxuICAgIHBvcnQgPSBhd2FpdCBuYXZpZ2F0b3Iuc2VyaWFsLnJlcXVlc3RQb3J0KCk7XG5cbiAgICBmaXJlQ3VzdG9tRXZlbnRPbkRvY3VtZW50KCdTZXJpYWxQb3J0U2VsZWN0ZWQnKTtcblxuICAgIGF3YWl0IHBvcnQub3Blbih7IGJhdWRSYXRlOiA5NjAwIH0pO1xuICAgIGlucHV0T3ZlclByb21pc2UgPSBwb3J0LnJlYWRhYmxlLnBpcGVUbyhzdHJlYW1EZWNvZGVyLndyaXRhYmxlKTtcbiAgICBpbnB1dFN0cmVhbSA9IHN0cmVhbURlY29kZXIucmVhZGFibGU7XG4gICAgaW5wdXRSZWFkZXIgPSBpbnB1dFN0cmVhbS5nZXRSZWFkZXIoKTtcblxuICAgIGZpcmVDdXN0b21FdmVudE9uRG9jdW1lbnQoJ1NlcmlhbFBvcnRSZWFkaW5nJyk7XG4gICAgc2VyaWFsUmVhZExvb3AoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VyaWFsUmVhZExvb3AoKSB7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgaW5wdXRSZWFkZXIucmVhZCgpO1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgbGV0IGxvZ2ljYWxVbml0cztcbiAgICAgICAgICAgIGxldCBkYXRhVW5pdCA9IHZhbHVlLnJlcGxhY2UoL1xcci9nLCAnJyk7XG5cbiAgICAgICAgICAgIGlucHV0U3RyZWFtQnVmZmVyICs9IGRhdGFVbml0O1xuICAgICAgICAgICAgbG9naWNhbFVuaXRzID0gaW5wdXRTdHJlYW1CdWZmZXIuc3BsaXQoXCJcXG5cIik7XG5cbiAgICAgICAgICAgIGlmIChsb2dpY2FsVW5pdHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCByZW1haW5kZXI7XG5cbiAgICAgICAgICAgICAgICByZW1haW5kZXIgPSBsb2dpY2FsVW5pdHMucG9wKCk7XG4gICAgICAgICAgICAgICAgaW5wdXRTdHJlYW1CdWZmZXIgPSByZW1haW5kZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlzY2FyZERhdGFQb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzY2FyZERhdGFQb2ludHMtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2dpY2FsVW5pdHMuZm9yRWFjaChoYW5kbGVJbmNvbWluZ0RhdGFQb2ludCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2VyaWFsUmVhZExvb3AoKSBlbmRlZCcsIGRvbmUpO1xuICAgICAgICAgICAgaW5wdXRSZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVJbmNvbWluZ0RhdGFQb2ludChkYXRhUG9pbnQpIHtcbiAgICBjb25zdCBkYXRhSXRlbXMgPSBkYXRhUG9pbnQuc3BsaXQoXCIsXCIpLFxuICAgICAgICB0aW1lID0gcGFyc2VJbnQoZGF0YUl0ZW1zWzBdKTtcblxuICAgIGZpcmVDdXN0b21FdmVudE9uRG9jdW1lbnQoJ1NlcmlhbERhdGFQb2ludCcsIHtcbiAgICAgICAgdGltZTogdGltZSxcbiAgICAgICAgbWlsbGl2b2x0czogcGFyc2VGbG9hdCggZGF0YUl0ZW1zWzFdIC8gMTAwMCksXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpcmVDdXN0b21FdmVudE9uRG9jdW1lbnQobmFtZSwgZGV0YWlsc09iamVjdCA9IG51bGwpIHtcbiAgICBsZXQgZGF0YSA9IG51bGw7XG5cbiAgICBpZiAoZGV0YWlsc09iamVjdCAhPT0gbnVsbCkge1xuICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgZGV0YWlsOiBkZXRhaWxzT2JqZWN0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgY3VzdG9tRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQobmFtZSwgZGF0YSk7XG4gICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChjdXN0b21FdmVudCk7XG59XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxEYXRhU2VydmljZSA9IHtcbiAgICBpbml0aWF0ZVxufTtcbiJdLCJuYW1lcyI6WyJwb3J0IiwiaW5wdXRSZWFkZXIiLCJpbnB1dFN0cmVhbSIsImlucHV0U3RyZWFtQnVmZmVyIiwiaW5wdXRPdmVyUHJvbWlzZSIsImRpc2NhcmREYXRhUG9pbnRzIiwiaW5pdGlhdGUiLCJjb25uZWN0QnV0dG9uU2VsZWN0b3IiLCJjb25uZWN0QnV0dG9uIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsaWNrQ29ubmVjdCIsImJvZHkiLCJjbGFzc0xpc3QiLCJhZGQiLCJjb25uZWN0Iiwic3RyZWFtRGVjb2RlciIsIlRleHREZWNvZGVyU3RyZWFtIiwibmF2aWdhdG9yIiwic2VyaWFsIiwicmVxdWVzdFBvcnQiLCJmaXJlQ3VzdG9tRXZlbnRPbkRvY3VtZW50Iiwib3BlbiIsImJhdWRSYXRlIiwicmVhZGFibGUiLCJwaXBlVG8iLCJ3cml0YWJsZSIsImdldFJlYWRlciIsInNlcmlhbFJlYWRMb29wIiwicmVhZCIsInZhbHVlIiwiZG9uZSIsImxvZ2ljYWxVbml0cyIsImRhdGFVbml0IiwicmVwbGFjZSIsInNwbGl0IiwibGVuZ3RoIiwicmVtYWluZGVyIiwicG9wIiwiZm9yRWFjaCIsImhhbmRsZUluY29taW5nRGF0YVBvaW50IiwiY29uc29sZSIsImxvZyIsInJlbGVhc2VMb2NrIiwiZGF0YVBvaW50IiwiZGF0YUl0ZW1zIiwidGltZSIsInBhcnNlSW50IiwibWlsbGl2b2x0cyIsInBhcnNlRmxvYXQiLCJuYW1lIiwiZGV0YWlsc09iamVjdCIsImRhdGEiLCJkZXRhaWwiLCJjdXN0b21FdmVudCIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInNlcmlhbERhdGFTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/serial-data-service.js\n");

/***/ }),

/***/ "./resources/js/setup.js":
/*!*******************************!*\
  !*** ./resources/js/setup.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setup\": () => (/* binding */ setup)\n/* harmony export */ });\nfunction initiate() {\n  setupEventHandling();\n}\n\nfunction setupEventHandling() {\n  document.querySelector('#import-images').addEventListener('click', importImages);\n}\n\nfunction importImages() {\n  var xhr = new XMLHttpRequest(),\n      url = '/mylab/setup/importImages';\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      console.log(xhr.responseText);\n    } else if (xhr.readyState === 4) {\n      console.log('Something went wrong trying to obtain images.');\n    }\n  };\n\n  xhr.onerror = function () {\n    console.log('Something went very wrong trying to obtain images.');\n  };\n\n  xhr.open('GET', url, true);\n  xhr.send();\n}\n\nvar setup = {\n  initiate: initiate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvc2V0dXAuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFFBQVQsR0FBb0I7QUFDaEJDLEVBQUFBLGtCQUFrQjtBQUNyQjs7QUFFRCxTQUFTQSxrQkFBVCxHQUE4QjtBQUMxQkMsRUFBQUEsUUFBUSxDQUFDQyxhQUFULENBQXVCLGdCQUF2QixFQUF5Q0MsZ0JBQXpDLENBQTBELE9BQTFELEVBQW1FQyxZQUFuRTtBQUNIOztBQUVELFNBQVNBLFlBQVQsR0FBd0I7QUFDcEIsTUFBSUMsR0FBRyxHQUFHLElBQUlDLGNBQUosRUFBVjtBQUFBLE1BQ0lDLEdBQUcsR0FBRywyQkFEVjs7QUFHQUYsRUFBQUEsR0FBRyxDQUFDRyxrQkFBSixHQUF5QixZQUFNO0FBQzNCLFFBQUlILEdBQUcsQ0FBQ0ksVUFBSixLQUFtQixDQUFuQixJQUF3QkosR0FBRyxDQUFDSyxNQUFKLEtBQWUsR0FBM0MsRUFBZ0Q7QUFDNUNDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUCxHQUFHLENBQUNRLFlBQWhCO0FBQ0gsS0FGRCxNQUVPLElBQUlSLEdBQUcsQ0FBQ0ksVUFBSixLQUFtQixDQUF2QixFQUEwQjtBQUM3QkUsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksK0NBQVo7QUFDSDtBQUNKLEdBTkQ7O0FBUUFQLEVBQUFBLEdBQUcsQ0FBQ1MsT0FBSixHQUFjLFlBQU07QUFDaEJILElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9EQUFaO0FBQ0gsR0FGRDs7QUFJQVAsRUFBQUEsR0FBRyxDQUFDVSxJQUFKLENBQVMsS0FBVCxFQUFnQlIsR0FBaEIsRUFBcUIsSUFBckI7QUFDQUYsRUFBQUEsR0FBRyxDQUFDVyxJQUFKO0FBQ0g7O0FBRU0sSUFBTUMsS0FBSyxHQUFHO0FBQ2pCbEIsRUFBQUEsUUFBUSxFQUFSQTtBQURpQixDQUFkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3NldHVwLmpzPzA3MDMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5pdGlhdGUoKSB7XG4gICAgc2V0dXBFdmVudEhhbmRsaW5nKCk7XG59XG5cbmZ1bmN0aW9uIHNldHVwRXZlbnRIYW5kbGluZygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW1wb3J0LWltYWdlcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaW1wb3J0SW1hZ2VzKTtcbn1cblxuZnVuY3Rpb24gaW1wb3J0SW1hZ2VzKCkge1xuICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgdXJsID0gJy9teWxhYi9zZXR1cC9pbXBvcnRJbWFnZXMnO1xuXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTb21ldGhpbmcgd2VudCB3cm9uZyB0cnlpbmcgdG8gb2J0YWluIGltYWdlcy4nKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB4aHIub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHZlcnkgd3JvbmcgdHJ5aW5nIHRvIG9idGFpbiBpbWFnZXMuJyk7XG4gICAgfTtcblxuICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIHhoci5zZW5kKCk7XG59XG5cbmV4cG9ydCBjb25zdCBzZXR1cCA9IHtcbiAgICBpbml0aWF0ZVxufTtcbiJdLCJuYW1lcyI6WyJpbml0aWF0ZSIsInNldHVwRXZlbnRIYW5kbGluZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRJbWFnZXMiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInVybCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsIm9wZW4iLCJzZW5kIiwic2V0dXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/setup.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz80NzVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./resources/css/app.css":
/*!*******************************!*\
  !*** ./resources/css/app.css ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL2FwcC5jc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Nzcy9hcHAuY3NzPzVjMmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/css/app.css\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/css/app.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;