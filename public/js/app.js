/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0hBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzP2EzNGEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./resources/js/$experiment1.js":
/*!**************************************!*\
  !*** ./resources/js/$experiment1.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"experiment1\": () => (/* binding */ experiment1)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar trialTimeSetting = -7000,\n    totalTrials = 2,\n    timerFontsize = '128px',\n    scaleFactor = window.devicePixelRatio || 1,\n    canvasSelector = 'canvas#experimental-core';\nvar intervalTimer = null,\n    trialTime,\n    randomDelay,\n    trials,\n    gsrData = [],\n    eventData = [],\n    setupTrialTriggered = false,\n    emotionalImage,\n    peacefulImage,\n    emotionalImageId,\n    peacefulImageId,\n    eCC,\n    chosenImageId = null,\n    subjectUserId = null,\n    subjectAgreement = null,\n    controlMode = false,\n    navigationOveride = true,\n    controlNumber = '',\n    experimentId = '',\n    imageLoadEventHandlersRegistered = false;\n\nfunction initiate() {\n  setupPartNavigation();\n  setupFormInteractions();\n  setupGsrTrigger();\n}\n\nfunction setupPartNavigation() {\n  var availableParts = getAvailableParts(),\n      $experimentPartSections = $('.experiment section.part'),\n      $experimentPartMap = $('.experiment .experiment-structure .part');\n  $experimentPartMap.off('click.e6', \"**\");\n  $experimentPartMap.on('click.e6', function () {\n    var _this = this;\n\n    var $mainParent = $(this).parents('main');\n\n    if (!$(this).hasClass('not-yet') || navigationOveride) {\n      $mainParent.removeClass(availableParts.join(' '));\n      availableParts.forEach(function (availablePart) {\n        if ($(_this).hasClass(availablePart)) {\n          $mainParent.addClass(availablePart);\n          $experimentPartSections.addClass('hidden');\n          $experimentPartSections.filter('.' + availablePart).removeClass('hidden');\n        }\n      });\n      $experimentPartMap.removeClass('current');\n      $(this).addClass('current');\n    }\n  });\n}\n\nfunction getAvailableParts() {\n  var prefix = 'part-',\n      uptoNumber = 5;\n  var parts = [];\n\n  for (var i = 1; i <= uptoNumber; i++) {\n    parts.push(prefix + i);\n  }\n\n  return parts;\n}\n\nfunction setupFormInteractions() {\n  helpers.addAtemporalEventListener('submit', searchUser).querySelector('[name=\"ajax-search-user\"]');\n  helpers.addAtemporalEventListener('click', subjectAgreementAccepted).querySelector('#subject-agreement-accepted');\n  helpers.addAtemporalEventListener('click', subjectAgreementRejected).querySelector('#subject-agreement-rejected');\n}\n\nfunction searchUser(event) {\n  var form = event.target;\n  event.preventDefault();\n  helpers.ajaxForm(form, function (responseJson) {\n    if (responseJson.userId !== null) {\n      subjectFound(responseJson, form);\n    } else {\n      subjectNotFound(responseJson, form);\n    }\n  }, function (xhr) {\n    subjectNotFound(responseJson, form);\n  });\n}\n\nfunction subjectFound(responseJson, form) {\n  form.querySelectorAll('.message').forEach(function (spanElement) {\n    spanElement.classList.add('hidden');\n  });\n  form.querySelector('.success.message').classList.remove('hidden');\n  form.querySelectorAll('.subject-number').forEach(function (spanElement) {\n    spanElement.innerHTML = responseJson.userId;\n  });\n  subjectUserId = responseJson.userId;\n  $('.part-3').removeClass('not-yet');\n}\n\nfunction subjectNotFound(responseJson, form) {\n  form.querySelector('.failure.message').classList.remove('hidden');\n}\n\nfunction subjectAgreementAccepted() {\n  subjectAgreement = true;\n  $('.part-4').removeClass('not-yet');\n}\n\nfunction subjectAgreementRejected() {\n  subjectAgreement = false;\n  $('.part-4').removeClass('not-yet');\n}\n\nfunction setupGsrTrigger() {\n  var $buttonConnectToGSR = $('button#connect-to-gsr');\n  $buttonConnectToGSR.off('click.e7', \"**\");\n  $buttonConnectToGSR.on('click.e7', function () {\n    $(document).on('SerialDataPoint.e1', function () {\n      if (!setupTrialTriggered) {\n        setupTrialTriggered = true;\n        $buttonConnectToGSR.off('SerialDataPoint.e1', \"**\");\n        $('.part-4').addClass('experiment-started');\n        setupTrialTrigger();\n      }\n    });\n  });\n}\n\nfunction setupTrialTrigger() {\n  var $buttonBeginTrials = $('button#begin-trials');\n  $buttonBeginTrials.removeClass('neutral').removeAttr('disabled');\n  ;\n  $buttonBeginTrials.off('click.e3', \"**\");\n  $buttonBeginTrials.on('click.e3', function () {\n    $('#trials-container').removeClass('hidden');\n    trials = 0;\n    initiatePhase1();\n  });\n}\n\nfunction initiatePhase1() {\n  var $buttonBeginPhase2 = $('button#goto-phase-2');\n  $buttonBeginPhase2.off('click.e4', \"**\");\n  $buttonBeginPhase2.on('click.e4', initiatePhase2);\n\n  if (window.graph !== undefined) {\n    window.graph.stop();\n  }\n\n  logEvent(\"P1-T\".concat(trials + 1));\n  $(document).on('SerialDataPoint.e5', logDataPoint);\n  $('#phase-2, #end').addClass('hidden');\n  $('#phase-1').removeClass('hidden');\n  $('#phase-1 .trial-number').html(trials + 1);\n  $('#phase-1 .trial-totals').html(totalTrials);\n}\n\nfunction logEvent(event) {\n  eventData.push({\n    event: event,\n    computerTime: Date.now()\n  });\n}\n\nfunction logDataPoint() {\n  gsrData.push(_objectSpread(_objectSpread({}, event.detail), {}, {\n    computerTime: Date.now()\n  }));\n}\n\nfunction initiatePhase2() {\n  logEvent(\"P2-T\".concat(trials + 1));\n  $('#phase-1, #end').addClass('hidden');\n  $('#phase-2').removeClass('hidden');\n  setupTrial();\n}\n\nfunction setupTrial() {\n  trialTime = trialTimeSetting;\n  randomDelay = Math.floor(Math.random() * 5) * 1000;\n  stopIntervalProcessor();\n  setIntervalTimer();\n  getImagePairUrls();\n  setupCanvas();\n  drawTimerOnCanvas();\n}\n\nfunction stopIntervalProcessor() {\n  clearInterval(intervalTimer);\n}\n\nfunction setIntervalTimer() {\n  intervalTimer = setInterval(function () {\n    intervalProcessor();\n    trialTime = trialTime + 100;\n  }, 100);\n}\n\nfunction intervalProcessor() {\n  if (trialTime < 0) {\n    stepPhase2();\n  } else if (trialTime == 0) {\n    initiatePhase3();\n    stepPhase3();\n  } else if (trialTime < 3000) {\n    stepPhase3();\n  } else if (trialTime == 3000) {\n    initiatePhase4();\n    stepPhase4();\n  } else if (trialTime < 10000 + randomDelay) {\n    stepPhase4();\n  } else if (trialTime == 10000 + randomDelay) {\n    endTrial();\n  }\n}\n\nfunction getImagePairUrls() {\n  var xhr = new XMLHttpRequest(),\n      url = '/mylab/experiment/presentiment/1/getImages';\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      loadImagePair(xhr.responseText);\n    } else if (xhr.readyState === 4) {\n      console.log('Something went wrong trying to obtain images.');\n    }\n  };\n\n  xhr.onerror = function () {\n    console.log('Something went very wrong trying to obtain images.');\n  };\n\n  xhr.open('GET', url, true);\n  xhr.send();\n}\n\nfunction loadImagePair(response) {\n  var returnData = JSON.parse(response);\n  emotionalImage = new Image();\n  peacefulImage = new Image();\n  emotionalImage.src = returnData.emotionalImageUrl;\n  peacefulImage.src = returnData.peacefulImageUrl;\n  emotionalImageId = returnData.emotionalImageId;\n  peacefulImageId = returnData.peacefulImageId;\n\n  if (!imageLoadEventHandlersRegistered) {\n    emotionalImage.onload = function () {\n      preDrawImageOnCanvas(emotionalImage);\n      console.debug('Loaded emotional image');\n    };\n\n    peacefulImage.onload = function () {\n      preDrawImageOnCanvas(peacefulImage);\n      console.debug('Loaded peaceful image');\n    };\n\n    imageLoadEventHandlersRegistered = true;\n  }\n}\n\nfunction setupCanvas() {\n  eCC = document.querySelector(canvasSelector).getContext('2d');\n  window.addEventListener('resize', function () {\n    resizeCanvas();\n  });\n  resizeCanvas();\n}\n\nfunction resizeCanvas() {\n  eCC.canvas.width = eCC.canvas.scrollWidth * scaleFactor;\n  eCC.canvas.height = eCC.canvas.scrollHeight * scaleFactor;\n}\n\nfunction stepPhase2() {\n  drawTimerOnCanvas();\n}\n\nfunction initiatePhase3() {\n  var theRandomDecision = Math.floor(Math.random() * 2);\n  logEvent(\"P3-T\".concat(trials + 1));\n\n  if (theRandomDecision == 0) {\n    drawImageOnCanvas(peacefulImage);\n    chosenImageId = peacefulImageId;\n  } else if (theRandomDecision == 1) {\n    drawImageOnCanvas(emotionalImage);\n    chosenImageId = emotionalImageId;\n  }\n}\n\nfunction stepPhase3() {}\n\nfunction initiatePhase4() {\n  logEvent(\"P4-T\".concat(trials + 1));\n  drawTimerOnCanvas();\n}\n\nfunction stepPhase4() {\n  drawTimerOnCanvas();\n}\n\nfunction endTrial() {\n  var $gotoPart5 = $('#goto-part-5');\n  logEvent(\"PE-T\".concat(trials + 1));\n  sendDataToServer();\n  trials++;\n\n  if (trials < totalTrials) {\n    initiatePhase1();\n  } else {\n    $(document).off('SerialDataPoint.e5', \"**\");\n    $('.phase').addClass('hidden');\n    $('#end').removeClass('hidden');\n    $gotoPart5.off('click.e8', \"**\");\n    $gotoPart5.on('click.e8', function () {\n      $('#trials-container').addClass('hidden');\n      $('.experiment-structure .part-5').click();\n    });\n\n    if (window.graph !== undefined) {\n      window.graph.resume();\n    }\n\n    experimentId = '';\n    controlNumber = '';\n    $('.part-5').removeClass('not-yet');\n  }\n}\n\nfunction sendDataToServer() {\n  var xhr = new XMLHttpRequest(),\n      formData = new FormData(),\n      gsrData = formatGsrData(),\n      eventData = formatEventData(),\n      form = document.querySelector('[name=\"ajax-info\"]'),\n      url = form.action,\n      userId = form.user_id.value,\n      csrfToken = form._token.value;\n  formData.append(\"gsrData\", gsrData);\n  formData.append(\"eventData\", eventData);\n  formData.append(\"imageId\", chosenImageId);\n  formData.append(\"controlNumber\", controlNumber);\n  formData.append(\"userId\", userId);\n  formData.append(\"subjectUserId\", subjectUserId);\n  formData.append(\"experimentId\", experimentId);\n  formData.append(\"subjectAgreement\", subjectAgreement ? 1 : 0);\n  xhr.open(\"POST\", url, true);\n  xhr.setRequestHeader('X-CSRF-TOKEN', csrfToken);\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      console.log(xhr.responseText);\n      successfullTrialSubmission(JSON.parse(xhr.responseText));\n    } else if (xhr.readyState === 4) {\n      console.log(xhr.responseText);\n    }\n  };\n\n  xhr.send(formData);\n}\n\nfunction successfullTrialSubmission(jsonResponse) {\n  experimentId = jsonResponse.experimentId;\n}\n\nfunction formatGsrData() {\n  var csvTypeData = '';\n  gsrData.forEach(function (SerialDataPoint) {\n    var microvolts = Math.round(SerialDataPoint.millivolts * 1000);\n    csvTypeData = csvTypeData + \"\".concat(SerialDataPoint.computerTime, \",\").concat(SerialDataPoint.time, \",\").concat(microvolts, \"\\n\");\n  });\n  gsrData = [];\n  return csvTypeData;\n}\n\nfunction formatEventData() {\n  var csvTypeData = '';\n  eventData.forEach(function (eventDataPoint) {\n    csvTypeData = csvTypeData + \"\".concat(eventDataPoint.computerTime, \",\").concat(eventDataPoint.event, \"\\n\");\n  });\n  eventData = [];\n  return csvTypeData;\n}\n\nfunction drawTimerOnCanvas() {\n  var currentTime = (trialTime / 1000).toFixed(1),\n      sign = currentTime >= 0 ? '+' : '';\n  eCC.clearRect(0, 0, eCC.canvas.width, eCC.canvas.height);\n  eCC.font = \"200 \".concat(timerFontsize, \" \\\"Open Sans\\\"\");\n  eCC.fillStyle = \"#ffffff\";\n  eCC.textAlign = \"center\";\n  eCC.fillText(\"T\".concat(sign).concat(currentTime), eCC.canvas.width / 2, eCC.canvas.height / 2);\n}\n\nfunction preDrawImageOnCanvas(image) {\n  eCC.globalAlpha = 0.01;\n  eCC.drawImage(image, 0, 0, 0.1, 0.1);\n  eCC.globalAlpha = 1;\n}\n\nfunction drawImageOnCanvas(image) {\n  var originalWidth = image.naturalWidth,\n      originalHeight = image.naturalHeight,\n      imageWidthIfCanvasHeight = originalWidth * (eCC.canvas.height / originalHeight),\n      imageHeightIfCanvasWidth = originalHeight * (eCC.canvas.width / originalWidth),\n      constrainWidth = imageWidthIfCanvasHeight > eCC.canvas.width,\n      calculatedWidth = constrainWidth ? eCC.canvas.width : imageWidthIfCanvasHeight,\n      calculatedHeight = constrainWidth ? imageHeightIfCanvasWidth : eCC.canvas.height,\n      imageLocationX = eCC.canvas.width / 2 - calculatedWidth / 2,\n      imageLocationY = eCC.canvas.height / 2 - calculatedHeight / 2;\n  logEvent(\"BeforeImageDraw-T\".concat(trials + 1));\n  eCC.clearRect(0, 0, eCC.canvas.width, eCC.canvas.height);\n  eCC.drawImage(image, imageLocationX, imageLocationY, calculatedWidth, calculatedHeight);\n\n  if (controlMode) {\n    var red = Math.floor(Math.random() * 256),\n        green = Math.floor(Math.random() * 256),\n        blue = Math.floor(Math.random() * 256),\n        redChannel = (red + 1) * 65536 - 1,\n        greenChannel = (green + 1) * 256 - 1,\n        blueChannel = (blue + 1) * 1 - 1;\n    controlNumber = redChannel + greenChannel + blueChannel;\n    eCC.fillStyle = \"rgb(\".concat(red, \", \").concat(green, \", \").concat(blue, \")\");\n    eCC.fillRect(0.1, 0, eCC.canvas.width, eCC.canvas.height);\n  }\n\n  logEvent(\"AfterImageDraw-T\".concat(trials + 1));\n}\n\nvar experiment1 = {\n  initiate: initiate,\n  gsrData: gsrData,\n  eventData: eventData,\n  stopIntervalProcessor: stopIntervalProcessor\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/$experiment1.js\n");

/***/ }),

/***/ "./resources/js/$full-screen-alerts.js":
/*!*********************************************!*\
  !*** ./resources/js/$full-screen-alerts.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fullScreenAlerts\": () => (/* binding */ fullScreenAlerts)\n/* harmony export */ });\nfunction eventsSetup() {\n  $('body').on('click', '.full-screen-alert-dismiss', function () {\n    $(this).parents('.full-screen-alert:not(body)').remove();\n    $('body').removeClass('full-screen-alert');\n  });\n}\n\nfunction startingConditionCheck() {\n  if ($('.full-screen-alert:visible').length > 0) {\n    $('body').addClass('full-screen-alert');\n  }\n}\n\nfunction initiate() {\n  eventsSetup();\n  startingConditionCheck();\n}\n\nvar fullScreenAlerts = {\n  initiate: initiate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvJGZ1bGwtc2NyZWVuLWFsZXJ0cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsV0FBVCxHQUF1QjtBQUNuQkMsRUFBQUEsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVQyxFQUFWLENBQWEsT0FBYixFQUFzQiw0QkFBdEIsRUFBb0QsWUFBVztBQUMzREQsSUFBQUEsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRRSxPQUFSLENBQWdCLDhCQUFoQixFQUFnREMsTUFBaEQ7QUFDQUgsSUFBQUEsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVSSxXQUFWLENBQXNCLG1CQUF0QjtBQUNILEdBSEQ7QUFJSDs7QUFFRCxTQUFTQyxzQkFBVCxHQUFrQztBQUM5QixNQUFJTCxDQUFDLENBQUMsNEJBQUQsQ0FBRCxDQUFnQ00sTUFBaEMsR0FBeUMsQ0FBN0MsRUFBZ0Q7QUFDNUNOLElBQUFBLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVU8sUUFBVixDQUFtQixtQkFBbkI7QUFDSDtBQUNKOztBQUVELFNBQVNDLFFBQVQsR0FBb0I7QUFDaEJULEVBQUFBLFdBQVc7QUFDWE0sRUFBQUEsc0JBQXNCO0FBQ3pCOztBQUVNLElBQU1JLGdCQUFnQixHQUFHO0FBQzVCRCxFQUFBQSxRQUFRLEVBQVJBO0FBRDRCLENBQXpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzLyRmdWxsLXNjcmVlbi1hbGVydHMuanM/NDgyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBldmVudHNTZXR1cCgpIHtcbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5mdWxsLXNjcmVlbi1hbGVydC1kaXNtaXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykucGFyZW50cygnLmZ1bGwtc2NyZWVuLWFsZXJ0Om5vdChib2R5KScpLnJlbW92ZSgpO1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2Z1bGwtc2NyZWVuLWFsZXJ0Jyk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0aW5nQ29uZGl0aW9uQ2hlY2soKSB7XG4gICAgaWYgKCQoJy5mdWxsLXNjcmVlbi1hbGVydDp2aXNpYmxlJykubGVuZ3RoID4gMCkge1xuICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2Z1bGwtc2NyZWVuLWFsZXJ0Jyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWF0ZSgpIHtcbiAgICBldmVudHNTZXR1cCgpO1xuICAgIHN0YXJ0aW5nQ29uZGl0aW9uQ2hlY2soKTtcbn1cblxuZXhwb3J0IGNvbnN0IGZ1bGxTY3JlZW5BbGVydHMgPSB7XG4gICAgaW5pdGlhdGVcbn07Il0sIm5hbWVzIjpbImV2ZW50c1NldHVwIiwiJCIsIm9uIiwicGFyZW50cyIsInJlbW92ZSIsInJlbW92ZUNsYXNzIiwic3RhcnRpbmdDb25kaXRpb25DaGVjayIsImxlbmd0aCIsImFkZENsYXNzIiwiaW5pdGlhdGUiLCJmdWxsU2NyZWVuQWxlcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/$full-screen-alerts.js\n");

/***/ }),

/***/ "./resources/js/Classes/ExperimentalDataset.js":
/*!*****************************************************!*\
  !*** ./resources/js/Classes/ExperimentalDataset.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ExperimentalDataset\": () => (/* binding */ ExperimentalDataset)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nvar _data = /*#__PURE__*/new WeakMap();\n\nvar ExperimentalDataset = /*#__PURE__*/function () {\n  function ExperimentalDataset(experimentData) {\n    _classCallCheck(this, ExperimentalDataset);\n\n    _classPrivateFieldInitSpec(this, _data, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _data, experimentData.trials.map(function (trialData) {\n      return new TrialDataset(trialData);\n    }));\n\n    this.id = experimentData.id;\n  }\n\n  _createClass(ExperimentalDataset, [{\n    key: \"data\",\n    value: function data() {\n      return _classPrivateFieldGet(this, _data);\n    }\n  }, {\n    key: \"trial\",\n    value: function trial(id) {\n      return _classPrivateFieldGet(this, _data).filter(function (trial) {\n        return trial.id === id;\n      })[0];\n    }\n  }, {\n    key: \"trials\",\n    value: function trials() {\n      var idArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (idArray === null) {\n        return _classPrivateFieldGet(this, _data);\n      } else {\n        return _classPrivateFieldGet(this, _data).filter(function (trial) {\n          return idArray.includes(trial.id);\n        });\n      }\n    }\n  }, {\n    key: \"plotset\",\n    value: function plotset() {\n      return new Plotset(this);\n    }\n  }, {\n    key: \"yMinMax\",\n    value: function yMinMax() {\n      var min = null,\n          max = null;\n\n      _classPrivateFieldGet(this, _data).forEach(function (trial) {\n        var yMinMaxForTrial = trial.yMinMax();\n\n        if (yMinMaxForTrial.yMin < min || min === null) {\n          min = yMinMaxForTrial.yMin;\n        }\n\n        if (yMinMaxForTrial.yMax > max || max === null) {\n          max = yMinMaxForTrial.yMax;\n        }\n      });\n\n      return {\n        yMin: min,\n        yMax: max\n      };\n    }\n  }, {\n    key: \"averagePlotDataForEmotionalImages\",\n    value: function averagePlotDataForEmotionalImages() {\n      return this.averagePlotDataForFilter(function (trial) {\n        return trial.image.type.name === 'Emotional';\n      });\n    }\n  }, {\n    key: \"averagePlotDataForPeacefulImages\",\n    value: function averagePlotDataForPeacefulImages() {\n      return this.averagePlotDataForFilter(function (trial) {\n        return trial.image.type.name === 'Peaceful';\n      });\n    } // ToDo: Think about how to compensate for timing anomalies. We're just assuming correct timing to do this average.\n\n  }, {\n    key: \"averagePlotDataForFilter\",\n    value: function averagePlotDataForFilter(filterFunction) {\n      var filteredTrials = _classPrivateFieldGet(this, _data).filter(filterFunction),\n          assumedTiming = [],\n          summedPlot = [],\n          averagePlot = new Plot();\n\n      assumedTiming = filteredTrials[0].plot().map(function (datapoint) {\n        return datapoint.x;\n      });\n      filteredTrials.forEach(function (trial) {\n        trial.plot().forEach(function (datapoint, index) {\n          var _summedPlot$index;\n\n          var summedY = (_summedPlot$index = summedPlot[index]) !== null && _summedPlot$index !== void 0 ? _summedPlot$index : 0;\n          summedPlot[index] = summedY + datapoint.y;\n        });\n      });\n      summedPlot.forEach(function (summedValue, index) {\n        if (assumedTiming[index] !== undefined) {\n          averagePlot.addPoint(index, {\n            x: assumedTiming[index],\n            y: summedValue / filteredTrials.length\n          });\n        }\n      });\n      return averagePlot;\n    }\n  }]);\n\n  return ExperimentalDataset;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvQ2xhc3Nlcy9FeHBlcmltZW50YWxEYXRhc2V0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBTUEsbUJBQWI7QUFHSSwrQkFBWUMsY0FBWixFQUE0QjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUN4Qix1Q0FBYUEsY0FBYyxDQUFDQyxNQUFmLENBQXNCQyxHQUF0QixDQUEwQixVQUFDQyxTQUFELEVBQWU7QUFDbEQsYUFBTyxJQUFJQyxZQUFKLENBQWlCRCxTQUFqQixDQUFQO0FBQ0gsS0FGWSxDQUFiOztBQUdBLFNBQUtFLEVBQUwsR0FBVUwsY0FBYyxDQUFDSyxFQUF6QjtBQUNIOztBQVJMO0FBQUE7QUFBQSxXQVVJLGdCQUFPO0FBQ0gsbUNBQU8sSUFBUDtBQUNIO0FBWkw7QUFBQTtBQUFBLFdBY0ksZUFBTUEsRUFBTixFQUFVO0FBQ04sYUFBTyxtQ0FBV0MsTUFBWCxDQUFrQixVQUFDQyxLQUFELEVBQVc7QUFDaEMsZUFBT0EsS0FBSyxDQUFDRixFQUFOLEtBQWFBLEVBQXBCO0FBQ0gsT0FGTSxFQUVKLENBRkksQ0FBUDtBQUdIO0FBbEJMO0FBQUE7QUFBQSxXQW9CSSxrQkFBdUI7QUFBQSxVQUFoQkcsT0FBZ0IsdUVBQU4sSUFBTTs7QUFDbkIsVUFBSUEsT0FBTyxLQUFLLElBQWhCLEVBQXNCO0FBQ2xCLHFDQUFPLElBQVA7QUFDSCxPQUZELE1BRU87QUFDSCxlQUFPLG1DQUFXRixNQUFYLENBQWtCLFVBQUNDLEtBQUQsRUFBVztBQUNoQyxpQkFBT0MsT0FBTyxDQUFDQyxRQUFSLENBQWlCRixLQUFLLENBQUNGLEVBQXZCLENBQVA7QUFDSCxTQUZNLENBQVA7QUFHSDtBQUNKO0FBNUJMO0FBQUE7QUFBQSxXQThCSSxtQkFBVTtBQUNOLGFBQU8sSUFBSUssT0FBSixDQUFZLElBQVosQ0FBUDtBQUNIO0FBaENMO0FBQUE7QUFBQSxXQWtDSSxtQkFBVTtBQUNOLFVBQUlDLEdBQUcsR0FBRyxJQUFWO0FBQUEsVUFDSUMsR0FBRyxHQUFHLElBRFY7O0FBR0EseUNBQVdDLE9BQVgsQ0FBbUIsVUFBQ04sS0FBRCxFQUFXO0FBQzFCLFlBQU1PLGVBQWUsR0FBR1AsS0FBSyxDQUFDUSxPQUFOLEVBQXhCOztBQUVBLFlBQUlELGVBQWUsQ0FBQ0UsSUFBaEIsR0FBdUJMLEdBQXZCLElBQThCQSxHQUFHLEtBQUssSUFBMUMsRUFBZ0Q7QUFDNUNBLFVBQUFBLEdBQUcsR0FBR0csZUFBZSxDQUFDRSxJQUF0QjtBQUNIOztBQUVELFlBQUlGLGVBQWUsQ0FBQ0csSUFBaEIsR0FBdUJMLEdBQXZCLElBQThCQSxHQUFHLEtBQUssSUFBMUMsRUFBZ0Q7QUFDNUNBLFVBQUFBLEdBQUcsR0FBR0UsZUFBZSxDQUFDRyxJQUF0QjtBQUNIO0FBQ0osT0FWRDs7QUFZQSxhQUFPO0FBQ0hELFFBQUFBLElBQUksRUFBRUwsR0FESDtBQUVITSxRQUFBQSxJQUFJLEVBQUVMO0FBRkgsT0FBUDtBQUlIO0FBdERMO0FBQUE7QUFBQSxXQXdESSw2Q0FBb0M7QUFDaEMsYUFBTyxLQUFLTSx3QkFBTCxDQUE4QixVQUFDWCxLQUFELEVBQVc7QUFDNUMsZUFBT0EsS0FBSyxDQUFDWSxLQUFOLENBQVlDLElBQVosQ0FBaUJDLElBQWpCLEtBQTBCLFdBQWpDO0FBQ0gsT0FGTSxDQUFQO0FBR0g7QUE1REw7QUFBQTtBQUFBLFdBOERJLDRDQUFtQztBQUMvQixhQUFPLEtBQUtILHdCQUFMLENBQThCLFVBQUNYLEtBQUQsRUFBVztBQUM1QyxlQUFPQSxLQUFLLENBQUNZLEtBQU4sQ0FBWUMsSUFBWixDQUFpQkMsSUFBakIsS0FBMEIsVUFBakM7QUFDSCxPQUZNLENBQVA7QUFHSCxLQWxFTCxDQW9FSTs7QUFwRUo7QUFBQTtBQUFBLFdBc0VJLGtDQUF5QkMsY0FBekIsRUFBeUM7QUFDckMsVUFBSUMsY0FBYyxHQUFHLG1DQUFXakIsTUFBWCxDQUFrQmdCLGNBQWxCLENBQXJCO0FBQUEsVUFDSUUsYUFBYSxHQUFHLEVBRHBCO0FBQUEsVUFFSUMsVUFBVSxHQUFHLEVBRmpCO0FBQUEsVUFHSUMsV0FBVyxHQUFHLElBQUlDLElBQUosRUFIbEI7O0FBS0FILE1BQUFBLGFBQWEsR0FBR0QsY0FBYyxDQUFDLENBQUQsQ0FBZCxDQUFrQkssSUFBbEIsR0FBeUIxQixHQUF6QixDQUE2QixVQUFDMkIsU0FBRCxFQUFlO0FBQ3hELGVBQU9BLFNBQVMsQ0FBQ0MsQ0FBakI7QUFDSCxPQUZlLENBQWhCO0FBSUFQLE1BQUFBLGNBQWMsQ0FBQ1YsT0FBZixDQUF1QixVQUFDTixLQUFELEVBQVc7QUFDOUJBLFFBQUFBLEtBQUssQ0FBQ3FCLElBQU4sR0FBYWYsT0FBYixDQUFxQixVQUFDZ0IsU0FBRCxFQUFZRSxLQUFaLEVBQXNCO0FBQUE7O0FBQ3ZDLGNBQU1DLE9BQU8sd0JBQUdQLFVBQVUsQ0FBQ00sS0FBRCxDQUFiLGlFQUF3QixDQUFyQztBQUVBTixVQUFBQSxVQUFVLENBQUNNLEtBQUQsQ0FBVixHQUFvQkMsT0FBTyxHQUFHSCxTQUFTLENBQUNJLENBQXhDO0FBQ0gsU0FKRDtBQUtILE9BTkQ7QUFRQVIsTUFBQUEsVUFBVSxDQUFDWixPQUFYLENBQW1CLFVBQUNxQixXQUFELEVBQWNILEtBQWQsRUFBd0I7QUFDdkMsWUFBSVAsYUFBYSxDQUFDTyxLQUFELENBQWIsS0FBeUJJLFNBQTdCLEVBQXdDO0FBQ3BDVCxVQUFBQSxXQUFXLENBQUNVLFFBQVosQ0FBcUJMLEtBQXJCLEVBQTRCO0FBQ3hCRCxZQUFBQSxDQUFDLEVBQUVOLGFBQWEsQ0FBQ08sS0FBRCxDQURRO0FBRXhCRSxZQUFBQSxDQUFDLEVBQUVDLFdBQVcsR0FBR1gsY0FBYyxDQUFDYztBQUZSLFdBQTVCO0FBSUg7QUFDSixPQVBEO0FBU0EsYUFBT1gsV0FBUDtBQUNIO0FBbEdMOztBQUFBO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvQ2xhc3Nlcy9FeHBlcmltZW50YWxEYXRhc2V0LmpzPzRmMGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEV4cGVyaW1lbnRhbERhdGFzZXQge1xuICAgICNkYXRhO1xuXG4gICAgY29uc3RydWN0b3IoZXhwZXJpbWVudERhdGEpIHtcbiAgICAgICAgdGhpcy4jZGF0YSA9IGV4cGVyaW1lbnREYXRhLnRyaWFscy5tYXAoKHRyaWFsRGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmlhbERhdGFzZXQodHJpYWxEYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaWQgPSBleHBlcmltZW50RGF0YS5pZDtcbiAgICB9XG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZGF0YTtcbiAgICB9XG5cbiAgICB0cmlhbChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZGF0YS5maWx0ZXIoKHRyaWFsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdHJpYWwuaWQgPT09IGlkO1xuICAgICAgICB9KVswXTtcbiAgICB9XG5cbiAgICB0cmlhbHMoaWRBcnJheSA9IG51bGwpIHtcbiAgICAgICAgaWYgKGlkQXJyYXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiNkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuI2RhdGEuZmlsdGVyKCh0cmlhbCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZEFycmF5LmluY2x1ZGVzKHRyaWFsLmlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxvdHNldCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQbG90c2V0KHRoaXMpO1xuICAgIH1cblxuICAgIHlNaW5NYXgoKSB7XG4gICAgICAgIGxldCBtaW4gPSBudWxsLFxuICAgICAgICAgICAgbWF4ID0gbnVsbDtcblxuICAgICAgICB0aGlzLiNkYXRhLmZvckVhY2goKHRyaWFsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB5TWluTWF4Rm9yVHJpYWwgPSB0cmlhbC55TWluTWF4KCk7XG5cbiAgICAgICAgICAgIGlmICh5TWluTWF4Rm9yVHJpYWwueU1pbiA8IG1pbiB8fCBtaW4gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSB5TWluTWF4Rm9yVHJpYWwueU1pbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHlNaW5NYXhGb3JUcmlhbC55TWF4ID4gbWF4IHx8IG1heCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG1heCA9IHlNaW5NYXhGb3JUcmlhbC55TWF4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeU1pbjogbWluLFxuICAgICAgICAgICAgeU1heDogbWF4LFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXZlcmFnZVBsb3REYXRhRm9yRW1vdGlvbmFsSW1hZ2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdmVyYWdlUGxvdERhdGFGb3JGaWx0ZXIoKHRyaWFsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdHJpYWwuaW1hZ2UudHlwZS5uYW1lID09PSAnRW1vdGlvbmFsJztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXZlcmFnZVBsb3REYXRhRm9yUGVhY2VmdWxJbWFnZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF2ZXJhZ2VQbG90RGF0YUZvckZpbHRlcigodHJpYWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0cmlhbC5pbWFnZS50eXBlLm5hbWUgPT09ICdQZWFjZWZ1bCc7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRvRG86IFRoaW5rIGFib3V0IGhvdyB0byBjb21wZW5zYXRlIGZvciB0aW1pbmcgYW5vbWFsaWVzLiBXZSdyZSBqdXN0IGFzc3VtaW5nIGNvcnJlY3QgdGltaW5nIHRvIGRvIHRoaXMgYXZlcmFnZS5cblxuICAgIGF2ZXJhZ2VQbG90RGF0YUZvckZpbHRlcihmaWx0ZXJGdW5jdGlvbikge1xuICAgICAgICBsZXQgZmlsdGVyZWRUcmlhbHMgPSB0aGlzLiNkYXRhLmZpbHRlcihmaWx0ZXJGdW5jdGlvbiksXG4gICAgICAgICAgICBhc3N1bWVkVGltaW5nID0gW10sXG4gICAgICAgICAgICBzdW1tZWRQbG90ID0gW10sXG4gICAgICAgICAgICBhdmVyYWdlUGxvdCA9IG5ldyBQbG90KCk7XG5cbiAgICAgICAgYXNzdW1lZFRpbWluZyA9IGZpbHRlcmVkVHJpYWxzWzBdLnBsb3QoKS5tYXAoKGRhdGFwb2ludCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFwb2ludC54O1xuICAgICAgICB9KTtcblxuICAgICAgICBmaWx0ZXJlZFRyaWFscy5mb3JFYWNoKCh0cmlhbCkgPT4ge1xuICAgICAgICAgICAgdHJpYWwucGxvdCgpLmZvckVhY2goKGRhdGFwb2ludCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdW1tZWRZID0gc3VtbWVkUGxvdFtpbmRleF0gPz8gMDtcblxuICAgICAgICAgICAgICAgIHN1bW1lZFBsb3RbaW5kZXhdID0gc3VtbWVkWSArIGRhdGFwb2ludC55O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN1bW1lZFBsb3QuZm9yRWFjaCgoc3VtbWVkVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoYXNzdW1lZFRpbWluZ1tpbmRleF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGF2ZXJhZ2VQbG90LmFkZFBvaW50KGluZGV4LCB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGFzc3VtZWRUaW1pbmdbaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICB5OiBzdW1tZWRWYWx1ZSAvIGZpbHRlcmVkVHJpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGF2ZXJhZ2VQbG90O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJFeHBlcmltZW50YWxEYXRhc2V0IiwiZXhwZXJpbWVudERhdGEiLCJ0cmlhbHMiLCJtYXAiLCJ0cmlhbERhdGEiLCJUcmlhbERhdGFzZXQiLCJpZCIsImZpbHRlciIsInRyaWFsIiwiaWRBcnJheSIsImluY2x1ZGVzIiwiUGxvdHNldCIsIm1pbiIsIm1heCIsImZvckVhY2giLCJ5TWluTWF4Rm9yVHJpYWwiLCJ5TWluTWF4IiwieU1pbiIsInlNYXgiLCJhdmVyYWdlUGxvdERhdGFGb3JGaWx0ZXIiLCJpbWFnZSIsInR5cGUiLCJuYW1lIiwiZmlsdGVyRnVuY3Rpb24iLCJmaWx0ZXJlZFRyaWFscyIsImFzc3VtZWRUaW1pbmciLCJzdW1tZWRQbG90IiwiYXZlcmFnZVBsb3QiLCJQbG90IiwicGxvdCIsImRhdGFwb2ludCIsIngiLCJpbmRleCIsInN1bW1lZFkiLCJ5Iiwic3VtbWVkVmFsdWUiLCJ1bmRlZmluZWQiLCJhZGRQb2ludCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/Classes/ExperimentalDataset.js\n");

/***/ }),

/***/ "./resources/js/Classes/GlobalDataset.js":
/*!***********************************************!*\
  !*** ./resources/js/Classes/GlobalDataset.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GlobalDataset\": () => (/* binding */ GlobalDataset)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar GlobalDataset = /*#__PURE__*/function () {\n  function GlobalDataset(rawData) {\n    _classCallCheck(this, GlobalDataset);\n\n    this.data = rawData.experimentalData.map(function (experimentData) {\n      return new ExperimentalDataset(experimentData);\n    });\n  }\n\n  _createClass(GlobalDataset, [{\n    key: \"experiment\",\n    value: function experiment(id) {\n      return this.data.filter(function (experiment) {\n        return experiment.id === id;\n      })[0];\n    }\n  }, {\n    key: \"experiments\",\n    value: function experiments() {\n      var idArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (idArray === null) {\n        return this.data;\n      } else {\n        return this.data.filter(function (experiment) {\n          return idArray.includes(experiment.id);\n        });\n      }\n    }\n  }]);\n\n  return GlobalDataset;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvQ2xhc3Nlcy9HbG9iYWxEYXRhc2V0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBTyxJQUFNQSxhQUFiO0FBQ0kseUJBQVlDLE9BQVosRUFBcUI7QUFBQTs7QUFDakIsU0FBS0MsSUFBTCxHQUFZRCxPQUFPLENBQUNFLGdCQUFSLENBQXlCQyxHQUF6QixDQUE2QixVQUFDQyxjQUFELEVBQW9CO0FBQ3pELGFBQU8sSUFBSUMsbUJBQUosQ0FBd0JELGNBQXhCLENBQVA7QUFDSCxLQUZXLENBQVo7QUFHSDs7QUFMTDtBQUFBO0FBQUEsV0FPSSxvQkFBV0UsRUFBWCxFQUFlO0FBQ1gsYUFBTyxLQUFLTCxJQUFMLENBQVVNLE1BQVYsQ0FBaUIsVUFBQ0MsVUFBRCxFQUFnQjtBQUNwQyxlQUFPQSxVQUFVLENBQUNGLEVBQVgsS0FBa0JBLEVBQXpCO0FBQ0gsT0FGTSxFQUVKLENBRkksQ0FBUDtBQUdIO0FBWEw7QUFBQTtBQUFBLFdBYUksdUJBQTRCO0FBQUEsVUFBaEJHLE9BQWdCLHVFQUFOLElBQU07O0FBQ3hCLFVBQUlBLE9BQU8sS0FBSyxJQUFoQixFQUFzQjtBQUNsQixlQUFPLEtBQUtSLElBQVo7QUFDSCxPQUZELE1BRU87QUFDSCxlQUFPLEtBQUtBLElBQUwsQ0FBVU0sTUFBVixDQUFpQixVQUFDQyxVQUFELEVBQWdCO0FBQ3BDLGlCQUFPQyxPQUFPLENBQUNDLFFBQVIsQ0FBaUJGLFVBQVUsQ0FBQ0YsRUFBNUIsQ0FBUDtBQUNILFNBRk0sQ0FBUDtBQUdIO0FBQ0o7QUFyQkw7O0FBQUE7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9DbGFzc2VzL0dsb2JhbERhdGFzZXQuanM/YzU2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgR2xvYmFsRGF0YXNldCB7XG4gICAgY29uc3RydWN0b3IocmF3RGF0YSkge1xuICAgICAgICB0aGlzLmRhdGEgPSByYXdEYXRhLmV4cGVyaW1lbnRhbERhdGEubWFwKChleHBlcmltZW50RGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFeHBlcmltZW50YWxEYXRhc2V0KGV4cGVyaW1lbnREYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZXhwZXJpbWVudChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmZpbHRlcigoZXhwZXJpbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGVyaW1lbnQuaWQgPT09IGlkO1xuICAgICAgICB9KVswXTtcbiAgICB9XG5cbiAgICBleHBlcmltZW50cyhpZEFycmF5ID0gbnVsbCkge1xuICAgICAgICBpZiAoaWRBcnJheSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEuZmlsdGVyKChleHBlcmltZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkQXJyYXkuaW5jbHVkZXMoZXhwZXJpbWVudC5pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJHbG9iYWxEYXRhc2V0IiwicmF3RGF0YSIsImRhdGEiLCJleHBlcmltZW50YWxEYXRhIiwibWFwIiwiZXhwZXJpbWVudERhdGEiLCJFeHBlcmltZW50YWxEYXRhc2V0IiwiaWQiLCJmaWx0ZXIiLCJleHBlcmltZW50IiwiaWRBcnJheSIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/Classes/GlobalDataset.js\n");

/***/ }),

/***/ "./resources/js/Classes/Plot.js":
/*!**************************************!*\
  !*** ./resources/js/Classes/Plot.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Plot\": () => (/* binding */ Plot)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Plot = /*#__PURE__*/function () {\n  function Plot(plotData) {\n    _classCallCheck(this, Plot);\n\n    this.data = plotData !== null && plotData !== void 0 ? plotData : [];\n  }\n\n  _createClass(Plot, [{\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      return this.data.forEach(callback, thisArg);\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(callback, initialValue) {\n      if (initialValue === undefined) {\n        return this.data.reduce(callback);\n      } else {\n        return this.data.reduce(callback, initialValue);\n      }\n    }\n  }, {\n    key: \"map\",\n    value: function map(callback, thisArg) {\n      return this.data.map(callback, thisArg);\n    }\n  }, {\n    key: \"lowestValues\",\n    value: function lowestValues() {\n      return this.data.reduce(function (previous, current) {\n        return {\n          x: previous.x < current.x ? previous.x : current.x,\n          y: previous.y < current.y ? previous.y : current.y\n        };\n      });\n    }\n  }, {\n    key: \"highestValues\",\n    value: function highestValues() {\n      return this.data.reduce(function (previous, current) {\n        return {\n          x: previous.x > current.x ? previous.x : current.x,\n          y: previous.y > current.y ? previous.y : current.y\n        };\n      });\n    }\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(index, plotpoint) {\n      this.data[index] = plotpoint;\n    }\n  }]);\n\n  return Plot;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvQ2xhc3Nlcy9QbG90LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBTyxJQUFNQSxJQUFiO0FBQ0ksZ0JBQVlDLFFBQVosRUFBc0I7QUFBQTs7QUFDbEIsU0FBS0MsSUFBTCxHQUFZRCxRQUFaLGFBQVlBLFFBQVosY0FBWUEsUUFBWixHQUF3QixFQUF4QjtBQUNIOztBQUhMO0FBQUE7QUFBQSxXQUtJLGlCQUFRRSxRQUFSLEVBQWtCQyxPQUFsQixFQUEyQjtBQUN2QixhQUFPLEtBQUtGLElBQUwsQ0FBVUcsT0FBVixDQUFrQkYsUUFBbEIsRUFBNEJDLE9BQTVCLENBQVA7QUFDSDtBQVBMO0FBQUE7QUFBQSxXQVNJLGdCQUFPRCxRQUFQLEVBQWlCRyxZQUFqQixFQUErQjtBQUMzQixVQUFJQSxZQUFZLEtBQUtDLFNBQXJCLEVBQWdDO0FBQzVCLGVBQU8sS0FBS0wsSUFBTCxDQUFVTSxNQUFWLENBQWlCTCxRQUFqQixDQUFQO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsZUFBTyxLQUFLRCxJQUFMLENBQVVNLE1BQVYsQ0FBaUJMLFFBQWpCLEVBQTJCRyxZQUEzQixDQUFQO0FBQ0g7QUFDSjtBQWZMO0FBQUE7QUFBQSxXQWlCSSxhQUFJSCxRQUFKLEVBQWNDLE9BQWQsRUFBdUI7QUFDbkIsYUFBTyxLQUFLRixJQUFMLENBQVVPLEdBQVYsQ0FBY04sUUFBZCxFQUF3QkMsT0FBeEIsQ0FBUDtBQUNIO0FBbkJMO0FBQUE7QUFBQSxXQXFCSSx3QkFBZTtBQUNYLGFBQU8sS0FBS0YsSUFBTCxDQUFVTSxNQUFWLENBQWlCLFVBQUNFLFFBQUQsRUFBV0MsT0FBWCxFQUF1QjtBQUMzQyxlQUFPO0FBQ0hDLFVBQUFBLENBQUMsRUFBR0YsUUFBUSxDQUFDRSxDQUFULEdBQWFELE9BQU8sQ0FBQ0MsQ0FBdEIsR0FBMkJGLFFBQVEsQ0FBQ0UsQ0FBcEMsR0FBd0NELE9BQU8sQ0FBQ0MsQ0FEaEQ7QUFFSEMsVUFBQUEsQ0FBQyxFQUFHSCxRQUFRLENBQUNHLENBQVQsR0FBYUYsT0FBTyxDQUFDRSxDQUF0QixHQUEyQkgsUUFBUSxDQUFDRyxDQUFwQyxHQUF3Q0YsT0FBTyxDQUFDRTtBQUZoRCxTQUFQO0FBSUgsT0FMTSxDQUFQO0FBTUg7QUE1Qkw7QUFBQTtBQUFBLFdBOEJJLHlCQUFnQjtBQUNaLGFBQU8sS0FBS1gsSUFBTCxDQUFVTSxNQUFWLENBQWlCLFVBQUNFLFFBQUQsRUFBV0MsT0FBWCxFQUF1QjtBQUMzQyxlQUFPO0FBQ0hDLFVBQUFBLENBQUMsRUFBR0YsUUFBUSxDQUFDRSxDQUFULEdBQWFELE9BQU8sQ0FBQ0MsQ0FBdEIsR0FBMkJGLFFBQVEsQ0FBQ0UsQ0FBcEMsR0FBd0NELE9BQU8sQ0FBQ0MsQ0FEaEQ7QUFFSEMsVUFBQUEsQ0FBQyxFQUFHSCxRQUFRLENBQUNHLENBQVQsR0FBYUYsT0FBTyxDQUFDRSxDQUF0QixHQUEyQkgsUUFBUSxDQUFDRyxDQUFwQyxHQUF3Q0YsT0FBTyxDQUFDRTtBQUZoRCxTQUFQO0FBSUgsT0FMTSxDQUFQO0FBTUg7QUFyQ0w7QUFBQTtBQUFBLFdBdUNJLGtCQUFTQyxLQUFULEVBQWdCQyxTQUFoQixFQUEyQjtBQUN2QixXQUFLYixJQUFMLENBQVVZLEtBQVYsSUFBbUJDLFNBQW5CO0FBQ0g7QUF6Q0w7O0FBQUE7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9DbGFzc2VzL1Bsb3QuanM/MzI2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUGxvdCB7XG4gICAgY29uc3RydWN0b3IocGxvdERhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gcGxvdERhdGEgPz8gW107XG4gICAgfVxuXG4gICAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpO1xuICAgIH1cblxuICAgIHJlZHVjZShjYWxsYmFjaywgaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIGlmIChpbml0aWFsVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5yZWR1Y2UoY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5yZWR1Y2UoY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtYXAoY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tYXAoY2FsbGJhY2ssIHRoaXNBcmcpO1xuICAgIH1cblxuICAgIGxvd2VzdFZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5yZWR1Y2UoKHByZXZpb3VzLCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHg6IChwcmV2aW91cy54IDwgY3VycmVudC54KSA/IHByZXZpb3VzLnggOiBjdXJyZW50LngsXG4gICAgICAgICAgICAgICAgeTogKHByZXZpb3VzLnkgPCBjdXJyZW50LnkpID8gcHJldmlvdXMueSA6IGN1cnJlbnQueSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhpZ2hlc3RWYWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEucmVkdWNlKChwcmV2aW91cywgY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB4OiAocHJldmlvdXMueCA+IGN1cnJlbnQueCkgPyBwcmV2aW91cy54IDogY3VycmVudC54LFxuICAgICAgICAgICAgICAgIHk6IChwcmV2aW91cy55ID4gY3VycmVudC55KSA/IHByZXZpb3VzLnkgOiBjdXJyZW50LnksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRQb2ludChpbmRleCwgcGxvdHBvaW50KSB7XG4gICAgICAgIHRoaXMuZGF0YVtpbmRleF0gPSBwbG90cG9pbnQ7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlBsb3QiLCJwbG90RGF0YSIsImRhdGEiLCJjYWxsYmFjayIsInRoaXNBcmciLCJmb3JFYWNoIiwiaW5pdGlhbFZhbHVlIiwidW5kZWZpbmVkIiwicmVkdWNlIiwibWFwIiwicHJldmlvdXMiLCJjdXJyZW50IiwieCIsInkiLCJpbmRleCIsInBsb3Rwb2ludCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/Classes/Plot.js\n");

/***/ }),

/***/ "./resources/js/Classes/Plotset.js":
/*!*****************************************!*\
  !*** ./resources/js/Classes/Plotset.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Plotset\": () => (/* binding */ Plotset)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nvar _data = /*#__PURE__*/new WeakMap();\n\n/*\n * A lazy loading Plotset data class.\n */\nvar Plotset = /*#__PURE__*/function () {\n  function Plotset(datasource) {\n    _classCallCheck(this, Plotset);\n\n    _classPrivateFieldInitSpec(this, _data, {\n      writable: true,\n      value: void 0\n    });\n\n    this.datasource = datasource !== null && datasource !== void 0 ? datasource : null;\n    this.filters = [];\n\n    _classPrivateFieldSet(this, _data, false);\n  }\n\n  _createClass(Plotset, [{\n    key: \"filter\",\n    value: function filter(callback) {\n      this.filters.push(callback);\n      return this;\n    }\n  }, {\n    key: \"actualiseData\",\n    value: function actualiseData() {\n      var sourceData = this.datasource.data(),\n          filteredData = this.actualiseFilter(sourceData),\n          flattenedData = this.flattenData(filteredData);\n\n      _classPrivateFieldSet(this, _data, flattenedData);\n    }\n  }, {\n    key: \"actualiseFilter\",\n    value: function actualiseFilter(sourceData) {\n      var _this = this;\n\n      if (this.filters.length > 0) {\n        return sourceData.filter(function (dataItems) {\n          return _this.filters.every(function (filter) {\n            return filter(dataItems);\n          });\n        });\n      } else {\n        return sourceData;\n      }\n    }\n  }, {\n    key: \"flattenData\",\n    value: function flattenData(dataItems) {\n      return dataItems.map(function (dataItem) {\n        return dataItem.plot();\n      });\n    }\n  }, {\n    key: \"data\",\n    value: function data() {\n      if (!_classPrivateFieldGet(this, _data)) {\n        this.actualiseData();\n      }\n\n      return _classPrivateFieldGet(this, _data);\n    }\n  }, {\n    key: \"averagePlot\",\n    value: function averagePlot() {\n      if (this.datasource instanceof ExperimentalDataset) {\n        return this.averagePlotFromExperimentalDataset();\n      } else {\n        console.error('Unfamiliar datasource provided.');\n      }\n    }\n  }, {\n    key: \"averagePlotFromExperimentalDataset\",\n    value: function averagePlotFromExperimentalDataset() {\n      console.debug(this.data());\n    }\n  }]);\n\n  return Plotset;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvQ2xhc3Nlcy9QbG90c2V0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRU8sSUFBTUEsT0FBYjtBQUdJLG1CQUFZQyxVQUFaLEVBQXdCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ3BCLFNBQUtBLFVBQUwsR0FBa0JBLFVBQWxCLGFBQWtCQSxVQUFsQixjQUFrQkEsVUFBbEIsR0FBZ0MsSUFBaEM7QUFDQSxTQUFLQyxPQUFMLEdBQWUsRUFBZjs7QUFDQSx1Q0FBYSxLQUFiO0FBQ0g7O0FBUEw7QUFBQTtBQUFBLFdBU0ksZ0JBQU9DLFFBQVAsRUFBaUI7QUFDYixXQUFLRCxPQUFMLENBQWFFLElBQWIsQ0FBa0JELFFBQWxCO0FBQ0EsYUFBTyxJQUFQO0FBQ0g7QUFaTDtBQUFBO0FBQUEsV0FjSSx5QkFBZ0I7QUFDWixVQUFNRSxVQUFVLEdBQUcsS0FBS0osVUFBTCxDQUFnQkssSUFBaEIsRUFBbkI7QUFBQSxVQUNJQyxZQUFZLEdBQUcsS0FBS0MsZUFBTCxDQUFxQkgsVUFBckIsQ0FEbkI7QUFBQSxVQUVJSSxhQUFhLEdBQUcsS0FBS0MsV0FBTCxDQUFpQkgsWUFBakIsQ0FGcEI7O0FBSUEseUNBQWFFLGFBQWI7QUFDSDtBQXBCTDtBQUFBO0FBQUEsV0FzQkkseUJBQWdCSixVQUFoQixFQUE0QjtBQUFBOztBQUN4QixVQUFJLEtBQUtILE9BQUwsQ0FBYVMsTUFBYixHQUFzQixDQUExQixFQUE2QjtBQUN6QixlQUFPTixVQUFVLENBQUNPLE1BQVgsQ0FBa0IsVUFBQ0MsU0FBRCxFQUFlO0FBQ3BDLGlCQUFPLEtBQUksQ0FBQ1gsT0FBTCxDQUFhWSxLQUFiLENBQW1CLFVBQUNGLE1BQUQsRUFBWTtBQUNsQyxtQkFBT0EsTUFBTSxDQUFDQyxTQUFELENBQWI7QUFDSCxXQUZNLENBQVA7QUFHSCxTQUpNLENBQVA7QUFLSCxPQU5ELE1BTU87QUFDSCxlQUFPUixVQUFQO0FBQ0g7QUFDSjtBQWhDTDtBQUFBO0FBQUEsV0FrQ0kscUJBQVlRLFNBQVosRUFBdUI7QUFDbkIsYUFBT0EsU0FBUyxDQUFDRSxHQUFWLENBQWMsVUFBQ0MsUUFBRCxFQUFjO0FBQy9CLGVBQU9BLFFBQVEsQ0FBQ0MsSUFBVCxFQUFQO0FBQ0gsT0FGTSxDQUFQO0FBR0g7QUF0Q0w7QUFBQTtBQUFBLFdBd0NJLGdCQUFPO0FBQ0gsVUFBSSx1QkFBRSxJQUFGLFFBQUosRUFBa0I7QUFDZCxhQUFLQyxhQUFMO0FBQ0g7O0FBQ0QsbUNBQU8sSUFBUDtBQUNIO0FBN0NMO0FBQUE7QUFBQSxXQStDSSx1QkFBYztBQUNWLFVBQUksS0FBS2pCLFVBQUwsWUFBMkJrQixtQkFBL0IsRUFBb0Q7QUFDaEQsZUFBTyxLQUFLQyxrQ0FBTCxFQUFQO0FBQ0gsT0FGRCxNQUVPO0FBQ0hDLFFBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLGlDQUFkO0FBQ0g7QUFDSjtBQXJETDtBQUFBO0FBQUEsV0F1REksOENBQXFDO0FBRWpDRCxNQUFBQSxPQUFPLENBQUNFLEtBQVIsQ0FBYyxLQUFLakIsSUFBTCxFQUFkO0FBQ0g7QUExREw7O0FBQUE7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9DbGFzc2VzL1Bsb3RzZXQuanM/NzJlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQSBsYXp5IGxvYWRpbmcgUGxvdHNldCBkYXRhIGNsYXNzLlxuICovXG5cbmV4cG9ydCBjbGFzcyBQbG90c2V0IHtcbiAgICAjZGF0YTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGFzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5kYXRhc291cmNlID0gZGF0YXNvdXJjZSA/PyBudWxsO1xuICAgICAgICB0aGlzLmZpbHRlcnMgPSBbXTtcbiAgICAgICAgdGhpcy4jZGF0YSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZpbHRlcihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmZpbHRlcnMucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFjdHVhbGlzZURhdGEoKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZURhdGEgPSB0aGlzLmRhdGFzb3VyY2UuZGF0YSgpLFxuICAgICAgICAgICAgZmlsdGVyZWREYXRhID0gdGhpcy5hY3R1YWxpc2VGaWx0ZXIoc291cmNlRGF0YSksXG4gICAgICAgICAgICBmbGF0dGVuZWREYXRhID0gdGhpcy5mbGF0dGVuRGF0YShmaWx0ZXJlZERhdGEpO1xuXG4gICAgICAgIHRoaXMuI2RhdGEgPSBmbGF0dGVuZWREYXRhO1xuICAgIH1cblxuICAgIGFjdHVhbGlzZUZpbHRlcihzb3VyY2VEYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZURhdGEuZmlsdGVyKChkYXRhSXRlbXMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJzLmV2ZXJ5KChmaWx0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcihkYXRhSXRlbXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlRGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZsYXR0ZW5EYXRhKGRhdGFJdGVtcykge1xuICAgICAgICByZXR1cm4gZGF0YUl0ZW1zLm1hcCgoZGF0YUl0ZW0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhSXRlbS5wbG90KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRhdGEoKSB7XG4gICAgICAgIGlmICghIHRoaXMuI2RhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0dWFsaXNlRGF0YSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiNkYXRhO1xuICAgIH1cblxuICAgIGF2ZXJhZ2VQbG90KCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhc291cmNlIGluc3RhbmNlb2YgRXhwZXJpbWVudGFsRGF0YXNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXZlcmFnZVBsb3RGcm9tRXhwZXJpbWVudGFsRGF0YXNldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5mYW1pbGlhciBkYXRhc291cmNlIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXZlcmFnZVBsb3RGcm9tRXhwZXJpbWVudGFsRGF0YXNldCgpIHtcblxuICAgICAgICBjb25zb2xlLmRlYnVnKHRoaXMuZGF0YSgpKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUGxvdHNldCIsImRhdGFzb3VyY2UiLCJmaWx0ZXJzIiwiY2FsbGJhY2siLCJwdXNoIiwic291cmNlRGF0YSIsImRhdGEiLCJmaWx0ZXJlZERhdGEiLCJhY3R1YWxpc2VGaWx0ZXIiLCJmbGF0dGVuZWREYXRhIiwiZmxhdHRlbkRhdGEiLCJsZW5ndGgiLCJmaWx0ZXIiLCJkYXRhSXRlbXMiLCJldmVyeSIsIm1hcCIsImRhdGFJdGVtIiwicGxvdCIsImFjdHVhbGlzZURhdGEiLCJFeHBlcmltZW50YWxEYXRhc2V0IiwiYXZlcmFnZVBsb3RGcm9tRXhwZXJpbWVudGFsRGF0YXNldCIsImNvbnNvbGUiLCJlcnJvciIsImRlYnVnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/Classes/Plotset.js\n");

/***/ }),

/***/ "./resources/js/Classes/TrialDataset.js":
/*!**********************************************!*\
  !*** ./resources/js/Classes/TrialDataset.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TrialDataset\": () => (/* binding */ TrialDataset)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar TrialDataset = /*#__PURE__*/function () {\n  function TrialDataset(trialData) {\n    var _this = this;\n\n    _classCallCheck(this, TrialDataset);\n\n    this.data = trialData.gsr_data.split(\"\\n\").map(function (lineData) {\n      return lineData.split(\",\").map(_this.numericParsing);\n    });\n    this.jsTimeField = 0;\n    this.mcTimeField = 1;\n    this.microvoltField = 2;\n    this.image = trialData.image;\n    this.id = trialData.id; // ToDo: think about implementing the line below in a better way.\n\n    this.limit(20);\n  }\n\n  _createClass(TrialDataset, [{\n    key: \"numericParsing\",\n    value: function numericParsing(lineElement) {\n      var integerVersion = parseInt(lineElement, 10),\n          floatVersion = parseInt(lineElement, 10),\n          number = integerVersion === floatVersion ? integerVersion : floatVersion;\n      return isNaN(lineElement) ? lineElement : number;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit() {\n      var _this2 = this;\n\n      var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;\n      var earliestTime = null,\n          millisecondLimit = seconds * 1000;\n      this.data = this.data.filter(function (datapoint) {\n        var dataPointTime = parseInt(datapoint[_this2.mcTimeField], 10);\n\n        if (earliestTime === null) {\n          earliestTime = dataPointTime;\n        }\n\n        return dataPointTime <= earliestTime + millisecondLimit;\n      });\n    }\n  }, {\n    key: \"plot\",\n    value: function plot() {\n      var _this3 = this;\n\n      var plotData = this.data.map(function (datapoint) {\n        return {\n          x: parseInt(datapoint[_this3.mcTimeField], 10),\n          y: parseInt(datapoint[_this3.microvoltField], 10)\n        };\n      });\n      return new Plot(plotData);\n    }\n  }, {\n    key: \"yMinMax\",\n    value: function yMinMax() {\n      var min = null,\n          max = null;\n      this.plot().forEach(function (datapoint) {\n        if (datapoint.y < min || min === null) {\n          min = datapoint.y;\n        }\n\n        if (datapoint.y > max || max === null) {\n          max = datapoint.y;\n        }\n      });\n      return {\n        yMin: min,\n        yMax: max\n      };\n    }\n  }]);\n\n  return TrialDataset;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvQ2xhc3Nlcy9UcmlhbERhdGFzZXQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFPLElBQU1BLFlBQWI7QUFDSSx3QkFBWUMsU0FBWixFQUF1QjtBQUFBOztBQUFBOztBQUNuQixTQUFLQyxJQUFMLEdBQVlELFNBQVMsQ0FBQ0UsUUFBVixDQUFtQkMsS0FBbkIsQ0FBeUIsSUFBekIsRUFBK0JDLEdBQS9CLENBQW1DLFVBQUNDLFFBQUQsRUFBYztBQUN6RCxhQUFPQSxRQUFRLENBQUNGLEtBQVQsQ0FBZSxHQUFmLEVBQW9CQyxHQUFwQixDQUF3QixLQUFJLENBQUNFLGNBQTdCLENBQVA7QUFDSCxLQUZXLENBQVo7QUFJQSxTQUFLQyxXQUFMLEdBQW1CLENBQW5CO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixDQUFuQjtBQUNBLFNBQUtDLGNBQUwsR0FBc0IsQ0FBdEI7QUFFQSxTQUFLQyxLQUFMLEdBQWFWLFNBQVMsQ0FBQ1UsS0FBdkI7QUFDQSxTQUFLQyxFQUFMLEdBQVVYLFNBQVMsQ0FBQ1csRUFBcEIsQ0FWbUIsQ0FZbkI7O0FBQ0EsU0FBS0MsS0FBTCxDQUFXLEVBQVg7QUFDSDs7QUFmTDtBQUFBO0FBQUEsV0FpQkksd0JBQWVDLFdBQWYsRUFBNEI7QUFDeEIsVUFBSUMsY0FBYyxHQUFHQyxRQUFRLENBQUNGLFdBQUQsRUFBYyxFQUFkLENBQTdCO0FBQUEsVUFDSUcsWUFBWSxHQUFHRCxRQUFRLENBQUNGLFdBQUQsRUFBYyxFQUFkLENBRDNCO0FBQUEsVUFFSUksTUFBTSxHQUFHSCxjQUFjLEtBQUtFLFlBQW5CLEdBQWtDRixjQUFsQyxHQUFtREUsWUFGaEU7QUFJQSxhQUFPRSxLQUFLLENBQUNMLFdBQUQsQ0FBTCxHQUFxQkEsV0FBckIsR0FBbUNJLE1BQTFDO0FBQ0g7QUF2Qkw7QUFBQTtBQUFBLFdBeUJJLGlCQUFvQjtBQUFBOztBQUFBLFVBQWRFLE9BQWMsdUVBQUosRUFBSTtBQUNoQixVQUFJQyxZQUFZLEdBQUcsSUFBbkI7QUFBQSxVQUNJQyxnQkFBZ0IsR0FBR0YsT0FBTyxHQUFHLElBRGpDO0FBR0EsV0FBS2xCLElBQUwsR0FBWSxLQUFLQSxJQUFMLENBQVVxQixNQUFWLENBQWlCLFVBQUNDLFNBQUQsRUFBZTtBQUN4QyxZQUFJQyxhQUFhLEdBQUdULFFBQVEsQ0FBQ1EsU0FBUyxDQUFDLE1BQUksQ0FBQ2YsV0FBTixDQUFWLEVBQThCLEVBQTlCLENBQTVCOztBQUVBLFlBQUlZLFlBQVksS0FBSyxJQUFyQixFQUEyQjtBQUN2QkEsVUFBQUEsWUFBWSxHQUFHSSxhQUFmO0FBQ0g7O0FBRUQsZUFBT0EsYUFBYSxJQUFJSixZQUFZLEdBQUdDLGdCQUF2QztBQUNILE9BUlcsQ0FBWjtBQVNIO0FBdENMO0FBQUE7QUFBQSxXQXdDSSxnQkFBTztBQUFBOztBQUNILFVBQU1JLFFBQVEsR0FBRyxLQUFLeEIsSUFBTCxDQUFVRyxHQUFWLENBQWMsVUFBQ21CLFNBQUQsRUFBZTtBQUMxQyxlQUFPO0FBQ0hHLFVBQUFBLENBQUMsRUFBRVgsUUFBUSxDQUFDUSxTQUFTLENBQUMsTUFBSSxDQUFDZixXQUFOLENBQVYsRUFBOEIsRUFBOUIsQ0FEUjtBQUVIbUIsVUFBQUEsQ0FBQyxFQUFFWixRQUFRLENBQUNRLFNBQVMsQ0FBQyxNQUFJLENBQUNkLGNBQU4sQ0FBVixFQUFpQyxFQUFqQztBQUZSLFNBQVA7QUFJSCxPQUxnQixDQUFqQjtBQU9BLGFBQU8sSUFBSW1CLElBQUosQ0FBU0gsUUFBVCxDQUFQO0FBQ0g7QUFqREw7QUFBQTtBQUFBLFdBbURJLG1CQUFVO0FBQ04sVUFBSUksR0FBRyxHQUFHLElBQVY7QUFBQSxVQUNJQyxHQUFHLEdBQUcsSUFEVjtBQUdBLFdBQUtDLElBQUwsR0FBWUMsT0FBWixDQUFvQixVQUFDVCxTQUFELEVBQWU7QUFDL0IsWUFBSUEsU0FBUyxDQUFDSSxDQUFWLEdBQWNFLEdBQWQsSUFBcUJBLEdBQUcsS0FBSyxJQUFqQyxFQUF1QztBQUNuQ0EsVUFBQUEsR0FBRyxHQUFHTixTQUFTLENBQUNJLENBQWhCO0FBQ0g7O0FBRUQsWUFBSUosU0FBUyxDQUFDSSxDQUFWLEdBQWNHLEdBQWQsSUFBcUJBLEdBQUcsS0FBSyxJQUFqQyxFQUF1QztBQUNuQ0EsVUFBQUEsR0FBRyxHQUFHUCxTQUFTLENBQUNJLENBQWhCO0FBQ0g7QUFDSixPQVJEO0FBVUEsYUFBTztBQUNITSxRQUFBQSxJQUFJLEVBQUVKLEdBREg7QUFFSEssUUFBQUEsSUFBSSxFQUFFSjtBQUZILE9BQVA7QUFJSDtBQXJFTDs7QUFBQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL0NsYXNzZXMvVHJpYWxEYXRhc2V0LmpzPzIxMzciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFRyaWFsRGF0YXNldCB7XG4gICAgY29uc3RydWN0b3IodHJpYWxEYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHRyaWFsRGF0YS5nc3JfZGF0YS5zcGxpdChcIlxcblwiKS5tYXAoKGxpbmVEYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbGluZURhdGEuc3BsaXQoXCIsXCIpLm1hcCh0aGlzLm51bWVyaWNQYXJzaW5nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5qc1RpbWVGaWVsZCA9IDA7XG4gICAgICAgIHRoaXMubWNUaW1lRmllbGQgPSAxO1xuICAgICAgICB0aGlzLm1pY3Jvdm9sdEZpZWxkID0gMjtcblxuICAgICAgICB0aGlzLmltYWdlID0gdHJpYWxEYXRhLmltYWdlO1xuICAgICAgICB0aGlzLmlkID0gdHJpYWxEYXRhLmlkO1xuXG4gICAgICAgIC8vIFRvRG86IHRoaW5rIGFib3V0IGltcGxlbWVudGluZyB0aGUgbGluZSBiZWxvdyBpbiBhIGJldHRlciB3YXkuXG4gICAgICAgIHRoaXMubGltaXQoMjApO1xuICAgIH1cblxuICAgIG51bWVyaWNQYXJzaW5nKGxpbmVFbGVtZW50KSB7XG4gICAgICAgIGxldCBpbnRlZ2VyVmVyc2lvbiA9IHBhcnNlSW50KGxpbmVFbGVtZW50LCAxMCksXG4gICAgICAgICAgICBmbG9hdFZlcnNpb24gPSBwYXJzZUludChsaW5lRWxlbWVudCwgMTApLFxuICAgICAgICAgICAgbnVtYmVyID0gaW50ZWdlclZlcnNpb24gPT09IGZsb2F0VmVyc2lvbiA/IGludGVnZXJWZXJzaW9uIDogZmxvYXRWZXJzaW9uO1xuXG4gICAgICAgIHJldHVybiBpc05hTihsaW5lRWxlbWVudCkgPyBsaW5lRWxlbWVudCA6IG51bWJlcjtcbiAgICB9XG5cbiAgICBsaW1pdChzZWNvbmRzID0gMjApIHtcbiAgICAgICAgbGV0IGVhcmxpZXN0VGltZSA9IG51bGwsXG4gICAgICAgICAgICBtaWxsaXNlY29uZExpbWl0ID0gc2Vjb25kcyAqIDEwMDA7XG5cbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhLmZpbHRlcigoZGF0YXBvaW50KSA9PiB7XG4gICAgICAgICAgICBsZXQgZGF0YVBvaW50VGltZSA9IHBhcnNlSW50KGRhdGFwb2ludFt0aGlzLm1jVGltZUZpZWxkXSwgMTApO1xuXG4gICAgICAgICAgICBpZiAoZWFybGllc3RUaW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZWFybGllc3RUaW1lID0gZGF0YVBvaW50VGltZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRhdGFQb2ludFRpbWUgPD0gZWFybGllc3RUaW1lICsgbWlsbGlzZWNvbmRMaW1pdDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcGxvdCgpIHtcbiAgICAgICAgY29uc3QgcGxvdERhdGEgPSB0aGlzLmRhdGEubWFwKChkYXRhcG9pbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogcGFyc2VJbnQoZGF0YXBvaW50W3RoaXMubWNUaW1lRmllbGRdLCAxMCksXG4gICAgICAgICAgICAgICAgeTogcGFyc2VJbnQoZGF0YXBvaW50W3RoaXMubWljcm92b2x0RmllbGRdLCAxMCksXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgUGxvdChwbG90RGF0YSk7XG4gICAgfVxuXG4gICAgeU1pbk1heCgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGwsXG4gICAgICAgICAgICBtYXggPSBudWxsO1xuXG4gICAgICAgIHRoaXMucGxvdCgpLmZvckVhY2goKGRhdGFwb2ludCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGFwb2ludC55IDwgbWluIHx8IG1pbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG1pbiA9IGRhdGFwb2ludC55O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YXBvaW50LnkgPiBtYXggfHwgbWF4ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbWF4ID0gZGF0YXBvaW50Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5TWluOiBtaW4sXG4gICAgICAgICAgICB5TWF4OiBtYXgsXG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOlsiVHJpYWxEYXRhc2V0IiwidHJpYWxEYXRhIiwiZGF0YSIsImdzcl9kYXRhIiwic3BsaXQiLCJtYXAiLCJsaW5lRGF0YSIsIm51bWVyaWNQYXJzaW5nIiwianNUaW1lRmllbGQiLCJtY1RpbWVGaWVsZCIsIm1pY3Jvdm9sdEZpZWxkIiwiaW1hZ2UiLCJpZCIsImxpbWl0IiwibGluZUVsZW1lbnQiLCJpbnRlZ2VyVmVyc2lvbiIsInBhcnNlSW50IiwiZmxvYXRWZXJzaW9uIiwibnVtYmVyIiwiaXNOYU4iLCJzZWNvbmRzIiwiZWFybGllc3RUaW1lIiwibWlsbGlzZWNvbmRMaW1pdCIsImZpbHRlciIsImRhdGFwb2ludCIsImRhdGFQb2ludFRpbWUiLCJwbG90RGF0YSIsIngiLCJ5IiwiUGxvdCIsIm1pbiIsIm1heCIsInBsb3QiLCJmb3JFYWNoIiwieU1pbiIsInlNYXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/Classes/TrialDataset.js\n");

/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"./resources/js/helpers.js\");\n/* harmony import */ var _$full_screen_alerts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./$full-screen-alerts */ \"./resources/js/$full-screen-alerts.js\");\n/* harmony import */ var _$experiment1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./$experiment1 */ \"./resources/js/$experiment1.js\");\n/* harmony import */ var _data_analysis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data-analysis */ \"./resources/js/data-analysis.js\");\n/* harmony import */ var _serial_data_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./serial-data-service */ \"./resources/js/serial-data-service.js\");\n/* harmony import */ var _Classes_GlobalDataset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Classes/GlobalDataset */ \"./resources/js/Classes/GlobalDataset.js\");\n/* harmony import */ var _Classes_ExperimentalDataset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Classes/ExperimentalDataset */ \"./resources/js/Classes/ExperimentalDataset.js\");\n/* harmony import */ var _Classes_TrialDataset__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Classes/TrialDataset */ \"./resources/js/Classes/TrialDataset.js\");\n/* harmony import */ var _Classes_Plotset__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Classes/Plotset */ \"./resources/js/Classes/Plotset.js\");\n/* harmony import */ var _Classes_Plot__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Classes/Plot */ \"./resources/js/Classes/Plot.js\");\n/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./graph */ \"./resources/js/graph.js\");\n/* harmony import */ var _graph_live__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./graph-live */ \"./resources/js/graph-live.js\");\n/* harmony import */ var _setup__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./setup */ \"./resources/js/setup.js\");\n// $variable (as opposed to variable) designates jQuery based module.\n\n\n\n\n\n\n\n\n\n\n\n\n\n_helpers__WEBPACK_IMPORTED_MODULE_0__.helpers.initiate();\nwindow.helpers = _helpers__WEBPACK_IMPORTED_MODULE_0__.helpers;\nwindow.GlobalDataset = _Classes_GlobalDataset__WEBPACK_IMPORTED_MODULE_5__.GlobalDataset;\nwindow.ExperimentalDataset = _Classes_ExperimentalDataset__WEBPACK_IMPORTED_MODULE_6__.ExperimentalDataset;\nwindow.TrialDataset = _Classes_TrialDataset__WEBPACK_IMPORTED_MODULE_7__.TrialDataset;\nwindow.Plotset = _Classes_Plotset__WEBPACK_IMPORTED_MODULE_8__.Plotset;\nwindow.Plot = _Classes_Plot__WEBPACK_IMPORTED_MODULE_9__.Plot;\nwindow.graph = _graph__WEBPACK_IMPORTED_MODULE_10__.graph;\ndocument.addEventListener('DOMContentLoaded', function () {\n  _$full_screen_alerts__WEBPACK_IMPORTED_MODULE_1__.fullScreenAlerts.initiate();\n\n  if (document.querySelector('#connect-to-gsr')) {\n    _serial_data_service__WEBPACK_IMPORTED_MODULE_4__.serialDataService.initiate('#connect-to-gsr');\n  }\n\n  if (document.querySelectorAll('canvas.open-gsr').length) {\n    _graph_live__WEBPACK_IMPORTED_MODULE_11__.graphLive.initiate('canvas.open-gsr');\n    window.graphLive = _graph_live__WEBPACK_IMPORTED_MODULE_11__.graphLive;\n  }\n\n  if (document.body.classList.contains('experiment')) {\n    _$experiment1__WEBPACK_IMPORTED_MODULE_2__.experiment1.initiate();\n  }\n\n  if (document.body.classList.contains('data-analysis')) {\n    _data_analysis__WEBPACK_IMPORTED_MODULE_3__.dataAnalysis.initiate();\n    window.dataAnalysis = _data_analysis__WEBPACK_IMPORTED_MODULE_3__.dataAnalysis;\n  }\n\n  if (document.body.classList.contains('setup')) {\n    _setup__WEBPACK_IMPORTED_MODULE_12__.setup.initiate();\n  }\n\n  window.experiment1 = _$experiment1__WEBPACK_IMPORTED_MODULE_2__.experiment1;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSxzREFBQTtBQUNBYyxNQUFNLENBQUNkLE9BQVAsR0FBaUJBLDZDQUFqQjtBQUNBYyxNQUFNLENBQUNULGFBQVAsR0FBdUJBLGlFQUF2QjtBQUNBUyxNQUFNLENBQUNSLG1CQUFQLEdBQTZCQSw2RUFBN0I7QUFDQVEsTUFBTSxDQUFDUCxZQUFQLEdBQXNCQSwrREFBdEI7QUFDQU8sTUFBTSxDQUFDTixPQUFQLEdBQWlCQSxxREFBakI7QUFDQU0sTUFBTSxDQUFDTCxJQUFQLEdBQWNBLCtDQUFkO0FBQ0FLLE1BQU0sQ0FBQ0osS0FBUCxHQUFlQSwwQ0FBZjtBQUVBSyxRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxZQUFNO0FBQ2hEZixFQUFBQSwyRUFBQTs7QUFFQSxNQUFJYyxRQUFRLENBQUNFLGFBQVQsQ0FBdUIsaUJBQXZCLENBQUosRUFBK0M7QUFDM0NiLElBQUFBLDRFQUFBLENBQTJCLGlCQUEzQjtBQUNIOztBQUVELE1BQUlXLFFBQVEsQ0FBQ0csZ0JBQVQsQ0FBMEIsaUJBQTFCLEVBQTZDQyxNQUFqRCxFQUF5RDtBQUNyRFIsSUFBQUEsNERBQUEsQ0FBbUIsaUJBQW5CO0FBQ0FHLElBQUFBLE1BQU0sQ0FBQ0gsU0FBUCxHQUFtQkEsbURBQW5CO0FBQ0g7O0FBRUQsTUFBSUksUUFBUSxDQUFDSyxJQUFULENBQWNDLFNBQWQsQ0FBd0JDLFFBQXhCLENBQWlDLFlBQWpDLENBQUosRUFBb0Q7QUFDaERwQixJQUFBQSwrREFBQTtBQUNIOztBQUVELE1BQUlhLFFBQVEsQ0FBQ0ssSUFBVCxDQUFjQyxTQUFkLENBQXdCQyxRQUF4QixDQUFpQyxlQUFqQyxDQUFKLEVBQXVEO0FBQ25EbkIsSUFBQUEsaUVBQUE7QUFFQVcsSUFBQUEsTUFBTSxDQUFDWCxZQUFQLEdBQXNCQSx3REFBdEI7QUFDSDs7QUFFRCxNQUFJWSxRQUFRLENBQUNLLElBQVQsQ0FBY0MsU0FBZCxDQUF3QkMsUUFBeEIsQ0FBaUMsT0FBakMsQ0FBSixFQUErQztBQUMzQ1YsSUFBQUEsbURBQUE7QUFDSDs7QUFFREUsRUFBQUEsTUFBTSxDQUFDWixXQUFQLEdBQXFCQSxzREFBckI7QUFDSCxDQTNCRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAuanM/NmQ0MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAkdmFyaWFibGUgKGFzIG9wcG9zZWQgdG8gdmFyaWFibGUpIGRlc2lnbmF0ZXMgalF1ZXJ5IGJhc2VkIG1vZHVsZS5cblxuaW1wb3J0IHtoZWxwZXJzfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHtmdWxsU2NyZWVuQWxlcnRzfSBmcm9tICcuLyRmdWxsLXNjcmVlbi1hbGVydHMnO1xuaW1wb3J0IHtleHBlcmltZW50MX0gZnJvbSAnLi8kZXhwZXJpbWVudDEnO1xuaW1wb3J0IHtkYXRhQW5hbHlzaXN9IGZyb20gJy4vZGF0YS1hbmFseXNpcyc7XG5pbXBvcnQge3NlcmlhbERhdGFTZXJ2aWNlfSBmcm9tICcuL3NlcmlhbC1kYXRhLXNlcnZpY2UnO1xuaW1wb3J0IHtHbG9iYWxEYXRhc2V0fSBmcm9tICcuL0NsYXNzZXMvR2xvYmFsRGF0YXNldCc7XG5pbXBvcnQge0V4cGVyaW1lbnRhbERhdGFzZXR9IGZyb20gJy4vQ2xhc3Nlcy9FeHBlcmltZW50YWxEYXRhc2V0JztcbmltcG9ydCB7VHJpYWxEYXRhc2V0fSBmcm9tICcuL0NsYXNzZXMvVHJpYWxEYXRhc2V0JztcbmltcG9ydCB7UGxvdHNldH0gZnJvbSAnLi9DbGFzc2VzL1Bsb3RzZXQnO1xuaW1wb3J0IHtQbG90fSBmcm9tICcuL0NsYXNzZXMvUGxvdCc7XG5pbXBvcnQge2dyYXBofSBmcm9tICcuL2dyYXBoJztcbmltcG9ydCB7Z3JhcGhMaXZlfSBmcm9tICcuL2dyYXBoLWxpdmUnO1xuaW1wb3J0IHtzZXR1cH0gZnJvbSAnLi9zZXR1cCc7XG5cbmhlbHBlcnMuaW5pdGlhdGUoKTtcbndpbmRvdy5oZWxwZXJzID0gaGVscGVycztcbndpbmRvdy5HbG9iYWxEYXRhc2V0ID0gR2xvYmFsRGF0YXNldDtcbndpbmRvdy5FeHBlcmltZW50YWxEYXRhc2V0ID0gRXhwZXJpbWVudGFsRGF0YXNldDtcbndpbmRvdy5UcmlhbERhdGFzZXQgPSBUcmlhbERhdGFzZXQ7XG53aW5kb3cuUGxvdHNldCA9IFBsb3RzZXQ7XG53aW5kb3cuUGxvdCA9IFBsb3Q7XG53aW5kb3cuZ3JhcGggPSBncmFwaDtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBmdWxsU2NyZWVuQWxlcnRzLmluaXRpYXRlKCk7XG5cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Nvbm5lY3QtdG8tZ3NyJykpIHtcbiAgICAgICAgc2VyaWFsRGF0YVNlcnZpY2UuaW5pdGlhdGUoJyNjb25uZWN0LXRvLWdzcicpO1xuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdjYW52YXMub3Blbi1nc3InKS5sZW5ndGgpIHtcbiAgICAgICAgZ3JhcGhMaXZlLmluaXRpYXRlKCdjYW52YXMub3Blbi1nc3InKTtcbiAgICAgICAgd2luZG93LmdyYXBoTGl2ZSA9IGdyYXBoTGl2ZTtcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2V4cGVyaW1lbnQnKSkge1xuICAgICAgICBleHBlcmltZW50MS5pbml0aWF0ZSgpO1xuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucygnZGF0YS1hbmFseXNpcycpKSB7XG4gICAgICAgIGRhdGFBbmFseXNpcy5pbml0aWF0ZSgpO1xuXG4gICAgICAgIHdpbmRvdy5kYXRhQW5hbHlzaXMgPSBkYXRhQW5hbHlzaXM7XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdzZXR1cCcpKSB7XG4gICAgICAgIHNldHVwLmluaXRpYXRlKCk7XG4gICAgfVxuXG4gICAgd2luZG93LmV4cGVyaW1lbnQxID0gZXhwZXJpbWVudDE7XG59KTtcbiJdLCJuYW1lcyI6WyJoZWxwZXJzIiwiZnVsbFNjcmVlbkFsZXJ0cyIsImV4cGVyaW1lbnQxIiwiZGF0YUFuYWx5c2lzIiwic2VyaWFsRGF0YVNlcnZpY2UiLCJHbG9iYWxEYXRhc2V0IiwiRXhwZXJpbWVudGFsRGF0YXNldCIsIlRyaWFsRGF0YXNldCIsIlBsb3RzZXQiLCJQbG90IiwiZ3JhcGgiLCJncmFwaExpdmUiLCJzZXR1cCIsImluaXRpYXRlIiwid2luZG93IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJib2R5IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/data-analysis.js":
/*!***************************************!*\
  !*** ./resources/js/data-analysis.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"dataAnalysis\": () => (/* binding */ dataAnalysis)\n/* harmony export */ });\nvar internalState = {\n  dataset: null\n};\n\nfunction initiate() {\n  loadData();\n  graph.initiate('#results-plotter');\n}\n\nfunction loadData() {\n  var form = document.querySelector('form[name=\"ajax\"]');\n  helpers.ajaxForm(form, dataLoaded, dataLoadFailed);\n}\n\nfunction dataLoaded(data) {\n  var globalDataset = new GlobalDataset(data);\n  var trials = globalDataset.experiment(2).trials();\n  var yMinMax = globalDataset.experiment(2).yMinMax();\n  trials.forEach(function (trial) {\n    var hexColour;\n\n    if (trial.image.type.name === 'Peaceful') {\n      hexColour = '#F1E8B8';\n    } else {\n      hexColour = '#00FF00';\n    }\n\n    graph.drawPlot(trial.plot(), hexColour, yMinMax, 0.33);\n  });\n  var hexColour = '#00FF00';\n  var emotionalAverage = globalDataset.experiment(2).averagePlotDataForEmotionalImages();\n\n  var emotionalImages = function emotionalImages(trial) {\n    return trial.image.type.name === 'Emotional';\n  };\n\n  globalDataset.experiment(2).plotset().filter(emotionalImages).averagePlot();\n  graph.drawPlot(emotionalAverage, hexColour, yMinMax);\n  hexColour = '#F1E8B8';\n  var peacefulAverage = globalDataset.experiment(2).averagePlotDataForPeacefulImages();\n  graph.drawPlot(peacefulAverage, hexColour, yMinMax);\n  graph.drawAxis();\n}\n\nfunction dataLoadFailed() {\n  console.log('Something went wrong loading data.');\n}\n\nvar dataAnalysis = {\n  initiate: initiate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvZGF0YS1hbmFseXNpcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHO0FBQ2hCQyxFQUFBQSxPQUFPLEVBQUU7QUFETyxDQUFwQjs7QUFJQSxTQUFTQyxRQUFULEdBQW9CO0FBQ2hCQyxFQUFBQSxRQUFRO0FBQ1JDLEVBQUFBLEtBQUssQ0FBQ0YsUUFBTixDQUFlLGtCQUFmO0FBQ0g7O0FBRUQsU0FBU0MsUUFBVCxHQUFvQjtBQUNoQixNQUFNRSxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixtQkFBdkIsQ0FBYjtBQUVBQyxFQUFBQSxPQUFPLENBQUNDLFFBQVIsQ0FBaUJKLElBQWpCLEVBQXVCSyxVQUF2QixFQUFtQ0MsY0FBbkM7QUFDSDs7QUFFRCxTQUFTRCxVQUFULENBQW9CRSxJQUFwQixFQUEwQjtBQUN0QixNQUFNQyxhQUFhLEdBQUcsSUFBSUMsYUFBSixDQUFrQkYsSUFBbEIsQ0FBdEI7QUFFQSxNQUFJRyxNQUFNLEdBQUdGLGFBQWEsQ0FBQ0csVUFBZCxDQUF5QixDQUF6QixFQUE0QkQsTUFBNUIsRUFBYjtBQUNBLE1BQUlFLE9BQU8sR0FBR0osYUFBYSxDQUFDRyxVQUFkLENBQXlCLENBQXpCLEVBQTRCQyxPQUE1QixFQUFkO0FBRUFGLEVBQUFBLE1BQU0sQ0FBQ0csT0FBUCxDQUFlLFVBQUNDLEtBQUQsRUFBVztBQUN0QixRQUFJQyxTQUFKOztBQUVBLFFBQUlELEtBQUssQ0FBQ0UsS0FBTixDQUFZQyxJQUFaLENBQWlCQyxJQUFqQixLQUEwQixVQUE5QixFQUEwQztBQUN0Q0gsTUFBQUEsU0FBUyxHQUFHLFNBQVo7QUFDSCxLQUZELE1BRU87QUFDSEEsTUFBQUEsU0FBUyxHQUFHLFNBQVo7QUFDSDs7QUFDRGhCLElBQUFBLEtBQUssQ0FBQ29CLFFBQU4sQ0FBZUwsS0FBSyxDQUFDTSxJQUFOLEVBQWYsRUFBNkJMLFNBQTdCLEVBQXdDSCxPQUF4QyxFQUFpRCxJQUFqRDtBQUNILEdBVEQ7QUFXQSxNQUFJRyxTQUFTLEdBQUcsU0FBaEI7QUFDQSxNQUFJTSxnQkFBZ0IsR0FBR2IsYUFBYSxDQUFDRyxVQUFkLENBQXlCLENBQXpCLEVBQTRCVyxpQ0FBNUIsRUFBdkI7O0FBRUEsTUFBSUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDVCxLQUFELEVBQVc7QUFDN0IsV0FBT0EsS0FBSyxDQUFDRSxLQUFOLENBQVlDLElBQVosQ0FBaUJDLElBQWpCLEtBQTBCLFdBQWpDO0FBQ0gsR0FGRDs7QUFJQVYsRUFBQUEsYUFBYSxDQUFDRyxVQUFkLENBQXlCLENBQXpCLEVBQTRCYSxPQUE1QixHQUFzQ0MsTUFBdEMsQ0FBNkNGLGVBQTdDLEVBQThERyxXQUE5RDtBQUVBM0IsRUFBQUEsS0FBSyxDQUFDb0IsUUFBTixDQUFlRSxnQkFBZixFQUFpQ04sU0FBakMsRUFBNENILE9BQTVDO0FBRUFHLEVBQUFBLFNBQVMsR0FBRyxTQUFaO0FBQ0EsTUFBSVksZUFBZSxHQUFHbkIsYUFBYSxDQUFDRyxVQUFkLENBQXlCLENBQXpCLEVBQTRCaUIsZ0NBQTVCLEVBQXRCO0FBRUE3QixFQUFBQSxLQUFLLENBQUNvQixRQUFOLENBQWVRLGVBQWYsRUFBZ0NaLFNBQWhDLEVBQTJDSCxPQUEzQztBQUVBYixFQUFBQSxLQUFLLENBQUM4QixRQUFOO0FBQ0g7O0FBRUQsU0FBU3ZCLGNBQVQsR0FBMEI7QUFDdEJ3QixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxvQ0FBWjtBQUNIOztBQUVNLElBQU1DLFlBQVksR0FBRztBQUN4Qm5DLEVBQUFBLFFBQVEsRUFBUkE7QUFEd0IsQ0FBckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZGF0YS1hbmFseXNpcy5qcz8xZmM0Il0sInNvdXJjZXNDb250ZW50IjpbImxldCBpbnRlcm5hbFN0YXRlID0ge1xuICAgIGRhdGFzZXQ6IG51bGwsXG59O1xuXG5mdW5jdGlvbiBpbml0aWF0ZSgpIHtcbiAgICBsb2FkRGF0YSgpO1xuICAgIGdyYXBoLmluaXRpYXRlKCcjcmVzdWx0cy1wbG90dGVyJyk7XG59XG5cbmZ1bmN0aW9uIGxvYWREYXRhKCkge1xuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtW25hbWU9XCJhamF4XCJdJyk7XG5cbiAgICBoZWxwZXJzLmFqYXhGb3JtKGZvcm0sIGRhdGFMb2FkZWQsIGRhdGFMb2FkRmFpbGVkKTtcbn1cblxuZnVuY3Rpb24gZGF0YUxvYWRlZChkYXRhKSB7XG4gICAgY29uc3QgZ2xvYmFsRGF0YXNldCA9IG5ldyBHbG9iYWxEYXRhc2V0KGRhdGEpO1xuXG4gICAgbGV0IHRyaWFscyA9IGdsb2JhbERhdGFzZXQuZXhwZXJpbWVudCgyKS50cmlhbHMoKTtcbiAgICBsZXQgeU1pbk1heCA9IGdsb2JhbERhdGFzZXQuZXhwZXJpbWVudCgyKS55TWluTWF4KCk7XG5cbiAgICB0cmlhbHMuZm9yRWFjaCgodHJpYWwpID0+IHtcbiAgICAgICAgbGV0IGhleENvbG91cjtcblxuICAgICAgICBpZiAodHJpYWwuaW1hZ2UudHlwZS5uYW1lID09PSAnUGVhY2VmdWwnKSB7XG4gICAgICAgICAgICBoZXhDb2xvdXIgPSAnI0YxRThCOCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoZXhDb2xvdXIgPSAnIzAwRkYwMCc7XG4gICAgICAgIH1cbiAgICAgICAgZ3JhcGguZHJhd1Bsb3QodHJpYWwucGxvdCgpLCBoZXhDb2xvdXIsIHlNaW5NYXgsIDAuMzMpO1xuICAgIH0pO1xuXG4gICAgbGV0IGhleENvbG91ciA9ICcjMDBGRjAwJztcbiAgICBsZXQgZW1vdGlvbmFsQXZlcmFnZSA9IGdsb2JhbERhdGFzZXQuZXhwZXJpbWVudCgyKS5hdmVyYWdlUGxvdERhdGFGb3JFbW90aW9uYWxJbWFnZXMoKTtcblxuICAgIGxldCBlbW90aW9uYWxJbWFnZXMgPSAodHJpYWwpID0+IHtcbiAgICAgICAgcmV0dXJuIHRyaWFsLmltYWdlLnR5cGUubmFtZSA9PT0gJ0Vtb3Rpb25hbCc7XG4gICAgfTtcblxuICAgIGdsb2JhbERhdGFzZXQuZXhwZXJpbWVudCgyKS5wbG90c2V0KCkuZmlsdGVyKGVtb3Rpb25hbEltYWdlcykuYXZlcmFnZVBsb3QoKTtcblxuICAgIGdyYXBoLmRyYXdQbG90KGVtb3Rpb25hbEF2ZXJhZ2UsIGhleENvbG91ciwgeU1pbk1heCk7XG5cbiAgICBoZXhDb2xvdXIgPSAnI0YxRThCOCc7XG4gICAgbGV0IHBlYWNlZnVsQXZlcmFnZSA9IGdsb2JhbERhdGFzZXQuZXhwZXJpbWVudCgyKS5hdmVyYWdlUGxvdERhdGFGb3JQZWFjZWZ1bEltYWdlcygpO1xuXG4gICAgZ3JhcGguZHJhd1Bsb3QocGVhY2VmdWxBdmVyYWdlLCBoZXhDb2xvdXIsIHlNaW5NYXgpO1xuXG4gICAgZ3JhcGguZHJhd0F4aXMoKTtcbn1cblxuZnVuY3Rpb24gZGF0YUxvYWRGYWlsZWQoKSB7XG4gICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHdyb25nIGxvYWRpbmcgZGF0YS4nKTtcbn1cblxuZXhwb3J0IGNvbnN0IGRhdGFBbmFseXNpcyA9IHtcbiAgICBpbml0aWF0ZSxcbn07XG4iXSwibmFtZXMiOlsiaW50ZXJuYWxTdGF0ZSIsImRhdGFzZXQiLCJpbml0aWF0ZSIsImxvYWREYXRhIiwiZ3JhcGgiLCJmb3JtIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaGVscGVycyIsImFqYXhGb3JtIiwiZGF0YUxvYWRlZCIsImRhdGFMb2FkRmFpbGVkIiwiZGF0YSIsImdsb2JhbERhdGFzZXQiLCJHbG9iYWxEYXRhc2V0IiwidHJpYWxzIiwiZXhwZXJpbWVudCIsInlNaW5NYXgiLCJmb3JFYWNoIiwidHJpYWwiLCJoZXhDb2xvdXIiLCJpbWFnZSIsInR5cGUiLCJuYW1lIiwiZHJhd1Bsb3QiLCJwbG90IiwiZW1vdGlvbmFsQXZlcmFnZSIsImF2ZXJhZ2VQbG90RGF0YUZvckVtb3Rpb25hbEltYWdlcyIsImVtb3Rpb25hbEltYWdlcyIsInBsb3RzZXQiLCJmaWx0ZXIiLCJhdmVyYWdlUGxvdCIsInBlYWNlZnVsQXZlcmFnZSIsImF2ZXJhZ2VQbG90RGF0YUZvclBlYWNlZnVsSW1hZ2VzIiwiZHJhd0F4aXMiLCJjb25zb2xlIiwibG9nIiwiZGF0YUFuYWx5c2lzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/data-analysis.js\n");

/***/ }),

/***/ "./resources/js/graph-live.js":
/*!************************************!*\
  !*** ./resources/js/graph-live.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"graphLive\": () => (/* binding */ graphLive)\n/* harmony export */ });\nvar maxGsrDataSize = 15000;\nvar gsrData = [],\n    scaleFactor = window.devicePixelRatio || 1,\n    canvasActivated = false,\n    axisSpaceX = 100 * scaleFactor,\n    axisSpaceY = 50 * scaleFactor,\n    plotWidth,\n    plotHeight,\n    timeMin,\n    timeMax,\n    millivoltsMin,\n    millivoltsMax,\n    graphCC,\n    spacingPerSecond = 50 * scaleFactor,\n    graphActive = true;\n\nfunction initiate(canvasSelector) {\n  graphCC = document.querySelector(canvasSelector).getContext('2d');\n  document.addEventListener('SerialDataPoint', onSerialDataPoint);\n  window.addEventListener('resize', function () {\n    canvasSetup();\n  });\n}\n\nfunction stop() {\n  graphActive = false;\n}\n\nfunction resume() {\n  graphActive = true;\n}\n\nfunction onSerialDataPoint(event) {\n  if (gsrData.length >= maxGsrDataSize) {\n    gsrData.shift();\n  }\n\n  gsrData.push(event.detail);\n\n  if (!canvasActivated) {\n    var graphOnline = new CustomEvent('GraphOnline');\n    document.dispatchEvent(graphOnline);\n    canvasSetup();\n    canvasActivated = true;\n  }\n\n  if (graphActive) {\n    renderGraph();\n  }\n}\n\nfunction canvasSetup() {\n  graphCC.canvas.width = graphCC.canvas.scrollWidth * scaleFactor;\n  graphCC.canvas.height = graphCC.canvas.scrollHeight * scaleFactor;\n  renderGraph();\n}\n\nfunction renderGraph() {\n  var datapoints;\n  plotWidth = graphCC.canvas.width - axisSpaceX;\n  plotHeight = graphCC.canvas.height - axisSpaceY;\n  datapoints = getRelevantSubsetOfDataPointsForGraphing();\n\n  if (datapoints.length === 0) {\n    console.debug('No Datapoints');\n    return false;\n  }\n\n  graphCC.clearRect(0, 0, graphCC.canvas.width, graphCC.canvas.height);\n  timeMin = minimumDataPointValue(datapoints, 'time').time;\n  timeMax = plotWidth / spacingPerSecond * 1000 + timeMin;\n  millivoltsMin = minimumDataPointValue(datapoints, 'millivolts').millivolts;\n  millivoltsMax = maximumDataPointValue(datapoints, 'millivolts').millivolts;\n  renderScaleX();\n  renderScaleY();\n  renderPlot(datapoints, axisSpaceX);\n  renderAxis();\n}\n\nfunction getRelevantSubsetOfDataPointsForGraphing() {\n  var timePeriod = plotWidth / spacingPerSecond * 1000,\n      gsrDataLength = gsrData.length,\n      gsrLastIndex = gsrDataLength - 1,\n      latestDataPoint = gsrData[gsrLastIndex],\n      timeOfLatestDataPoint = latestDataPoint.time,\n      earliestTime = timeOfLatestDataPoint - timePeriod,\n      relevantSubset = []; // ToDo: I don't presently understand why the undefined check is required, but without it bad things happened.\n\n  for (var index = gsrData.length - 1; index >= 0 && gsrData[index] !== undefined && gsrData[index].time > earliestTime; index--) {\n    relevantSubset.push(gsrData[index]);\n  }\n\n  relevantSubset.reverse();\n  return relevantSubset;\n}\n\nfunction renderAxis() {\n  graphCC.beginPath();\n  graphCC.moveTo(axisSpaceX, 0);\n  graphCC.lineTo(axisSpaceX, graphCC.canvas.height - axisSpaceY);\n  graphCC.lineTo(graphCC.canvas.width, graphCC.canvas.height - axisSpaceY);\n  graphCC.strokeStyle = \"#dddddd\";\n  graphCC.stroke();\n}\n\nfunction renderScaleX() {\n  var intervalX = 1000,\n      firstInterval = Math.ceil(timeMin / intervalX) * intervalX;\n\n  for (var calculatedInterval = firstInterval; calculatedInterval < timeMax; calculatedInterval += intervalX) {\n    var scaledTimeValue = scaleValue(calculatedInterval, timeMin, timeMax, plotWidth),\n        fontsize = 14 * scaleFactor,\n        fontXOffset = 0 * scaleFactor,\n        fontYOffset = 20 * scaleFactor;\n    graphCC.globalAlpha = 0.1;\n    graphCC.beginPath();\n    graphCC.moveTo(scaledTimeValue + axisSpaceX, 0);\n    graphCC.lineTo(scaledTimeValue + axisSpaceX, graphCC.canvas.height - axisSpaceY);\n    graphCC.strokeStyle = \"#dddddd\";\n    graphCC.stroke();\n    graphCC.globalAlpha = 1;\n    graphCC.beginPath();\n    graphCC.moveTo(scaledTimeValue + axisSpaceX, graphCC.canvas.height - axisSpaceY);\n    graphCC.lineTo(scaledTimeValue + axisSpaceX, graphCC.canvas.height - axisSpaceY / 1.2);\n    graphCC.strokeStyle = \"#dddddd\";\n    graphCC.stroke();\n    graphCC.font = fontsize + 'px Open Sans';\n    graphCC.fillStyle = \"#dddddd\";\n    graphCC.textAlign = \"center\";\n    graphCC.fillText(parseInt(calculatedInterval / 1000), scaledTimeValue + axisSpaceX + fontXOffset, graphCC.canvas.height - axisSpaceY / 1.2 + fontYOffset);\n  }\n}\n\nfunction renderScaleY() {\n  var scales = [100, 50, 10, 5, 1, 0.5, 0.1, 0.05, 0.01, 0.005, 0.001, 0.0005, 0.0001],\n      requiredDivisions = 4,\n      millivoltRange = millivoltsMax - millivoltsMin,\n      intervalY = scales.find(function (scale) {\n    return scale * requiredDivisions <= millivoltRange;\n  });\n  var firstInterval;\n\n  if (typeof intervalY === 'undefined') {\n    return;\n  }\n\n  firstInterval = Math.ceil(millivoltsMin / intervalY) * intervalY;\n\n  for (var calculatedInterval = firstInterval; calculatedInterval < millivoltsMax; calculatedInterval += intervalY) {\n    var scaledMillivoltsValue = scaleValue(calculatedInterval, millivoltsMin, millivoltsMax, plotHeight, true),\n        fontsize = 14 * scaleFactor,\n        fontXOffset = -8 * scaleFactor,\n        fontYOffset = 5 * scaleFactor;\n    graphCC.globalAlpha = 0.1;\n    graphCC.beginPath();\n    graphCC.moveTo(graphCC.canvas.width, scaledMillivoltsValue);\n    graphCC.lineTo(axisSpaceX, scaledMillivoltsValue);\n    graphCC.strokeStyle = \"#dddddd\";\n    graphCC.stroke();\n    graphCC.globalAlpha = 1;\n    graphCC.beginPath();\n    graphCC.moveTo(axisSpaceX, scaledMillivoltsValue);\n    graphCC.lineTo(axisSpaceX / 1.2, scaledMillivoltsValue);\n    graphCC.strokeStyle = \"#dddddd\";\n    graphCC.stroke();\n    graphCC.font = fontsize + 'px Open Sans';\n    graphCC.fillStyle = \"#dddddd\";\n    graphCC.textAlign = \"right\";\n    graphCC.fillText(formatNumberForYAxis(calculatedInterval, intervalY), axisSpaceX / 1.2 + fontXOffset, scaledMillivoltsValue + fontYOffset);\n  }\n}\n\nfunction formatNumberForYAxis(number, intervalY) {\n  if (intervalY >= 1) {\n    return parseInt(number);\n  } else if (number == 0) {\n    return 0;\n  } else {\n    return number.toFixed(2);\n  }\n}\n\nfunction renderPlot(datapoints, offsetX) {\n  var origin = false;\n  graphCC.beginPath();\n  datapoints.forEach(function (datapoint, index) {\n    var dataPointYValue = scaleValue(datapoint.millivolts, millivoltsMin, millivoltsMax, plotHeight, true),\n        dataPointXValue = scaleValue(datapoint.time, timeMin, timeMax, plotWidth);\n\n    if (!origin) {\n      origin = datapoint;\n      graphCC.moveTo(offsetX, dataPointYValue);\n    } else {\n      graphCC.lineTo(dataPointXValue + offsetX, dataPointYValue);\n    }\n  });\n  graphCC.strokeStyle = \"#00ff00\";\n  graphCC.lineWidth = 1 * scaleFactor;\n  graphCC.stroke();\n}\n\nfunction minimumDataPointValue(datapoints, property) {\n  return datapoints.reduce(function (previousDP, currentDP) {\n    return previousDP[property] < currentDP[property] ? previousDP : currentDP;\n  });\n}\n\nfunction maximumDataPointValue(datapoints, property) {\n  return datapoints.reduce(function (previousDP, currentDP) {\n    return previousDP[property] > currentDP[property] ? previousDP : currentDP;\n  });\n}\n\nfunction scaleValue(value, min, max, scale) {\n  var flipscale = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var valueOffset = value - min,\n      maxOffset = max - min,\n      valueNeutralScaling = valueOffset / maxOffset;\n\n  if (flipscale) {\n    valueNeutralScaling = 1 - valueNeutralScaling;\n  }\n\n  return valueNeutralScaling * scale;\n}\n\nfunction calculateSuperAverage() {\n  var totalValue = gsrData.reduce(function (previousDP, currentDP) {\n    return previousDP + currentDP.millivolts;\n  }, 0);\n  return totalValue / gsrData.length;\n}\n\nvar graphLive = {\n  initiate: initiate,\n  calculateSuperAverage: calculateSuperAverage,\n  stop: stop,\n  resume: resume\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/graph-live.js\n");

/***/ }),

/***/ "./resources/js/graph.js":
/*!*******************************!*\
  !*** ./resources/js/graph.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"graph\": () => (/* binding */ graph)\n/* harmony export */ });\nvar scaleFactor = window.devicePixelRatio || 1;\nvar internalState = {\n  dataset: null,\n  margins: {\n    xMin: 100,\n    yMin: 100,\n    xMax: 50,\n    yMax: 0\n  },\n  axis: {},\n  grid: {\n    minimumSpacing: 5,\n    availableScales: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100, 500]\n  },\n  CC: null\n};\n\nfunction initiate(selector) {\n  internalState.CC = document.querySelector(selector).getContext('2d');\n  window.addEventListener('resize', function () {\n    canvasSetup();\n  });\n  canvasSetup();\n  return this;\n}\n\nfunction canvasSetup() {\n  internalState.CC.canvas.width = internalState.CC.canvas.scrollWidth * scaleFactor;\n  internalState.CC.canvas.height = internalState.CC.canvas.scrollHeight * scaleFactor;\n}\n\nfunction drawPlot(plot) {\n  var _yMinMax$yMin, _yMinMax$yMax;\n\n  var hexColour = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"#00ff00\";\n  var yMinMax = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var opacity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var xPlMin = plot.lowestValues().x,\n      xPlMax = plot.highestValues().x,\n      yPlMin = (_yMinMax$yMin = yMinMax.yMin) !== null && _yMinMax$yMin !== void 0 ? _yMinMax$yMin : plot.reduce(lowest).y,\n      yPlMax = (_yMinMax$yMax = yMinMax.yMax) !== null && _yMinMax$yMax !== void 0 ? _yMinMax$yMax : plot.reduce(highest).y;\n  var xDaMin = internalState.margins.xMin * scaleFactor,\n      xDaMax = internalState.CC.canvas.width - internalState.margins.xMax * scaleFactor,\n      yDaMin = internalState.margins.yMin * scaleFactor,\n      yDaMax = internalState.CC.canvas.height - internalState.margins.yMax * scaleFactor,\n      daWidth = xDaMax - xDaMin,\n      daHeight = yDaMax - yDaMin;\n  var origin = false;\n  internalState.CC.beginPath();\n  plot.forEach(function (plotpoint) {\n    var floatingXValue = scaleValue(plotpoint.x, xPlMin, xPlMax, daWidth),\n        floatingYValue = scaleValue(plotpoint.y, yPlMin, yPlMax, daHeight);\n    var dataPointXValue = floatingXValue + internalState.margins.xMin * scaleFactor,\n        dataPointYValue = floatingYValue + internalState.margins.yMin * scaleFactor;\n\n    if (!origin) {\n      origin = plotpoint;\n      internalState.CC.moveTo(dataPointXValue, flipYValue(dataPointYValue));\n    } else {\n      internalState.CC.lineTo(dataPointXValue, flipYValue(dataPointYValue));\n    }\n  });\n  internalState.CC.strokeStyle = hexColour;\n  internalState.CC.lineWidth = 1 * scaleFactor;\n  internalState.CC.globalAlpha = opacity;\n  internalState.CC.stroke();\n  internalState.CC.globalAlpha = 1;\n  return this;\n}\n\nfunction drawAxis() {\n  var xMin = internalState.margins.xMin * scaleFactor,\n      yMin = internalState.margins.yMin * scaleFactor,\n      xMax = internalState.margins.xMax * scaleFactor,\n      yMax = internalState.margins.yMax * scaleFactor;\n  internalState.CC.beginPath();\n  internalState.CC.moveTo(xMin, yMax);\n  internalState.CC.lineTo(xMin, internalState.CC.canvas.height - yMin);\n  internalState.CC.lineTo(internalState.CC.canvas.width - xMax, internalState.CC.canvas.height - yMin);\n  internalState.CC.strokeStyle = \"#dddddd\";\n  internalState.CC.stroke();\n  return this;\n}\n\nfunction drawGrid() {\n  return this;\n}\n\nfunction scaleValue(value, min, max, scale) {\n  var valueOffset = value - min,\n      maxOffset = max - min,\n      valueNeutralScaling = valueOffset / maxOffset;\n  return valueNeutralScaling * scale;\n}\n\nfunction flipYValue(yValue) {\n  return internalState.CC.canvas.height - yValue;\n}\n\nvar graph = {\n  drawPlot: drawPlot,\n  drawAxis: drawAxis,\n  initiate: initiate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/graph.js\n");

/***/ }),

/***/ "./resources/js/helpers.js":
/*!*********************************!*\
  !*** ./resources/js/helpers.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"helpers\": () => (/* binding */ helpers)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction initiate() {}\n\nfunction addAtemporalEventListener(eventName, callback) {\n  var scopedSelectors;\n\n  function querySelector(selectors) {\n    scopedSelectors = selectors;\n  }\n\n  ;\n\n  function manInTheMiddleCallback(event) {\n    if (event.target.matches(scopedSelectors)) {\n      callback(event);\n    }\n  }\n\n  document.addEventListener(eventName, manInTheMiddleCallback);\n  return _objectSpread(_objectSpread({}, document), {}, {\n    querySelector: querySelector\n  });\n}\n\nfunction ajaxForm(form, successCallback, failureCallback) {\n  var xhr = new XMLHttpRequest(),\n      formData = new FormData(form),\n      url = form.action;\n  xhr.open(\"POST\", url, true);\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      successCallback(JSON.parse(xhr.responseText));\n    } else if (xhr.readyState === 4) {\n      failureCallback(JSON.parse(xhr.responseText));\n    }\n  };\n\n  xhr.send(formData);\n}\n\nvar helpers = {\n  initiate: initiate,\n  addAtemporalEventListener: addAtemporalEventListener,\n  ajaxForm: ajaxForm\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvaGVscGVycy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsU0FBU0EsUUFBVCxHQUFvQixDQUNuQjs7QUFFRCxTQUFTQyx5QkFBVCxDQUFtQ0MsU0FBbkMsRUFBOENDLFFBQTlDLEVBQXdEO0FBQ3BELE1BQUlDLGVBQUo7O0FBRUEsV0FBU0MsYUFBVCxDQUF1QkMsU0FBdkIsRUFBa0M7QUFDOUJGLElBQUFBLGVBQWUsR0FBR0UsU0FBbEI7QUFDSDs7QUFBQTs7QUFFRCxXQUFTQyxzQkFBVCxDQUFnQ0MsS0FBaEMsRUFBdUM7QUFDbkMsUUFBSUEsS0FBSyxDQUFDQyxNQUFOLENBQWFDLE9BQWIsQ0FBcUJOLGVBQXJCLENBQUosRUFBMkM7QUFDdkNELE1BQUFBLFFBQVEsQ0FBQ0ssS0FBRCxDQUFSO0FBQ0g7QUFDSjs7QUFFREcsRUFBQUEsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQlYsU0FBMUIsRUFBcUNLLHNCQUFyQztBQUVBLHlDQUFXSSxRQUFYO0FBQXFCTixJQUFBQSxhQUFhLEVBQWJBO0FBQXJCO0FBQ0g7O0FBRUQsU0FBU1EsUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLGVBQXhCLEVBQXlDQyxlQUF6QyxFQUEwRDtBQUN0RCxNQUFJQyxHQUFHLEdBQUcsSUFBSUMsY0FBSixFQUFWO0FBQUEsTUFDSUMsUUFBUSxHQUFHLElBQUlDLFFBQUosQ0FBYU4sSUFBYixDQURmO0FBQUEsTUFFSU8sR0FBRyxHQUFHUCxJQUFJLENBQUNRLE1BRmY7QUFJQUwsRUFBQUEsR0FBRyxDQUFDTSxJQUFKLENBQVMsTUFBVCxFQUFpQkYsR0FBakIsRUFBc0IsSUFBdEI7O0FBQ0FKLEVBQUFBLEdBQUcsQ0FBQ08sa0JBQUosR0FBeUIsWUFBTTtBQUMzQixRQUFJUCxHQUFHLENBQUNRLFVBQUosS0FBbUIsQ0FBbkIsSUFBd0JSLEdBQUcsQ0FBQ1MsTUFBSixLQUFlLEdBQTNDLEVBQWdEO0FBQzVDWCxNQUFBQSxlQUFlLENBQUNZLElBQUksQ0FBQ0MsS0FBTCxDQUFXWCxHQUFHLENBQUNZLFlBQWYsQ0FBRCxDQUFmO0FBQ0gsS0FGRCxNQUVPLElBQUlaLEdBQUcsQ0FBQ1EsVUFBSixLQUFtQixDQUF2QixFQUEwQjtBQUM3QlQsTUFBQUEsZUFBZSxDQUFDVyxJQUFJLENBQUNDLEtBQUwsQ0FBV1gsR0FBRyxDQUFDWSxZQUFmLENBQUQsQ0FBZjtBQUNIO0FBQ0osR0FORDs7QUFPQVosRUFBQUEsR0FBRyxDQUFDYSxJQUFKLENBQVNYLFFBQVQ7QUFDSDs7QUFFTSxJQUFNWSxPQUFPLEdBQUc7QUFDbkIvQixFQUFBQSxRQUFRLEVBQVJBLFFBRG1CO0FBRW5CQyxFQUFBQSx5QkFBeUIsRUFBekJBLHlCQUZtQjtBQUduQlksRUFBQUEsUUFBUSxFQUFSQTtBQUhtQixDQUFoQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9oZWxwZXJzLmpzPzYxZmMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5pdGlhdGUoKSB7XG59XG5cbmZ1bmN0aW9uIGFkZEF0ZW1wb3JhbEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgIGxldCBzY29wZWRTZWxlY3RvcnM7XG5cbiAgICBmdW5jdGlvbiBxdWVyeVNlbGVjdG9yKHNlbGVjdG9ycykge1xuICAgICAgICBzY29wZWRTZWxlY3RvcnMgPSBzZWxlY3RvcnM7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG1hbkluVGhlTWlkZGxlQ2FsbGJhY2soZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5tYXRjaGVzKHNjb3BlZFNlbGVjdG9ycykpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBtYW5JblRoZU1pZGRsZUNhbGxiYWNrKVxuXG4gICAgcmV0dXJuIHsuLi5kb2N1bWVudCwgcXVlcnlTZWxlY3Rvcn07XG59XG5cbmZ1bmN0aW9uIGFqYXhGb3JtKGZvcm0sIHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKSxcbiAgICAgICAgdXJsID0gZm9ybS5hY3Rpb247XG5cbiAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsLCB0cnVlKTtcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQgJiYgeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjayhKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgeGhyLnNlbmQoZm9ybURhdGEpO1xufVxuXG5leHBvcnQgY29uc3QgaGVscGVycyA9IHtcbiAgICBpbml0aWF0ZSxcbiAgICBhZGRBdGVtcG9yYWxFdmVudExpc3RlbmVyLFxuICAgIGFqYXhGb3JtLFxufTtcbiJdLCJuYW1lcyI6WyJpbml0aWF0ZSIsImFkZEF0ZW1wb3JhbEV2ZW50TGlzdGVuZXIiLCJldmVudE5hbWUiLCJjYWxsYmFjayIsInNjb3BlZFNlbGVjdG9ycyIsInF1ZXJ5U2VsZWN0b3IiLCJzZWxlY3RvcnMiLCJtYW5JblRoZU1pZGRsZUNhbGxiYWNrIiwiZXZlbnQiLCJ0YXJnZXQiLCJtYXRjaGVzIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiYWpheEZvcm0iLCJmb3JtIiwic3VjY2Vzc0NhbGxiYWNrIiwiZmFpbHVyZUNhbGxiYWNrIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwidXJsIiwiYWN0aW9uIiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwiaGVscGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/helpers.js\n");

/***/ }),

/***/ "./resources/js/serial-data-service.js":
/*!*********************************************!*\
  !*** ./resources/js/serial-data-service.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"serialDataService\": () => (/* binding */ serialDataService)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar port,\n    inputReader,\n    inputStream,\n    inputStreamBuffer = '',\n    inputOverPromise,\n    discardDataPoints = 10;\n\nfunction initiate(connectButtonSelector) {\n  var connectButton = document.querySelector(connectButtonSelector);\n  connectButton.addEventListener('click', function () {\n    clickConnect()[\"catch\"](function () {\n      document.body.classList.add('portSelectionFailure');\n    });\n  });\n}\n\nfunction clickConnect() {\n  return _clickConnect.apply(this, arguments);\n}\n\nfunction _clickConnect() {\n  _clickConnect = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee() {\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connect();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _clickConnect.apply(this, arguments);\n}\n\nfunction connect() {\n  return _connect.apply(this, arguments);\n}\n\nfunction _connect() {\n  _connect = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee2() {\n    var streamDecoder;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            streamDecoder = new TextDecoderStream();\n            _context2.next = 3;\n            return navigator.serial.requestPort();\n\n          case 3:\n            port = _context2.sent;\n            fireCustomEventOnDocument('SerialPortSelected');\n            _context2.next = 7;\n            return port.open({\n              baudRate: 9600\n            });\n\n          case 7:\n            inputOverPromise = port.readable.pipeTo(streamDecoder.writable);\n            inputStream = streamDecoder.readable;\n            inputReader = inputStream.getReader();\n            fireCustomEventOnDocument('SerialPortReading');\n            serialReadLoop();\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _connect.apply(this, arguments);\n}\n\nfunction serialReadLoop() {\n  return _serialReadLoop.apply(this, arguments);\n}\n\nfunction _serialReadLoop() {\n  _serialReadLoop = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee3() {\n    var _yield$inputReader$re, value, done, logicalUnits, dataUnit, remainder;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (false) {}\n\n            _context3.next = 3;\n            return inputReader.read();\n\n          case 3:\n            _yield$inputReader$re = _context3.sent;\n            value = _yield$inputReader$re.value;\n            done = _yield$inputReader$re.done;\n\n            if (value) {\n              logicalUnits = void 0;\n              dataUnit = value.replace(/\\r/g, '');\n              inputStreamBuffer += dataUnit;\n              logicalUnits = inputStreamBuffer.split(\"\\n\");\n\n              if (logicalUnits.length > 1) {\n                remainder = void 0;\n                remainder = logicalUnits.pop();\n                inputStreamBuffer = remainder;\n\n                if (discardDataPoints) {\n                  discardDataPoints--;\n                } else {\n                  logicalUnits.forEach(handleIncomingDataPoint);\n                }\n              }\n            }\n\n            if (!done) {\n              _context3.next = 11;\n              break;\n            }\n\n            console.log('serialReadLoop() ended', done);\n            inputReader.releaseLock();\n            return _context3.abrupt(\"break\", 13);\n\n          case 11:\n            _context3.next = 0;\n            break;\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _serialReadLoop.apply(this, arguments);\n}\n\nfunction handleIncomingDataPoint(dataPoint) {\n  var dataItems = dataPoint.split(\",\"),\n      time = parseInt(dataItems[0]);\n  fireCustomEventOnDocument('SerialDataPoint', {\n    time: time,\n    millivolts: parseFloat(dataItems[1] / 1000)\n  });\n}\n\nfunction fireCustomEventOnDocument(name) {\n  var detailsObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var data = null;\n\n  if (detailsObject !== null) {\n    data = {\n      detail: detailsObject\n    };\n  }\n\n  var customEvent = new CustomEvent(name, data);\n  document.dispatchEvent(customEvent);\n}\n\nvar serialDataService = {\n  initiate: initiate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvc2VyaWFsLWRhdGEtc2VydmljZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxJQUFKO0FBQUEsSUFDSUMsV0FESjtBQUFBLElBRUlDLFdBRko7QUFBQSxJQUdJQyxpQkFBaUIsR0FBRyxFQUh4QjtBQUFBLElBSUlDLGdCQUpKO0FBQUEsSUFLSUMsaUJBQWlCLEdBQUcsRUFMeEI7O0FBT0EsU0FBU0MsUUFBVCxDQUFrQkMscUJBQWxCLEVBQXlDO0FBQ3JDLE1BQU1DLGFBQWEsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCSCxxQkFBdkIsQ0FBdEI7QUFFQUMsRUFBQUEsYUFBYSxDQUFDRyxnQkFBZCxDQUErQixPQUEvQixFQUF3QyxZQUFNO0FBQzFDQyxJQUFBQSxZQUFZLFdBQVosQ0FBcUIsWUFBTTtBQUN2QkgsTUFBQUEsUUFBUSxDQUFDSSxJQUFULENBQWNDLFNBQWQsQ0FBd0JDLEdBQXhCLENBQTRCLHNCQUE1QjtBQUNILEtBRkQ7QUFHSCxHQUpEO0FBS0g7O1NBRWNIOzs7Ozt5SEFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFDVUksT0FBTyxFQURqQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztTQUllQTs7Ozs7b0hBQWY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ1FDLFlBQUFBLGFBRFIsR0FDd0IsSUFBSUMsaUJBQUosRUFEeEI7QUFBQTtBQUFBLG1CQUdpQkMsU0FBUyxDQUFDQyxNQUFWLENBQWlCQyxXQUFqQixFQUhqQjs7QUFBQTtBQUdJckIsWUFBQUEsSUFISjtBQUtJc0IsWUFBQUEseUJBQXlCLENBQUMsb0JBQUQsQ0FBekI7QUFMSjtBQUFBLG1CQU9VdEIsSUFBSSxDQUFDdUIsSUFBTCxDQUFVO0FBQUVDLGNBQUFBLFFBQVEsRUFBRTtBQUFaLGFBQVYsQ0FQVjs7QUFBQTtBQVFJcEIsWUFBQUEsZ0JBQWdCLEdBQUdKLElBQUksQ0FBQ3lCLFFBQUwsQ0FBY0MsTUFBZCxDQUFxQlQsYUFBYSxDQUFDVSxRQUFuQyxDQUFuQjtBQUNBekIsWUFBQUEsV0FBVyxHQUFHZSxhQUFhLENBQUNRLFFBQTVCO0FBQ0F4QixZQUFBQSxXQUFXLEdBQUdDLFdBQVcsQ0FBQzBCLFNBQVosRUFBZDtBQUVBTixZQUFBQSx5QkFBeUIsQ0FBQyxtQkFBRCxDQUF6QjtBQUNBTyxZQUFBQSxjQUFjOztBQWJsQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztTQWdCZUE7Ozs7OzJIQUFmO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLG1CQUVzQzVCLFdBQVcsQ0FBQzZCLElBQVosRUFGdEM7O0FBQUE7QUFBQTtBQUVnQkMsWUFBQUEsS0FGaEIseUJBRWdCQSxLQUZoQjtBQUV1QkMsWUFBQUEsSUFGdkIseUJBRXVCQSxJQUZ2Qjs7QUFJUSxnQkFBSUQsS0FBSixFQUFXO0FBQ0hFLGNBQUFBLFlBREc7QUFFSEMsY0FBQUEsUUFGRyxHQUVRSCxLQUFLLENBQUNJLE9BQU4sQ0FBYyxLQUFkLEVBQXFCLEVBQXJCLENBRlI7QUFJUGhDLGNBQUFBLGlCQUFpQixJQUFJK0IsUUFBckI7QUFDQUQsY0FBQUEsWUFBWSxHQUFHOUIsaUJBQWlCLENBQUNpQyxLQUFsQixDQUF3QixJQUF4QixDQUFmOztBQUVBLGtCQUFJSCxZQUFZLENBQUNJLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkI7QUFDckJDLGdCQUFBQSxTQURxQjtBQUd6QkEsZ0JBQUFBLFNBQVMsR0FBR0wsWUFBWSxDQUFDTSxHQUFiLEVBQVo7QUFDQXBDLGdCQUFBQSxpQkFBaUIsR0FBR21DLFNBQXBCOztBQUVBLG9CQUFJakMsaUJBQUosRUFBdUI7QUFDbkJBLGtCQUFBQSxpQkFBaUI7QUFDcEIsaUJBRkQsTUFFTztBQUNINEIsa0JBQUFBLFlBQVksQ0FBQ08sT0FBYixDQUFxQkMsdUJBQXJCO0FBQ0g7QUFDSjtBQUNKOztBQXZCVCxpQkF3QllULElBeEJaO0FBQUE7QUFBQTtBQUFBOztBQXlCWVUsWUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksd0JBQVosRUFBc0NYLElBQXRDO0FBQ0EvQixZQUFBQSxXQUFXLENBQUMyQyxXQUFaO0FBMUJaOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztBQWdDQSxTQUFTSCx1QkFBVCxDQUFpQ0ksU0FBakMsRUFBNEM7QUFDeEMsTUFBTUMsU0FBUyxHQUFHRCxTQUFTLENBQUNULEtBQVYsQ0FBZ0IsR0FBaEIsQ0FBbEI7QUFBQSxNQUNJVyxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0YsU0FBUyxDQUFDLENBQUQsQ0FBVixDQURuQjtBQUdBeEIsRUFBQUEseUJBQXlCLENBQUMsaUJBQUQsRUFBb0I7QUFDekN5QixJQUFBQSxJQUFJLEVBQUVBLElBRG1DO0FBRXpDRSxJQUFBQSxVQUFVLEVBQUVDLFVBQVUsQ0FBRUosU0FBUyxDQUFDLENBQUQsQ0FBVCxHQUFlLElBQWpCO0FBRm1CLEdBQXBCLENBQXpCO0FBSUg7O0FBRUQsU0FBU3hCLHlCQUFULENBQW1DNkIsSUFBbkMsRUFBK0Q7QUFBQSxNQUF0QkMsYUFBc0IsdUVBQU4sSUFBTTtBQUMzRCxNQUFJQyxJQUFJLEdBQUcsSUFBWDs7QUFFQSxNQUFJRCxhQUFhLEtBQUssSUFBdEIsRUFBNEI7QUFDeEJDLElBQUFBLElBQUksR0FBRztBQUNIQyxNQUFBQSxNQUFNLEVBQUVGO0FBREwsS0FBUDtBQUdIOztBQUVELE1BQU1HLFdBQVcsR0FBRyxJQUFJQyxXQUFKLENBQWdCTCxJQUFoQixFQUFzQkUsSUFBdEIsQ0FBcEI7QUFDQTVDLEVBQUFBLFFBQVEsQ0FBQ2dELGFBQVQsQ0FBdUJGLFdBQXZCO0FBQ0g7O0FBRU0sSUFBTUcsaUJBQWlCLEdBQUc7QUFDN0JwRCxFQUFBQSxRQUFRLEVBQVJBO0FBRDZCLENBQTFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3NlcmlhbC1kYXRhLXNlcnZpY2UuanM/MWIyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgcG9ydCxcbiAgICBpbnB1dFJlYWRlcixcbiAgICBpbnB1dFN0cmVhbSxcbiAgICBpbnB1dFN0cmVhbUJ1ZmZlciA9ICcnLFxuICAgIGlucHV0T3ZlclByb21pc2UsXG4gICAgZGlzY2FyZERhdGFQb2ludHMgPSAxMDtcblxuZnVuY3Rpb24gaW5pdGlhdGUoY29ubmVjdEJ1dHRvblNlbGVjdG9yKSB7XG4gICAgY29uc3QgY29ubmVjdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29ubmVjdEJ1dHRvblNlbGVjdG9yKTtcblxuICAgIGNvbm5lY3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNsaWNrQ29ubmVjdCgpLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgncG9ydFNlbGVjdGlvbkZhaWx1cmUnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsaWNrQ29ubmVjdCgpIHtcbiAgICBhd2FpdCBjb25uZWN0KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgbGV0IHN0cmVhbURlY29kZXIgPSBuZXcgVGV4dERlY29kZXJTdHJlYW0oKTtcblxuICAgIHBvcnQgPSBhd2FpdCBuYXZpZ2F0b3Iuc2VyaWFsLnJlcXVlc3RQb3J0KCk7XG5cbiAgICBmaXJlQ3VzdG9tRXZlbnRPbkRvY3VtZW50KCdTZXJpYWxQb3J0U2VsZWN0ZWQnKTtcblxuICAgIGF3YWl0IHBvcnQub3Blbih7IGJhdWRSYXRlOiA5NjAwIH0pO1xuICAgIGlucHV0T3ZlclByb21pc2UgPSBwb3J0LnJlYWRhYmxlLnBpcGVUbyhzdHJlYW1EZWNvZGVyLndyaXRhYmxlKTtcbiAgICBpbnB1dFN0cmVhbSA9IHN0cmVhbURlY29kZXIucmVhZGFibGU7XG4gICAgaW5wdXRSZWFkZXIgPSBpbnB1dFN0cmVhbS5nZXRSZWFkZXIoKTtcblxuICAgIGZpcmVDdXN0b21FdmVudE9uRG9jdW1lbnQoJ1NlcmlhbFBvcnRSZWFkaW5nJyk7XG4gICAgc2VyaWFsUmVhZExvb3AoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VyaWFsUmVhZExvb3AoKSB7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgaW5wdXRSZWFkZXIucmVhZCgpO1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgbGV0IGxvZ2ljYWxVbml0cztcbiAgICAgICAgICAgIGxldCBkYXRhVW5pdCA9IHZhbHVlLnJlcGxhY2UoL1xcci9nLCAnJyk7XG5cbiAgICAgICAgICAgIGlucHV0U3RyZWFtQnVmZmVyICs9IGRhdGFVbml0O1xuICAgICAgICAgICAgbG9naWNhbFVuaXRzID0gaW5wdXRTdHJlYW1CdWZmZXIuc3BsaXQoXCJcXG5cIik7XG5cbiAgICAgICAgICAgIGlmIChsb2dpY2FsVW5pdHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCByZW1haW5kZXI7XG5cbiAgICAgICAgICAgICAgICByZW1haW5kZXIgPSBsb2dpY2FsVW5pdHMucG9wKCk7XG4gICAgICAgICAgICAgICAgaW5wdXRTdHJlYW1CdWZmZXIgPSByZW1haW5kZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlzY2FyZERhdGFQb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzY2FyZERhdGFQb2ludHMtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2dpY2FsVW5pdHMuZm9yRWFjaChoYW5kbGVJbmNvbWluZ0RhdGFQb2ludCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2VyaWFsUmVhZExvb3AoKSBlbmRlZCcsIGRvbmUpO1xuICAgICAgICAgICAgaW5wdXRSZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVJbmNvbWluZ0RhdGFQb2ludChkYXRhUG9pbnQpIHtcbiAgICBjb25zdCBkYXRhSXRlbXMgPSBkYXRhUG9pbnQuc3BsaXQoXCIsXCIpLFxuICAgICAgICB0aW1lID0gcGFyc2VJbnQoZGF0YUl0ZW1zWzBdKTtcblxuICAgIGZpcmVDdXN0b21FdmVudE9uRG9jdW1lbnQoJ1NlcmlhbERhdGFQb2ludCcsIHtcbiAgICAgICAgdGltZTogdGltZSxcbiAgICAgICAgbWlsbGl2b2x0czogcGFyc2VGbG9hdCggZGF0YUl0ZW1zWzFdIC8gMTAwMCksXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpcmVDdXN0b21FdmVudE9uRG9jdW1lbnQobmFtZSwgZGV0YWlsc09iamVjdCA9IG51bGwpIHtcbiAgICBsZXQgZGF0YSA9IG51bGw7XG5cbiAgICBpZiAoZGV0YWlsc09iamVjdCAhPT0gbnVsbCkge1xuICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgZGV0YWlsOiBkZXRhaWxzT2JqZWN0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgY3VzdG9tRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQobmFtZSwgZGF0YSk7XG4gICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChjdXN0b21FdmVudCk7XG59XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxEYXRhU2VydmljZSA9IHtcbiAgICBpbml0aWF0ZVxufTtcbiJdLCJuYW1lcyI6WyJwb3J0IiwiaW5wdXRSZWFkZXIiLCJpbnB1dFN0cmVhbSIsImlucHV0U3RyZWFtQnVmZmVyIiwiaW5wdXRPdmVyUHJvbWlzZSIsImRpc2NhcmREYXRhUG9pbnRzIiwiaW5pdGlhdGUiLCJjb25uZWN0QnV0dG9uU2VsZWN0b3IiLCJjb25uZWN0QnV0dG9uIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsaWNrQ29ubmVjdCIsImJvZHkiLCJjbGFzc0xpc3QiLCJhZGQiLCJjb25uZWN0Iiwic3RyZWFtRGVjb2RlciIsIlRleHREZWNvZGVyU3RyZWFtIiwibmF2aWdhdG9yIiwic2VyaWFsIiwicmVxdWVzdFBvcnQiLCJmaXJlQ3VzdG9tRXZlbnRPbkRvY3VtZW50Iiwib3BlbiIsImJhdWRSYXRlIiwicmVhZGFibGUiLCJwaXBlVG8iLCJ3cml0YWJsZSIsImdldFJlYWRlciIsInNlcmlhbFJlYWRMb29wIiwicmVhZCIsInZhbHVlIiwiZG9uZSIsImxvZ2ljYWxVbml0cyIsImRhdGFVbml0IiwicmVwbGFjZSIsInNwbGl0IiwibGVuZ3RoIiwicmVtYWluZGVyIiwicG9wIiwiZm9yRWFjaCIsImhhbmRsZUluY29taW5nRGF0YVBvaW50IiwiY29uc29sZSIsImxvZyIsInJlbGVhc2VMb2NrIiwiZGF0YVBvaW50IiwiZGF0YUl0ZW1zIiwidGltZSIsInBhcnNlSW50IiwibWlsbGl2b2x0cyIsInBhcnNlRmxvYXQiLCJuYW1lIiwiZGV0YWlsc09iamVjdCIsImRhdGEiLCJkZXRhaWwiLCJjdXN0b21FdmVudCIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInNlcmlhbERhdGFTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/serial-data-service.js\n");

/***/ }),

/***/ "./resources/js/setup.js":
/*!*******************************!*\
  !*** ./resources/js/setup.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setup\": () => (/* binding */ setup)\n/* harmony export */ });\nfunction initiate() {\n  setupEventHandling();\n}\n\nfunction setupEventHandling() {\n  document.querySelector('#import-images').addEventListener('click', importImages);\n}\n\nfunction importImages() {\n  var xhr = new XMLHttpRequest(),\n      url = '/mylab/setup/importImages';\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      console.log(xhr.responseText);\n    } else if (xhr.readyState === 4) {\n      console.log('Something went wrong trying to obtain images.');\n    }\n  };\n\n  xhr.onerror = function () {\n    console.log('Something went very wrong trying to obtain images.');\n  };\n\n  xhr.open('GET', url, true);\n  xhr.send();\n}\n\nvar setup = {\n  initiate: initiate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvc2V0dXAuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFFBQVQsR0FBb0I7QUFDaEJDLEVBQUFBLGtCQUFrQjtBQUNyQjs7QUFFRCxTQUFTQSxrQkFBVCxHQUE4QjtBQUMxQkMsRUFBQUEsUUFBUSxDQUFDQyxhQUFULENBQXVCLGdCQUF2QixFQUF5Q0MsZ0JBQXpDLENBQTBELE9BQTFELEVBQW1FQyxZQUFuRTtBQUNIOztBQUVELFNBQVNBLFlBQVQsR0FBd0I7QUFDcEIsTUFBSUMsR0FBRyxHQUFHLElBQUlDLGNBQUosRUFBVjtBQUFBLE1BQ0lDLEdBQUcsR0FBRywyQkFEVjs7QUFHQUYsRUFBQUEsR0FBRyxDQUFDRyxrQkFBSixHQUF5QixZQUFNO0FBQzNCLFFBQUlILEdBQUcsQ0FBQ0ksVUFBSixLQUFtQixDQUFuQixJQUF3QkosR0FBRyxDQUFDSyxNQUFKLEtBQWUsR0FBM0MsRUFBZ0Q7QUFDNUNDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUCxHQUFHLENBQUNRLFlBQWhCO0FBQ0gsS0FGRCxNQUVPLElBQUlSLEdBQUcsQ0FBQ0ksVUFBSixLQUFtQixDQUF2QixFQUEwQjtBQUM3QkUsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksK0NBQVo7QUFDSDtBQUNKLEdBTkQ7O0FBUUFQLEVBQUFBLEdBQUcsQ0FBQ1MsT0FBSixHQUFjLFlBQU07QUFDaEJILElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9EQUFaO0FBQ0gsR0FGRDs7QUFJQVAsRUFBQUEsR0FBRyxDQUFDVSxJQUFKLENBQVMsS0FBVCxFQUFnQlIsR0FBaEIsRUFBcUIsSUFBckI7QUFDQUYsRUFBQUEsR0FBRyxDQUFDVyxJQUFKO0FBQ0g7O0FBRU0sSUFBTUMsS0FBSyxHQUFHO0FBQ2pCbEIsRUFBQUEsUUFBUSxFQUFSQTtBQURpQixDQUFkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3NldHVwLmpzPzA3MDMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5pdGlhdGUoKSB7XG4gICAgc2V0dXBFdmVudEhhbmRsaW5nKCk7XG59XG5cbmZ1bmN0aW9uIHNldHVwRXZlbnRIYW5kbGluZygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW1wb3J0LWltYWdlcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaW1wb3J0SW1hZ2VzKTtcbn1cblxuZnVuY3Rpb24gaW1wb3J0SW1hZ2VzKCkge1xuICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgdXJsID0gJy9teWxhYi9zZXR1cC9pbXBvcnRJbWFnZXMnO1xuXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTb21ldGhpbmcgd2VudCB3cm9uZyB0cnlpbmcgdG8gb2J0YWluIGltYWdlcy4nKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB4aHIub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHZlcnkgd3JvbmcgdHJ5aW5nIHRvIG9idGFpbiBpbWFnZXMuJyk7XG4gICAgfTtcblxuICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIHhoci5zZW5kKCk7XG59XG5cbmV4cG9ydCBjb25zdCBzZXR1cCA9IHtcbiAgICBpbml0aWF0ZVxufTtcbiJdLCJuYW1lcyI6WyJpbml0aWF0ZSIsInNldHVwRXZlbnRIYW5kbGluZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRJbWFnZXMiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInVybCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsIm9wZW4iLCJzZW5kIiwic2V0dXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/setup.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz80NzVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./resources/css/app.css":
/*!*******************************!*\
  !*** ./resources/css/app.css ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL2FwcC5jc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Nzcy9hcHAuY3NzPzVjMmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/css/app.css\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/css/app.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;